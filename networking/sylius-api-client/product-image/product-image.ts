/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetProductImageCollection200,
  AdminGetProductImageCollectionParams,
  ProductImageJsonldAdminProductImageRead,
  ProductImageJsonldShopProductImageRead,
  ShopGetProductImageItemParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of ProductImage resources.
 */
export const adminGetProductImageCollection = (
  params?: AdminGetProductImageCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetProductImageCollection200>(
    { url: `/api/v2/admin/product-images`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetProductImageCollectionQueryKey = (
  params?: AdminGetProductImageCollectionParams,
) => {
  return [`/api/v2/admin/product-images`, ...(params ? [params] : [])] as const;
};

export const getAdminGetProductImageCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductImageCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductImageCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductImageCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductImageCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductImageCollection>>> = ({
    signal,
  }) => adminGetProductImageCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductImageCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductImageCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductImageCollection>>
>;
export type AdminGetProductImageCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductImage resources.
 */
export const useAdminGetProductImageCollection = <
  TData = Awaited<ReturnType<typeof adminGetProductImageCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductImageCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductImageCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductImageCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductImage resource.
 */
export const adminGetProductImageItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductImageJsonldAdminProductImageRead>(
    { url: `/api/v2/admin/product-images/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetProductImageItemQueryKey = (id: string) => {
  return [`/api/v2/admin/product-images/${id}`] as const;
};

export const getAdminGetProductImageItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductImageItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductImageItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductImageItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductImageItem>>> = ({
    signal,
  }) => adminGetProductImageItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductImageItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductImageItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductImageItem>>
>;
export type AdminGetProductImageItemQueryError = void;

/**
 * @summary Retrieves a ProductImage resource.
 */
export const useAdminGetProductImageItem = <
  TData = Awaited<ReturnType<typeof adminGetProductImageItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductImageItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductImageItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductImage resource.
 */
export const shopGetProductImageItem = (
  id: string,
  params?: ShopGetProductImageItemParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductImageJsonldShopProductImageRead>(
    { url: `/api/v2/shop/product-images/${id}`, method: "get", params, signal },
    options,
  );
};

export const getShopGetProductImageItemQueryKey = (
  id: string,
  params?: ShopGetProductImageItemParams,
) => {
  return [`/api/v2/shop/product-images/${id}`, ...(params ? [params] : [])] as const;
};

export const getShopGetProductImageItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetProductImageItem>>,
  TError = void,
>(
  id: string,
  params?: ShopGetProductImageItemParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductImageItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetProductImageItemQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetProductImageItem>>> = ({
    signal,
  }) => shopGetProductImageItem(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetProductImageItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetProductImageItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetProductImageItem>>
>;
export type ShopGetProductImageItemQueryError = void;

/**
 * @summary Retrieves a ProductImage resource.
 */
export const useShopGetProductImageItem = <
  TData = Awaited<ReturnType<typeof shopGetProductImageItem>>,
  TError = void,
>(
  id: string,
  params?: ShopGetProductImageItemParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductImageItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetProductImageItemQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
