/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetExchangeRateCollection200,
  AdminGetExchangeRateCollectionParams,
  ExchangeRateJsonld,
  ExchangeRateJsonldAdminExchangeRateCreate,
  ExchangeRateJsonldAdminExchangeRateRead,
  ExchangeRateJsonldAdminExchangeRateUpdate,
  ExchangeRateJsonldShopExchangeRateRead,
  ExchangeRateShopExchangeRateRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of ExchangeRate resources.
 */
export const adminGetExchangeRateCollection = (
  params?: AdminGetExchangeRateCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetExchangeRateCollection200>(
    { url: `/api/v2/admin/exchange-rates`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetExchangeRateCollectionQueryKey = (
  params?: AdminGetExchangeRateCollectionParams,
) => {
  return [`/api/v2/admin/exchange-rates`, ...(params ? [params] : [])] as const;
};

export const getAdminGetExchangeRateCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetExchangeRateCollection>>,
  TError = unknown,
>(
  params?: AdminGetExchangeRateCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetExchangeRateCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetExchangeRateCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetExchangeRateCollection>>> = ({
    signal,
  }) => adminGetExchangeRateCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetExchangeRateCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetExchangeRateCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetExchangeRateCollection>>
>;
export type AdminGetExchangeRateCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ExchangeRate resources.
 */
export const useAdminGetExchangeRateCollection = <
  TData = Awaited<ReturnType<typeof adminGetExchangeRateCollection>>,
  TError = unknown,
>(
  params?: AdminGetExchangeRateCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetExchangeRateCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetExchangeRateCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a ExchangeRate resource.
 */
export const adminPostExchangeRateCollection = (
  exchangeRateJsonldAdminExchangeRateCreate: NonReadonly<ExchangeRateJsonldAdminExchangeRateCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ExchangeRateJsonld>(
    {
      url: `/api/v2/admin/exchange-rates`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: exchangeRateJsonldAdminExchangeRateCreate,
    },
    options,
  );
};

export const getAdminPostExchangeRateCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostExchangeRateCollection>>,
    TError,
    { data: NonReadonly<ExchangeRateJsonldAdminExchangeRateCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostExchangeRateCollection>>,
  TError,
  { data: NonReadonly<ExchangeRateJsonldAdminExchangeRateCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostExchangeRateCollection>>,
    { data: NonReadonly<ExchangeRateJsonldAdminExchangeRateCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostExchangeRateCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostExchangeRateCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostExchangeRateCollection>>
>;
export type AdminPostExchangeRateCollectionMutationBody =
  NonReadonly<ExchangeRateJsonldAdminExchangeRateCreate>;
export type AdminPostExchangeRateCollectionMutationError = void;

/**
 * @summary Creates a ExchangeRate resource.
 */
export const useAdminPostExchangeRateCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostExchangeRateCollection>>,
    TError,
    { data: NonReadonly<ExchangeRateJsonldAdminExchangeRateCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostExchangeRateCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a ExchangeRate resource.
 */
export const adminGetExchangeRateItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ExchangeRateJsonldAdminExchangeRateRead>(
    { url: `/api/v2/admin/exchange-rates/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetExchangeRateItemQueryKey = (id: string) => {
  return [`/api/v2/admin/exchange-rates/${id}`] as const;
};

export const getAdminGetExchangeRateItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetExchangeRateItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetExchangeRateItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetExchangeRateItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetExchangeRateItem>>> = ({
    signal,
  }) => adminGetExchangeRateItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetExchangeRateItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetExchangeRateItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetExchangeRateItem>>
>;
export type AdminGetExchangeRateItemQueryError = void;

/**
 * @summary Retrieves a ExchangeRate resource.
 */
export const useAdminGetExchangeRateItem = <
  TData = Awaited<ReturnType<typeof adminGetExchangeRateItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetExchangeRateItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetExchangeRateItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the ExchangeRate resource.
 */
export const adminPutExchangeRateItem = (
  id: string,
  exchangeRateJsonldAdminExchangeRateUpdate: NonReadonly<ExchangeRateJsonldAdminExchangeRateUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ExchangeRateJsonld>(
    {
      url: `/api/v2/admin/exchange-rates/${id}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: exchangeRateJsonldAdminExchangeRateUpdate,
    },
    options,
  );
};

export const getAdminPutExchangeRateItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutExchangeRateItem>>,
    TError,
    { id: string; data: NonReadonly<ExchangeRateJsonldAdminExchangeRateUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutExchangeRateItem>>,
  TError,
  { id: string; data: NonReadonly<ExchangeRateJsonldAdminExchangeRateUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutExchangeRateItem>>,
    { id: string; data: NonReadonly<ExchangeRateJsonldAdminExchangeRateUpdate> }
  > = props => {
    const { id, data } = props ?? {};

    return adminPutExchangeRateItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutExchangeRateItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutExchangeRateItem>>
>;
export type AdminPutExchangeRateItemMutationBody =
  NonReadonly<ExchangeRateJsonldAdminExchangeRateUpdate>;
export type AdminPutExchangeRateItemMutationError = void;

/**
 * @summary Replaces the ExchangeRate resource.
 */
export const useAdminPutExchangeRateItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutExchangeRateItem>>,
    TError,
    { id: string; data: NonReadonly<ExchangeRateJsonldAdminExchangeRateUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutExchangeRateItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Removes the ExchangeRate resource.
 */
export const adminDeleteExchangeRateItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/admin/exchange-rates/${id}`, method: "delete" },
    options,
  );
};

export const getAdminDeleteExchangeRateItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteExchangeRateItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeleteExchangeRateItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeleteExchangeRateItem>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return adminDeleteExchangeRateItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminDeleteExchangeRateItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeleteExchangeRateItem>>
>;

export type AdminDeleteExchangeRateItemMutationError = unknown;

/**
 * @summary Removes the ExchangeRate resource.
 */
export const useAdminDeleteExchangeRateItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteExchangeRateItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminDeleteExchangeRateItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of ExchangeRate resources.
 */
export const shopGetExchangeRateCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ExchangeRateShopExchangeRateRead[]>(
    { url: `/api/v2/shop/exchange-rates`, method: "get", signal },
    options,
  );
};

export const getShopGetExchangeRateCollectionQueryKey = () => {
  return [`/api/v2/shop/exchange-rates`] as const;
};

export const getShopGetExchangeRateCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetExchangeRateCollection>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetExchangeRateCollection>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetExchangeRateCollectionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetExchangeRateCollection>>> = ({
    signal,
  }) => shopGetExchangeRateCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetExchangeRateCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetExchangeRateCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetExchangeRateCollection>>
>;
export type ShopGetExchangeRateCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ExchangeRate resources.
 */
export const useShopGetExchangeRateCollection = <
  TData = Awaited<ReturnType<typeof shopGetExchangeRateCollection>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetExchangeRateCollection>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetExchangeRateCollectionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ExchangeRate resource.
 */
export const shopGetExchangeRateItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ExchangeRateJsonldShopExchangeRateRead>(
    { url: `/api/v2/shop/exchange-rates/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetExchangeRateItemQueryKey = (id: string) => {
  return [`/api/v2/shop/exchange-rates/${id}`] as const;
};

export const getShopGetExchangeRateItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetExchangeRateItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetExchangeRateItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetExchangeRateItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetExchangeRateItem>>> = ({
    signal,
  }) => shopGetExchangeRateItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetExchangeRateItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetExchangeRateItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetExchangeRateItem>>
>;
export type ShopGetExchangeRateItemQueryError = void;

/**
 * @summary Retrieves a ExchangeRate resource.
 */
export const useShopGetExchangeRateItem = <
  TData = Awaited<ReturnType<typeof shopGetExchangeRateItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetExchangeRateItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetExchangeRateItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
