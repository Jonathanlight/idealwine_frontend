/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ShopBillingDataJsonld,
  ShopBillingDataJsonldAdminShopBillingDataRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a ShopBillingData resource.
 */
export const apiChannelsShopBillingDataGetSubresource = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopBillingDataJsonld>(
    { url: `/api/v2/admin/channels/${code}/shop-billing-data`, method: "get", signal },
    options,
  );
};

export const getApiChannelsShopBillingDataGetSubresourceQueryKey = (code: string) => {
  return [`/api/v2/admin/channels/${code}/shop-billing-data`] as const;
};

export const getApiChannelsShopBillingDataGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiChannelsShopBillingDataGetSubresourceQueryKey(code);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>
  > = ({ signal }) => apiChannelsShopBillingDataGetSubresource(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiChannelsShopBillingDataGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>
>;
export type ApiChannelsShopBillingDataGetSubresourceQueryError = void;

/**
 * @summary Retrieves a ShopBillingData resource.
 */
export const useApiChannelsShopBillingDataGetSubresource = <
  TData = Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiChannelsShopBillingDataGetSubresourceQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ShopBillingData resource.
 */
export const adminGetShopBillingDataItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopBillingDataJsonldAdminShopBillingDataRead>(
    { url: `/api/v2/admin/shop-billing-datas/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetShopBillingDataItemQueryKey = (id: string) => {
  return [`/api/v2/admin/shop-billing-datas/${id}`] as const;
};

export const getAdminGetShopBillingDataItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetShopBillingDataItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetShopBillingDataItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetShopBillingDataItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetShopBillingDataItem>>> = ({
    signal,
  }) => adminGetShopBillingDataItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetShopBillingDataItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetShopBillingDataItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetShopBillingDataItem>>
>;
export type AdminGetShopBillingDataItemQueryError = void;

/**
 * @summary Retrieves a ShopBillingData resource.
 */
export const useAdminGetShopBillingDataItem = <
  TData = Awaited<ReturnType<typeof adminGetShopBillingDataItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetShopBillingDataItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetShopBillingDataItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
