/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetProductAvailabilityAlertCollection200,
  GetProductAvailabilityAlertCollectionParams,
  ProductAvailabilityAlertCreateAvailabilityAlertDTOJsonld,
  ProductAvailabilityAlertJsonld,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Creates a ProductAvailabilityAlert resource.
 */
export const postProductAvailabilityAlertCollection = (
  productAvailabilityAlertCreateAvailabilityAlertDTOJsonld: NonReadonly<ProductAvailabilityAlertCreateAvailabilityAlertDTOJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v2/shop/product-availability-alerts`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: productAvailabilityAlertCreateAvailabilityAlertDTOJsonld,
    },
    options,
  );
};

export const getPostProductAvailabilityAlertCollectionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductAvailabilityAlertCollection>>,
    TError,
    { data: NonReadonly<ProductAvailabilityAlertCreateAvailabilityAlertDTOJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProductAvailabilityAlertCollection>>,
  TError,
  { data: NonReadonly<ProductAvailabilityAlertCreateAvailabilityAlertDTOJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProductAvailabilityAlertCollection>>,
    { data: NonReadonly<ProductAvailabilityAlertCreateAvailabilityAlertDTOJsonld> }
  > = props => {
    const { data } = props ?? {};

    return postProductAvailabilityAlertCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProductAvailabilityAlertCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProductAvailabilityAlertCollection>>
>;
export type PostProductAvailabilityAlertCollectionMutationBody =
  NonReadonly<ProductAvailabilityAlertCreateAvailabilityAlertDTOJsonld>;
export type PostProductAvailabilityAlertCollectionMutationError = unknown;

/**
 * @summary Creates a ProductAvailabilityAlert resource.
 */
export const usePostProductAvailabilityAlertCollection = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductAvailabilityAlertCollection>>,
    TError,
    { data: NonReadonly<ProductAvailabilityAlertCreateAvailabilityAlertDTOJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostProductAvailabilityAlertCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of ProductAvailabilityAlert resources.
 */
export const getProductAvailabilityAlertCollection = (
  params?: GetProductAvailabilityAlertCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetProductAvailabilityAlertCollection200>(
    { url: `/api/v2/shop/product-availability-alerts`, method: "get", params, signal },
    options,
  );
};

export const getGetProductAvailabilityAlertCollectionQueryKey = (
  params?: GetProductAvailabilityAlertCollectionParams,
) => {
  return [`/api/v2/shop/product-availability-alerts`, ...(params ? [params] : [])] as const;
};

export const getGetProductAvailabilityAlertCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductAvailabilityAlertCollection>>,
  TError = unknown,
>(
  params?: GetProductAvailabilityAlertCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductAvailabilityAlertCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductAvailabilityAlertCollectionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductAvailabilityAlertCollection>>
  > = ({ signal }) => getProductAvailabilityAlertCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductAvailabilityAlertCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductAvailabilityAlertCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductAvailabilityAlertCollection>>
>;
export type GetProductAvailabilityAlertCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductAvailabilityAlert resources.
 */
export const useGetProductAvailabilityAlertCollection = <
  TData = Awaited<ReturnType<typeof getProductAvailabilityAlertCollection>>,
  TError = unknown,
>(
  params?: GetProductAvailabilityAlertCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductAvailabilityAlertCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductAvailabilityAlertCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductAvailabilityAlert resource.
 */
export const getProductAvailabilityAlertItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/product-availability-alerts/${id}`, method: "get", signal },
    options,
  );
};

export const getGetProductAvailabilityAlertItemQueryKey = (id: string) => {
  return [`/api/v2/shop/product-availability-alerts/${id}`] as const;
};

export const getGetProductAvailabilityAlertItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductAvailabilityAlertItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductAvailabilityAlertItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductAvailabilityAlertItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductAvailabilityAlertItem>>> = ({
    signal,
  }) => getProductAvailabilityAlertItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductAvailabilityAlertItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductAvailabilityAlertItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductAvailabilityAlertItem>>
>;
export type GetProductAvailabilityAlertItemQueryError = unknown;

/**
 * @summary Retrieves a ProductAvailabilityAlert resource.
 */
export const useGetProductAvailabilityAlertItem = <
  TData = Awaited<ReturnType<typeof getProductAvailabilityAlertItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductAvailabilityAlertItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductAvailabilityAlertItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the ProductAvailabilityAlert resource.
 */
export const putProductAvailabilityAlertItem = (
  id: string,
  productAvailabilityAlertJsonld: NonReadonly<ProductAvailabilityAlertJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductAvailabilityAlertJsonld>(
    {
      url: `/api/v2/shop/product-availability-alerts/${id}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: productAvailabilityAlertJsonld,
    },
    options,
  );
};

export const getPutProductAvailabilityAlertItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductAvailabilityAlertItem>>,
    TError,
    { id: string; data: NonReadonly<ProductAvailabilityAlertJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProductAvailabilityAlertItem>>,
  TError,
  { id: string; data: NonReadonly<ProductAvailabilityAlertJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProductAvailabilityAlertItem>>,
    { id: string; data: NonReadonly<ProductAvailabilityAlertJsonld> }
  > = props => {
    const { id, data } = props ?? {};

    return putProductAvailabilityAlertItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutProductAvailabilityAlertItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProductAvailabilityAlertItem>>
>;
export type PutProductAvailabilityAlertItemMutationBody =
  NonReadonly<ProductAvailabilityAlertJsonld>;
export type PutProductAvailabilityAlertItemMutationError = void;

/**
 * @summary Replaces the ProductAvailabilityAlert resource.
 */
export const usePutProductAvailabilityAlertItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductAvailabilityAlertItem>>,
    TError,
    { id: string; data: NonReadonly<ProductAvailabilityAlertJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPutProductAvailabilityAlertItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Removes the ProductAvailabilityAlert resource.
 */
export const deleteProductAvailabilityAlertItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/product-availability-alerts/${id}`, method: "delete" },
    options,
  );
};

export const getDeleteProductAvailabilityAlertItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductAvailabilityAlertItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProductAvailabilityAlertItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProductAvailabilityAlertItem>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return deleteProductAvailabilityAlertItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProductAvailabilityAlertItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProductAvailabilityAlertItem>>
>;

export type DeleteProductAvailabilityAlertItemMutationError = unknown;

/**
 * @summary Removes the ProductAvailabilityAlert resource.
 */
export const useDeleteProductAvailabilityAlertItem = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductAvailabilityAlertItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getDeleteProductAvailabilityAlertItemMutationOptions(options);

  return useMutation(mutationOptions);
};
