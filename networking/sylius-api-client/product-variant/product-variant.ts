/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetProductVariantCollection200,
  AdminGetProductVariantCollectionParams,
  ProductVariantJsonldAdminProductVariantCreate,
  ProductVariantJsonldAdminProductVariantRead,
  ProductVariantJsonldAdminProductVariantUpdate,
  ProductVariantJsonldShopProductVariantRead,
  ProductVariantProductVariantSaleReserveBidDTO,
  ProductVariantSimilarProductVariantsDTOShopSimilarProductVariantRead,
  ShopGetNewReleasesProductVariantCollection200,
  ShopGetNewReleasesProductVariantCollectionParams,
  ShopGetProductVariantCollection200,
  ShopGetProductVariantCollectionParams,
  ShopGetProductVariantItemParams,
  ShopGetSimilarProductVariantsProductVariantItemParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of ProductVariant resources.
 */
export const adminGetProductVariantCollection = (
  params?: AdminGetProductVariantCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetProductVariantCollection200>(
    { url: `/api/v2/admin/product-variants`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetProductVariantCollectionQueryKey = (
  params?: AdminGetProductVariantCollectionParams,
) => {
  return [`/api/v2/admin/product-variants`, ...(params ? [params] : [])] as const;
};

export const getAdminGetProductVariantCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductVariantCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductVariantCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductVariantCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductVariantCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductVariantCollection>>> = ({
    signal,
  }) => adminGetProductVariantCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductVariantCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductVariantCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductVariantCollection>>
>;
export type AdminGetProductVariantCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductVariant resources.
 */
export const useAdminGetProductVariantCollection = <
  TData = Awaited<ReturnType<typeof adminGetProductVariantCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductVariantCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductVariantCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductVariantCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a ProductVariant resource.
 */
export const adminPostProductVariantCollection = (
  productVariantJsonldAdminProductVariantCreate: NonReadonly<ProductVariantJsonldAdminProductVariantCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductVariantJsonldAdminProductVariantCreate>(
    {
      url: `/api/v2/admin/product-variants`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: productVariantJsonldAdminProductVariantCreate,
    },
    options,
  );
};

export const getAdminPostProductVariantCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostProductVariantCollection>>,
    TError,
    { data: NonReadonly<ProductVariantJsonldAdminProductVariantCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostProductVariantCollection>>,
  TError,
  { data: NonReadonly<ProductVariantJsonldAdminProductVariantCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostProductVariantCollection>>,
    { data: NonReadonly<ProductVariantJsonldAdminProductVariantCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostProductVariantCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostProductVariantCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostProductVariantCollection>>
>;
export type AdminPostProductVariantCollectionMutationBody =
  NonReadonly<ProductVariantJsonldAdminProductVariantCreate>;
export type AdminPostProductVariantCollectionMutationError = void;

/**
 * @summary Creates a ProductVariant resource.
 */
export const useAdminPostProductVariantCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostProductVariantCollection>>,
    TError,
    { data: NonReadonly<ProductVariantJsonldAdminProductVariantCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostProductVariantCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a ProductVariant resource.
 */
export const adminGetProductVariantItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductVariantJsonldAdminProductVariantRead>(
    { url: `/api/v2/admin/product-variants/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetProductVariantItemQueryKey = (code: string) => {
  return [`/api/v2/admin/product-variants/${code}`] as const;
};

export const getAdminGetProductVariantItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductVariantItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductVariantItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductVariantItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductVariantItem>>> = ({
    signal,
  }) => adminGetProductVariantItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductVariantItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductVariantItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductVariantItem>>
>;
export type AdminGetProductVariantItemQueryError = void;

/**
 * @summary Retrieves a ProductVariant resource.
 */
export const useAdminGetProductVariantItem = <
  TData = Awaited<ReturnType<typeof adminGetProductVariantItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductVariantItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductVariantItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the ProductVariant resource.
 */
export const adminPutProductVariantItem = (
  code: string,
  productVariantJsonldAdminProductVariantUpdate: NonReadonly<ProductVariantJsonldAdminProductVariantUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductVariantJsonldAdminProductVariantRead>(
    {
      url: `/api/v2/admin/product-variants/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: productVariantJsonldAdminProductVariantUpdate,
    },
    options,
  );
};

export const getAdminPutProductVariantItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProductVariantItem>>,
    TError,
    { code: string; data: NonReadonly<ProductVariantJsonldAdminProductVariantUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutProductVariantItem>>,
  TError,
  { code: string; data: NonReadonly<ProductVariantJsonldAdminProductVariantUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutProductVariantItem>>,
    { code: string; data: NonReadonly<ProductVariantJsonldAdminProductVariantUpdate> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutProductVariantItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutProductVariantItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutProductVariantItem>>
>;
export type AdminPutProductVariantItemMutationBody =
  NonReadonly<ProductVariantJsonldAdminProductVariantUpdate>;
export type AdminPutProductVariantItemMutationError = void;

/**
 * @summary Replaces the ProductVariant resource.
 */
export const useAdminPutProductVariantItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProductVariantItem>>,
    TError,
    { code: string; data: NonReadonly<ProductVariantJsonldAdminProductVariantUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutProductVariantItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of ProductVariant resources.
 */
export const shopGetProductVariantCollection = (
  params?: ShopGetProductVariantCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetProductVariantCollection200>(
    { url: `/api/v2/shop/product-variants`, method: "get", params, signal },
    options,
  );
};

export const getShopGetProductVariantCollectionQueryKey = (
  params?: ShopGetProductVariantCollectionParams,
) => {
  return [`/api/v2/shop/product-variants`, ...(params ? [params] : [])] as const;
};

export const getShopGetProductVariantCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetProductVariantCollection>>,
  TError = unknown,
>(
  params?: ShopGetProductVariantCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetProductVariantCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetProductVariantCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetProductVariantCollection>>> = ({
    signal,
  }) => shopGetProductVariantCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetProductVariantCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetProductVariantCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetProductVariantCollection>>
>;
export type ShopGetProductVariantCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductVariant resources.
 */
export const useShopGetProductVariantCollection = <
  TData = Awaited<ReturnType<typeof shopGetProductVariantCollection>>,
  TError = unknown,
>(
  params?: ShopGetProductVariantCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetProductVariantCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetProductVariantCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 
                        Selects 5 random new releases product variants for the selected region
                    
 */
export const shopGetNewReleasesProductVariantCollection = (
  region: "bordeaux" | "bourgogne" | "rhone" | "autre",
  params?: ShopGetNewReleasesProductVariantCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetNewReleasesProductVariantCollection200>(
    { url: `/api/v2/shop/product-variants-new-releases/${region}`, method: "get", params, signal },
    options,
  );
};

export const getShopGetNewReleasesProductVariantCollectionQueryKey = (
  region: "bordeaux" | "bourgogne" | "rhone" | "autre",
  params?: ShopGetNewReleasesProductVariantCollectionParams,
) => {
  return [
    `/api/v2/shop/product-variants-new-releases/${region}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getShopGetNewReleasesProductVariantCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetNewReleasesProductVariantCollection>>,
  TError = unknown,
>(
  region: "bordeaux" | "bourgogne" | "rhone" | "autre",
  params?: ShopGetNewReleasesProductVariantCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetNewReleasesProductVariantCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getShopGetNewReleasesProductVariantCollectionQueryKey(region, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof shopGetNewReleasesProductVariantCollection>>
  > = ({ signal }) =>
    shopGetNewReleasesProductVariantCollection(region, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!region, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetNewReleasesProductVariantCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetNewReleasesProductVariantCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetNewReleasesProductVariantCollection>>
>;
export type ShopGetNewReleasesProductVariantCollectionQueryError = unknown;

/**
 * @summary 
                        Selects 5 random new releases product variants for the selected region
                    
 */
export const useShopGetNewReleasesProductVariantCollection = <
  TData = Awaited<ReturnType<typeof shopGetNewReleasesProductVariantCollection>>,
  TError = unknown,
>(
  region: "bordeaux" | "bourgogne" | "rhone" | "autre",
  params?: ShopGetNewReleasesProductVariantCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetNewReleasesProductVariantCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetNewReleasesProductVariantCollectionQueryOptions(
    region,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductVariant resource.
 */
export const shopGetProductVariantItem = (
  code: string,
  params?: ShopGetProductVariantItemParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductVariantJsonldShopProductVariantRead>(
    { url: `/api/v2/shop/product-variants/${code}`, method: "get", params, signal },
    options,
  );
};

export const getShopGetProductVariantItemQueryKey = (
  code: string,
  params?: ShopGetProductVariantItemParams,
) => {
  return [`/api/v2/shop/product-variants/${code}`, ...(params ? [params] : [])] as const;
};

export const getShopGetProductVariantItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetProductVariantItem>>,
  TError = void,
>(
  code: string,
  params?: ShopGetProductVariantItemParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductVariantItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetProductVariantItemQueryKey(code, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetProductVariantItem>>> = ({
    signal,
  }) => shopGetProductVariantItem(code, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetProductVariantItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetProductVariantItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetProductVariantItem>>
>;
export type ShopGetProductVariantItemQueryError = void;

/**
 * @summary Retrieves a ProductVariant resource.
 */
export const useShopGetProductVariantItem = <
  TData = Awaited<ReturnType<typeof shopGetProductVariantItem>>,
  TError = void,
>(
  code: string,
  params?: ShopGetProductVariantItemParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductVariantItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetProductVariantItemQueryOptions(code, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Lower product variant reserve bid
 */
export const shopPatchReserveBidProductVariantItem = (
  code: string,
  productVariantProductVariantSaleReserveBidDTO: ProductVariantProductVariantSaleReserveBidDTO,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductVariantJsonldShopProductVariantRead>(
    {
      url: `/api/v2/shop/product-variants/${code}/reserve-bid`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: productVariantProductVariantSaleReserveBidDTO,
    },
    options,
  );
};

export const getShopPatchReserveBidProductVariantItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPatchReserveBidProductVariantItem>>,
    TError,
    { code: string; data: ProductVariantProductVariantSaleReserveBidDTO },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPatchReserveBidProductVariantItem>>,
  TError,
  { code: string; data: ProductVariantProductVariantSaleReserveBidDTO },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPatchReserveBidProductVariantItem>>,
    { code: string; data: ProductVariantProductVariantSaleReserveBidDTO }
  > = props => {
    const { code, data } = props ?? {};

    return shopPatchReserveBidProductVariantItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPatchReserveBidProductVariantItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPatchReserveBidProductVariantItem>>
>;
export type ShopPatchReserveBidProductVariantItemMutationBody =
  ProductVariantProductVariantSaleReserveBidDTO;
export type ShopPatchReserveBidProductVariantItemMutationError = void;

/**
 * @summary Lower product variant reserve bid
 */
export const useShopPatchReserveBidProductVariantItem = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPatchReserveBidProductVariantItem>>,
    TError,
    { code: string; data: ProductVariantProductVariantSaleReserveBidDTO },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPatchReserveBidProductVariantItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a SimilarProductVariantsDTO resource.
 */
export const shopGetSimilarProductVariantsProductVariantItem = (
  code: string,
  params?: ShopGetSimilarProductVariantsProductVariantItemParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductVariantSimilarProductVariantsDTOShopSimilarProductVariantRead>(
    {
      url: `/api/v2/shop/product-variants/${code}/similar-product-variants`,
      method: "get",
      params,
      signal,
    },
    options,
  );
};

export const getShopGetSimilarProductVariantsProductVariantItemQueryKey = (
  code: string,
  params?: ShopGetSimilarProductVariantsProductVariantItemParams,
) => {
  return [
    `/api/v2/shop/product-variants/${code}/similar-product-variants`,
    ...(params ? [params] : []),
  ] as const;
};

export const getShopGetSimilarProductVariantsProductVariantItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetSimilarProductVariantsProductVariantItem>>,
  TError = void,
>(
  code: string,
  params?: ShopGetSimilarProductVariantsProductVariantItemParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetSimilarProductVariantsProductVariantItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getShopGetSimilarProductVariantsProductVariantItemQueryKey(code, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof shopGetSimilarProductVariantsProductVariantItem>>
  > = ({ signal }) =>
    shopGetSimilarProductVariantsProductVariantItem(code, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetSimilarProductVariantsProductVariantItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetSimilarProductVariantsProductVariantItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetSimilarProductVariantsProductVariantItem>>
>;
export type ShopGetSimilarProductVariantsProductVariantItemQueryError = void;

/**
 * @summary Retrieves a SimilarProductVariantsDTO resource.
 */
export const useShopGetSimilarProductVariantsProductVariantItem = <
  TData = Awaited<ReturnType<typeof shopGetSimilarProductVariantsProductVariantItem>>,
  TError = void,
>(
  code: string,
  params?: ShopGetSimilarProductVariantsProductVariantItemParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetSimilarProductVariantsProductVariantItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetSimilarProductVariantsProductVariantItemQueryOptions(
    code,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
