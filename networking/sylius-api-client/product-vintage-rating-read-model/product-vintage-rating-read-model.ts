/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetProductVintageRatingReadModelCollection200,
  GetProductVintageRatingReadModelCollectionParams,
  RankingProductVintageRatingReadModelCollection200,
  RankingProductVintageRatingReadModelCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of ProductVintageRatingReadModel resources.
 */
export const getProductVintageRatingReadModelCollection = (
  params?: GetProductVintageRatingReadModelCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetProductVintageRatingReadModelCollection200>(
    { url: `/api/v2/shop/product-vintage-rating-read-models`, method: "get", params, signal },
    options,
  );
};

export const getGetProductVintageRatingReadModelCollectionQueryKey = (
  params?: GetProductVintageRatingReadModelCollectionParams,
) => {
  return [`/api/v2/shop/product-vintage-rating-read-models`, ...(params ? [params] : [])] as const;
};

export const getGetProductVintageRatingReadModelCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductVintageRatingReadModelCollection>>,
  TError = unknown,
>(
  params?: GetProductVintageRatingReadModelCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductVintageRatingReadModelCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductVintageRatingReadModelCollectionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductVintageRatingReadModelCollection>>
  > = ({ signal }) => getProductVintageRatingReadModelCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductVintageRatingReadModelCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductVintageRatingReadModelCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductVintageRatingReadModelCollection>>
>;
export type GetProductVintageRatingReadModelCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductVintageRatingReadModel resources.
 */
export const useGetProductVintageRatingReadModelCollection = <
  TData = Awaited<ReturnType<typeof getProductVintageRatingReadModelCollection>>,
  TError = unknown,
>(
  params?: GetProductVintageRatingReadModelCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductVintageRatingReadModelCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductVintageRatingReadModelCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of ProductVintageRatingReadModel resources.
 */
export const rankingProductVintageRatingReadModelCollection = (
  params?: RankingProductVintageRatingReadModelCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<RankingProductVintageRatingReadModelCollection200>(
    {
      url: `/api/v2/shop/product-vintage-rating-read-models/ranking`,
      method: "get",
      params,
      signal,
    },
    options,
  );
};

export const getRankingProductVintageRatingReadModelCollectionQueryKey = (
  params?: RankingProductVintageRatingReadModelCollectionParams,
) => {
  return [
    `/api/v2/shop/product-vintage-rating-read-models/ranking`,
    ...(params ? [params] : []),
  ] as const;
};

export const getRankingProductVintageRatingReadModelCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof rankingProductVintageRatingReadModelCollection>>,
  TError = unknown,
>(
  params?: RankingProductVintageRatingReadModelCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof rankingProductVintageRatingReadModelCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRankingProductVintageRatingReadModelCollectionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rankingProductVintageRatingReadModelCollection>>
  > = ({ signal }) =>
    rankingProductVintageRatingReadModelCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rankingProductVintageRatingReadModelCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type RankingProductVintageRatingReadModelCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof rankingProductVintageRatingReadModelCollection>>
>;
export type RankingProductVintageRatingReadModelCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductVintageRatingReadModel resources.
 */
export const useRankingProductVintageRatingReadModelCollection = <
  TData = Awaited<ReturnType<typeof rankingProductVintageRatingReadModelCollection>>,
  TError = unknown,
>(
  params?: RankingProductVintageRatingReadModelCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof rankingProductVintageRatingReadModelCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRankingProductVintageRatingReadModelCollectionQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductVintageRatingReadModel resource.
 */
export const getProductVintageRatingReadModelItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/product-vintage-rating-read-models/${id}`, method: "get", signal },
    options,
  );
};

export const getGetProductVintageRatingReadModelItemQueryKey = (id: string) => {
  return [`/api/v2/shop/product-vintage-rating-read-models/${id}`] as const;
};

export const getGetProductVintageRatingReadModelItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductVintageRatingReadModelItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductVintageRatingReadModelItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductVintageRatingReadModelItemQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductVintageRatingReadModelItem>>
  > = ({ signal }) => getProductVintageRatingReadModelItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductVintageRatingReadModelItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductVintageRatingReadModelItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductVintageRatingReadModelItem>>
>;
export type GetProductVintageRatingReadModelItemQueryError = unknown;

/**
 * @summary Retrieves a ProductVintageRatingReadModel resource.
 */
export const useGetProductVintageRatingReadModelItem = <
  TData = Awaited<ReturnType<typeof getProductVintageRatingReadModelItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductVintageRatingReadModelItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductVintageRatingReadModelItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
