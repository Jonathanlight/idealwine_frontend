/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate,
  CustomerCustomerMetadataDTOJsonldShopDatalayerRead,
  CustomerGeneratePaymentUrlDTOJsonldShopCustomerRead,
  CustomerJsonldAdminCustomerRead,
  CustomerJsonldShopCustomerRead,
  CustomerJsonldShopCustomerUpdate,
  CustomerJsonldShopWishlistUpdate,
  CustomerNewsletterCustomerJsonld,
  CustomerRegisterShopUserJsonldShopCustomerCreate,
  CustomerVerifyCreditCardMessageJsonld,
  CustomerWishlistDTOJsonldShopWishlistRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a Customer resource.
 */
export const adminGetCustomerItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CustomerJsonldAdminCustomerRead>(
    { url: `/api/v2/admin/customers/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetCustomerItemQueryKey = (id: string) => {
  return [`/api/v2/admin/customers/${id}`] as const;
};

export const getAdminGetCustomerItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetCustomerItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetCustomerItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetCustomerItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetCustomerItem>>> = ({ signal }) =>
    adminGetCustomerItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetCustomerItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetCustomerItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetCustomerItem>>
>;
export type AdminGetCustomerItemQueryError = void;

/**
 * @summary Retrieves a Customer resource.
 */
export const useAdminGetCustomerItem = <
  TData = Awaited<ReturnType<typeof adminGetCustomerItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetCustomerItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetCustomerItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Registers a new customer
 */
export const shopPostCustomerCollection = (
  customerRegisterShopUserJsonldShopCustomerCreate: NonReadonly<CustomerRegisterShopUserJsonldShopCustomerCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v2/shop/customers`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: customerRegisterShopUserJsonldShopCustomerCreate,
    },
    options,
  );
};

export const getShopPostCustomerCollectionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPostCustomerCollection>>,
    TError,
    { data: NonReadonly<CustomerRegisterShopUserJsonldShopCustomerCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPostCustomerCollection>>,
  TError,
  { data: NonReadonly<CustomerRegisterShopUserJsonldShopCustomerCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPostCustomerCollection>>,
    { data: NonReadonly<CustomerRegisterShopUserJsonldShopCustomerCreate> }
  > = props => {
    const { data } = props ?? {};

    return shopPostCustomerCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPostCustomerCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPostCustomerCollection>>
>;
export type ShopPostCustomerCollectionMutationBody =
  NonReadonly<CustomerRegisterShopUserJsonldShopCustomerCreate>;
export type ShopPostCustomerCollectionMutationError = unknown;

/**
 * @summary Registers a new customer
 */
export const useShopPostCustomerCollection = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPostCustomerCollection>>,
    TError,
    { data: NonReadonly<CustomerRegisterShopUserJsonldShopCustomerCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPostCustomerCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Subscribe the customer to the newsletter
 */
export const newsletterPostCustomerCollection = (
  customerNewsletterCustomerJsonld: NonReadonly<CustomerNewsletterCustomerJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v2/shop/customers/newsletter`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: customerNewsletterCustomerJsonld,
    },
    options,
  );
};

export const getNewsletterPostCustomerCollectionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newsletterPostCustomerCollection>>,
    TError,
    { data: NonReadonly<CustomerNewsletterCustomerJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof newsletterPostCustomerCollection>>,
  TError,
  { data: NonReadonly<CustomerNewsletterCustomerJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof newsletterPostCustomerCollection>>,
    { data: NonReadonly<CustomerNewsletterCustomerJsonld> }
  > = props => {
    const { data } = props ?? {};

    return newsletterPostCustomerCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NewsletterPostCustomerCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof newsletterPostCustomerCollection>>
>;
export type NewsletterPostCustomerCollectionMutationBody =
  NonReadonly<CustomerNewsletterCustomerJsonld>;
export type NewsletterPostCustomerCollectionMutationError = unknown;

/**
 * @summary Subscribe the customer to the newsletter
 */
export const useNewsletterPostCustomerCollection = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newsletterPostCustomerCollection>>,
    TError,
    { data: NonReadonly<CustomerNewsletterCustomerJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getNewsletterPostCustomerCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a Customer resource.
 */
export const shopGetCustomerItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CustomerJsonldShopCustomerRead>(
    { url: `/api/v2/shop/customers/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetCustomerItemQueryKey = (id: string) => {
  return [`/api/v2/shop/customers/${id}`] as const;
};

export const getShopGetCustomerItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetCustomerItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetCustomerItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetCustomerItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetCustomerItem>>> = ({ signal }) =>
    shopGetCustomerItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetCustomerItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetCustomerItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetCustomerItem>>
>;
export type ShopGetCustomerItemQueryError = void;

/**
 * @summary Retrieves a Customer resource.
 */
export const useShopGetCustomerItem = <
  TData = Awaited<ReturnType<typeof shopGetCustomerItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetCustomerItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetCustomerItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the Customer resource.
 */
export const shopPutCustomerItem = (
  id: string,
  customerJsonldShopCustomerUpdate: NonReadonly<CustomerJsonldShopCustomerUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CustomerJsonldShopCustomerRead>(
    {
      url: `/api/v2/shop/customers/${id}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: customerJsonldShopCustomerUpdate,
    },
    options,
  );
};

export const getShopPutCustomerItemMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPutCustomerItem>>,
    TError,
    { id: string; data: NonReadonly<CustomerJsonldShopCustomerUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPutCustomerItem>>,
  TError,
  { id: string; data: NonReadonly<CustomerJsonldShopCustomerUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPutCustomerItem>>,
    { id: string; data: NonReadonly<CustomerJsonldShopCustomerUpdate> }
  > = props => {
    const { id, data } = props ?? {};

    return shopPutCustomerItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPutCustomerItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPutCustomerItem>>
>;
export type ShopPutCustomerItemMutationBody = NonReadonly<CustomerJsonldShopCustomerUpdate>;
export type ShopPutCustomerItemMutationError = void;

/**
 * @summary Replaces the Customer resource.
 */
export const useShopPutCustomerItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPutCustomerItem>>,
    TError,
    { id: string; data: NonReadonly<CustomerJsonldShopCustomerUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPutCustomerItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Metadata for customer
 */
export const shopGetDatalayerCustomerItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CustomerCustomerMetadataDTOJsonldShopDatalayerRead>(
    { url: `/api/v2/shop/customers/${id}/datalayer`, method: "get", signal },
    options,
  );
};

export const getShopGetDatalayerCustomerItemQueryKey = (id: string) => {
  return [`/api/v2/shop/customers/${id}/datalayer`] as const;
};

export const getShopGetDatalayerCustomerItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetDatalayerCustomerItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetDatalayerCustomerItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetDatalayerCustomerItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetDatalayerCustomerItem>>> = ({
    signal,
  }) => shopGetDatalayerCustomerItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetDatalayerCustomerItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetDatalayerCustomerItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetDatalayerCustomerItem>>
>;
export type ShopGetDatalayerCustomerItemQueryError = void;

/**
 * @summary Get Metadata for customer
 */
export const useShopGetDatalayerCustomerItem = <
  TData = Awaited<ReturnType<typeof shopGetDatalayerCustomerItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetDatalayerCustomerItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetDatalayerCustomerItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Change password for logged in customer
 */
export const shopPasswordUpdateCustomerItem = (
  id: string,
  customerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate: NonReadonly<CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v2/shop/customers/${id}/password`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: customerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate,
    },
    options,
  );
};

export const getShopPasswordUpdateCustomerItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPasswordUpdateCustomerItem>>,
    TError,
    {
      id: string;
      data: NonReadonly<CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate>;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPasswordUpdateCustomerItem>>,
  TError,
  { id: string; data: NonReadonly<CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPasswordUpdateCustomerItem>>,
    {
      id: string;
      data: NonReadonly<CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate>;
    }
  > = props => {
    const { id, data } = props ?? {};

    return shopPasswordUpdateCustomerItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPasswordUpdateCustomerItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPasswordUpdateCustomerItem>>
>;
export type ShopPasswordUpdateCustomerItemMutationBody =
  NonReadonly<CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate>;
export type ShopPasswordUpdateCustomerItemMutationError = unknown;

/**
 * @summary Change password for logged in customer
 */
export const useShopPasswordUpdateCustomerItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPasswordUpdateCustomerItem>>,
    TError,
    {
      id: string;
      data: NonReadonly<CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate>;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPasswordUpdateCustomerItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Give an URL for credit card validation
 */
export const shopCreditCardVerificationCustomerItem = (
  id: string,
  customerVerifyCreditCardMessageJsonld: NonReadonly<CustomerVerifyCreditCardMessageJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CustomerGeneratePaymentUrlDTOJsonldShopCustomerRead>(
    {
      url: `/api/v2/shop/customers/${id}/verify-credit-card`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: customerVerifyCreditCardMessageJsonld,
    },
    options,
  );
};

export const getShopCreditCardVerificationCustomerItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopCreditCardVerificationCustomerItem>>,
    TError,
    { id: string; data: NonReadonly<CustomerVerifyCreditCardMessageJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopCreditCardVerificationCustomerItem>>,
  TError,
  { id: string; data: NonReadonly<CustomerVerifyCreditCardMessageJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopCreditCardVerificationCustomerItem>>,
    { id: string; data: NonReadonly<CustomerVerifyCreditCardMessageJsonld> }
  > = props => {
    const { id, data } = props ?? {};

    return shopCreditCardVerificationCustomerItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopCreditCardVerificationCustomerItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopCreditCardVerificationCustomerItem>>
>;
export type ShopCreditCardVerificationCustomerItemMutationBody =
  NonReadonly<CustomerVerifyCreditCardMessageJsonld>;
export type ShopCreditCardVerificationCustomerItemMutationError = void;

/**
 * @summary Give an URL for credit card validation
 */
export const useShopCreditCardVerificationCustomerItem = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopCreditCardVerificationCustomerItem>>,
    TError,
    { id: string; data: NonReadonly<CustomerVerifyCreditCardMessageJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopCreditCardVerificationCustomerItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get wishlist for logged in customer
 */
export const shopGetWishlistCustomerItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CustomerWishlistDTOJsonldShopWishlistRead>(
    { url: `/api/v2/shop/customers/${id}/wishlist`, method: "get", signal },
    options,
  );
};

export const getShopGetWishlistCustomerItemQueryKey = (id: string) => {
  return [`/api/v2/shop/customers/${id}/wishlist`] as const;
};

export const getShopGetWishlistCustomerItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetWishlistCustomerItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetWishlistCustomerItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetWishlistCustomerItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetWishlistCustomerItem>>> = ({
    signal,
  }) => shopGetWishlistCustomerItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetWishlistCustomerItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetWishlistCustomerItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetWishlistCustomerItem>>
>;
export type ShopGetWishlistCustomerItemQueryError = void;

/**
 * @summary Get wishlist for logged in customer
 */
export const useShopGetWishlistCustomerItem = <
  TData = Awaited<ReturnType<typeof shopGetWishlistCustomerItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetWishlistCustomerItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetWishlistCustomerItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Updates the wishlist of a logged customer
 */
export const shopPutWishlistCustomerItem = (
  id: string,
  customerJsonldShopWishlistUpdate: NonReadonly<CustomerJsonldShopWishlistUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CustomerWishlistDTOJsonldShopWishlistRead>(
    {
      url: `/api/v2/shop/customers/${id}/wishlist`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: customerJsonldShopWishlistUpdate,
    },
    options,
  );
};

export const getShopPutWishlistCustomerItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPutWishlistCustomerItem>>,
    TError,
    { id: string; data: NonReadonly<CustomerJsonldShopWishlistUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPutWishlistCustomerItem>>,
  TError,
  { id: string; data: NonReadonly<CustomerJsonldShopWishlistUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPutWishlistCustomerItem>>,
    { id: string; data: NonReadonly<CustomerJsonldShopWishlistUpdate> }
  > = props => {
    const { id, data } = props ?? {};

    return shopPutWishlistCustomerItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPutWishlistCustomerItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPutWishlistCustomerItem>>
>;
export type ShopPutWishlistCustomerItemMutationBody = NonReadonly<CustomerJsonldShopWishlistUpdate>;
export type ShopPutWishlistCustomerItemMutationError = void;

/**
 * @summary Updates the wishlist of a logged customer
 */
export const useShopPutWishlistCustomerItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPutWishlistCustomerItem>>,
    TError,
    { id: string; data: NonReadonly<CustomerJsonldShopWishlistUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPutWishlistCustomerItemMutationOptions(options);

  return useMutation(mutationOptions);
};
