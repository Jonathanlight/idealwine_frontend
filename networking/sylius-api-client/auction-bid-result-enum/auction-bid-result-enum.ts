/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetAuctionBidResultEnumCollection200,
  GetAuctionBidResultEnumCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of AuctionBidResultEnum resources.
 */
export const getAuctionBidResultEnumCollection = (
  params?: GetAuctionBidResultEnumCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetAuctionBidResultEnumCollection200>(
    { url: `/api/v2/auction-bid-result-enums`, method: "get", params, signal },
    options,
  );
};

export const getGetAuctionBidResultEnumCollectionQueryKey = (
  params?: GetAuctionBidResultEnumCollectionParams,
) => {
  return [`/api/v2/auction-bid-result-enums`, ...(params ? [params] : [])] as const;
};

export const getGetAuctionBidResultEnumCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuctionBidResultEnumCollection>>,
  TError = unknown,
>(
  params?: GetAuctionBidResultEnumCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAuctionBidResultEnumCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuctionBidResultEnumCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuctionBidResultEnumCollection>>> = ({
    signal,
  }) => getAuctionBidResultEnumCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuctionBidResultEnumCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuctionBidResultEnumCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuctionBidResultEnumCollection>>
>;
export type GetAuctionBidResultEnumCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of AuctionBidResultEnum resources.
 */
export const useGetAuctionBidResultEnumCollection = <
  TData = Awaited<ReturnType<typeof getAuctionBidResultEnumCollection>>,
  TError = unknown,
>(
  params?: GetAuctionBidResultEnumCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAuctionBidResultEnumCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuctionBidResultEnumCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
