/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  PaymentMethodJsonldAdminPaymentMethodRead,
  PaymentMethodJsonldShopPaymentMethodRead,
  ShopGetPaymentMethodCollection200,
  ShopGetPaymentMethodCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a PaymentMethod resource.
 */
export const adminGetPaymentMethodItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaymentMethodJsonldAdminPaymentMethodRead>(
    { url: `/api/v2/admin/payment-methods/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetPaymentMethodItemQueryKey = (code: string) => {
  return [`/api/v2/admin/payment-methods/${code}`] as const;
};

export const getAdminGetPaymentMethodItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetPaymentMethodItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetPaymentMethodItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetPaymentMethodItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetPaymentMethodItem>>> = ({
    signal,
  }) => adminGetPaymentMethodItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetPaymentMethodItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetPaymentMethodItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetPaymentMethodItem>>
>;
export type AdminGetPaymentMethodItemQueryError = void;

/**
 * @summary Retrieves a PaymentMethod resource.
 */
export const useAdminGetPaymentMethodItem = <
  TData = Awaited<ReturnType<typeof adminGetPaymentMethodItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetPaymentMethodItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetPaymentMethodItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of PaymentMethod resources.
 */
export const shopGetPaymentMethodCollection = (
  params?: ShopGetPaymentMethodCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetPaymentMethodCollection200>(
    { url: `/api/v2/shop/payment-methods`, method: "get", params, signal },
    options,
  );
};

export const getShopGetPaymentMethodCollectionQueryKey = (
  params?: ShopGetPaymentMethodCollectionParams,
) => {
  return [`/api/v2/shop/payment-methods`, ...(params ? [params] : [])] as const;
};

export const getShopGetPaymentMethodCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetPaymentMethodCollection>>,
  TError = unknown,
>(
  params?: ShopGetPaymentMethodCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetPaymentMethodCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetPaymentMethodCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetPaymentMethodCollection>>> = ({
    signal,
  }) => shopGetPaymentMethodCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetPaymentMethodCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetPaymentMethodCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetPaymentMethodCollection>>
>;
export type ShopGetPaymentMethodCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of PaymentMethod resources.
 */
export const useShopGetPaymentMethodCollection = <
  TData = Awaited<ReturnType<typeof shopGetPaymentMethodCollection>>,
  TError = unknown,
>(
  params?: ShopGetPaymentMethodCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetPaymentMethodCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetPaymentMethodCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a PaymentMethod resource.
 */
export const shopGetPaymentMethodItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaymentMethodJsonldShopPaymentMethodRead>(
    { url: `/api/v2/shop/payment-methods/${code}`, method: "get", signal },
    options,
  );
};

export const getShopGetPaymentMethodItemQueryKey = (code: string) => {
  return [`/api/v2/shop/payment-methods/${code}`] as const;
};

export const getShopGetPaymentMethodItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetPaymentMethodItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetPaymentMethodItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetPaymentMethodItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetPaymentMethodItem>>> = ({
    signal,
  }) => shopGetPaymentMethodItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetPaymentMethodItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetPaymentMethodItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetPaymentMethodItem>>
>;
export type ShopGetPaymentMethodItemQueryError = void;

/**
 * @summary Retrieves a PaymentMethod resource.
 */
export const useShopGetPaymentMethodItem = <
  TData = Awaited<ReturnType<typeof shopGetPaymentMethodItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetPaymentMethodItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetPaymentMethodItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
