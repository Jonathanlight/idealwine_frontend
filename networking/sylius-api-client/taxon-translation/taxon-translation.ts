/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetTaxonTranslationCollection200,
  AdminGetTaxonTranslationCollectionParams,
  TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead,
  TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of TaxonTranslation resources.
 */
export const adminGetTaxonTranslationCollection = (
  params?: AdminGetTaxonTranslationCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetTaxonTranslationCollection200>(
    { url: `/api/v2/admin/taxon-translations`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetTaxonTranslationCollectionQueryKey = (
  params?: AdminGetTaxonTranslationCollectionParams,
) => {
  return [`/api/v2/admin/taxon-translations`, ...(params ? [params] : [])] as const;
};

export const getAdminGetTaxonTranslationCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetTaxonTranslationCollection>>,
  TError = unknown,
>(
  params?: AdminGetTaxonTranslationCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetTaxonTranslationCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetTaxonTranslationCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetTaxonTranslationCollection>>> = ({
    signal,
  }) => adminGetTaxonTranslationCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetTaxonTranslationCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetTaxonTranslationCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetTaxonTranslationCollection>>
>;
export type AdminGetTaxonTranslationCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of TaxonTranslation resources.
 */
export const useAdminGetTaxonTranslationCollection = <
  TData = Awaited<ReturnType<typeof adminGetTaxonTranslationCollection>>,
  TError = unknown,
>(
  params?: AdminGetTaxonTranslationCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetTaxonTranslationCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetTaxonTranslationCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a TaxonTranslation resource.
 */
export const adminGetTaxonTranslationItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead>(
    { url: `/api/v2/admin/taxon-translations/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetTaxonTranslationItemQueryKey = (id: string) => {
  return [`/api/v2/admin/taxon-translations/${id}`] as const;
};

export const getAdminGetTaxonTranslationItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetTaxonTranslationItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetTaxonTranslationItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetTaxonTranslationItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetTaxonTranslationItem>>> = ({
    signal,
  }) => adminGetTaxonTranslationItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetTaxonTranslationItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetTaxonTranslationItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetTaxonTranslationItem>>
>;
export type AdminGetTaxonTranslationItemQueryError = void;

/**
 * @summary Retrieves a TaxonTranslation resource.
 */
export const useAdminGetTaxonTranslationItem = <
  TData = Awaited<ReturnType<typeof adminGetTaxonTranslationItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetTaxonTranslationItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetTaxonTranslationItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a TaxonTranslation resource.
 */
export const shopGetTaxonTranslationItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead>(
    { url: `/api/v2/shop/taxon-translations/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetTaxonTranslationItemQueryKey = (id: string) => {
  return [`/api/v2/shop/taxon-translations/${id}`] as const;
};

export const getShopGetTaxonTranslationItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetTaxonTranslationItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetTaxonTranslationItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetTaxonTranslationItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetTaxonTranslationItem>>> = ({
    signal,
  }) => shopGetTaxonTranslationItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetTaxonTranslationItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetTaxonTranslationItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetTaxonTranslationItem>>
>;
export type ShopGetTaxonTranslationItemQueryError = void;

/**
 * @summary Retrieves a TaxonTranslation resource.
 */
export const useShopGetTaxonTranslationItem = <
  TData = Awaited<ReturnType<typeof shopGetTaxonTranslationItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetTaxonTranslationItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetTaxonTranslationItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
