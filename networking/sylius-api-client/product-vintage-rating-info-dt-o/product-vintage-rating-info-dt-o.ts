/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetProductVintageRatingInfoDTOItemParams,
  ProductVintageRatingInfoDTOJsonldShopProductVintageRatingInfoDtoRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a ProductVintageRatingInfoDTO resource.
 */
export const getProductVintageRatingInfoDTOItem = (
  productVintageCode: string,
  params?: GetProductVintageRatingInfoDTOItemParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductVintageRatingInfoDTOJsonldShopProductVintageRatingInfoDtoRead>(
    {
      url: `/api/v2/shop/product-vintage-rating-info/${productVintageCode}`,
      method: "get",
      params,
      signal,
    },
    options,
  );
};

export const getGetProductVintageRatingInfoDTOItemQueryKey = (
  productVintageCode: string,
  params?: GetProductVintageRatingInfoDTOItemParams,
) => {
  return [
    `/api/v2/shop/product-vintage-rating-info/${productVintageCode}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetProductVintageRatingInfoDTOItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductVintageRatingInfoDTOItem>>,
  TError = void,
>(
  productVintageCode: string,
  params?: GetProductVintageRatingInfoDTOItemParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductVintageRatingInfoDTOItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductVintageRatingInfoDTOItemQueryKey(productVintageCode, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductVintageRatingInfoDTOItem>>> = ({
    signal,
  }) => getProductVintageRatingInfoDTOItem(productVintageCode, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!productVintageCode, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductVintageRatingInfoDTOItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductVintageRatingInfoDTOItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductVintageRatingInfoDTOItem>>
>;
export type GetProductVintageRatingInfoDTOItemQueryError = void;

/**
 * @summary Retrieves a ProductVintageRatingInfoDTO resource.
 */
export const useGetProductVintageRatingInfoDTOItem = <
  TData = Awaited<ReturnType<typeof getProductVintageRatingInfoDTOItem>>,
  TError = void,
>(
  productVintageCode: string,
  params?: GetProductVintageRatingInfoDTOItemParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductVintageRatingInfoDTOItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductVintageRatingInfoDTOItemQueryOptions(
    productVintageCode,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
