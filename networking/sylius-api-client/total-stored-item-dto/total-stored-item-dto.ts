/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { GetTotalStoredItemDtoItemParams, TotalStoredItemDto } from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a TotalStoredItemDto resource.
 */
export const getTotalStoredItemDtoItem = (
  id: string,
  params?: GetTotalStoredItemDtoItemParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TotalStoredItemDto>(
    { url: `/api/v2/shop/total-stored-items/${id}`, method: "get", params, signal },
    options,
  );
};

export const getGetTotalStoredItemDtoItemQueryKey = (
  id: string,
  params?: GetTotalStoredItemDtoItemParams,
) => {
  return [`/api/v2/shop/total-stored-items/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetTotalStoredItemDtoItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getTotalStoredItemDtoItem>>,
  TError = void,
>(
  id: string,
  params?: GetTotalStoredItemDtoItemParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTotalStoredItemDtoItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTotalStoredItemDtoItemQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTotalStoredItemDtoItem>>> = ({
    signal,
  }) => getTotalStoredItemDtoItem(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTotalStoredItemDtoItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTotalStoredItemDtoItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTotalStoredItemDtoItem>>
>;
export type GetTotalStoredItemDtoItemQueryError = void;

/**
 * @summary Retrieves a TotalStoredItemDto resource.
 */
export const useGetTotalStoredItemDtoItem = <
  TData = Awaited<ReturnType<typeof getTotalStoredItemDtoItem>>,
  TError = void,
>(
  id: string,
  params?: GetTotalStoredItemDtoItemParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTotalStoredItemDtoItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTotalStoredItemDtoItemQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
