/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetAuctionItemReadModelCollection200,
  GetAuctionItemReadModelCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of AuctionItemReadModel resources.
 */
export const getAuctionItemReadModelCollection = (
  params?: GetAuctionItemReadModelCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetAuctionItemReadModelCollection200>(
    {
      url: `/api/v2/shop/auction-item-read-models/top-adjudications`,
      method: "get",
      params,
      signal,
    },
    options,
  );
};

export const getGetAuctionItemReadModelCollectionQueryKey = (
  params?: GetAuctionItemReadModelCollectionParams,
) => {
  return [
    `/api/v2/shop/auction-item-read-models/top-adjudications`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetAuctionItemReadModelCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuctionItemReadModelCollection>>,
  TError = unknown,
>(
  params?: GetAuctionItemReadModelCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAuctionItemReadModelCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuctionItemReadModelCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuctionItemReadModelCollection>>> = ({
    signal,
  }) => getAuctionItemReadModelCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuctionItemReadModelCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuctionItemReadModelCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuctionItemReadModelCollection>>
>;
export type GetAuctionItemReadModelCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of AuctionItemReadModel resources.
 */
export const useGetAuctionItemReadModelCollection = <
  TData = Awaited<ReturnType<typeof getAuctionItemReadModelCollection>>,
  TError = unknown,
>(
  params?: GetAuctionItemReadModelCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAuctionItemReadModelCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuctionItemReadModelCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a AuctionItemReadModel resource.
 */
export const getAuctionItemReadModelItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/auction-item-read-models/${id}`, method: "get", signal },
    options,
  );
};

export const getGetAuctionItemReadModelItemQueryKey = (id: string) => {
  return [`/api/v2/shop/auction-item-read-models/${id}`] as const;
};

export const getGetAuctionItemReadModelItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuctionItemReadModelItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAuctionItemReadModelItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuctionItemReadModelItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuctionItemReadModelItem>>> = ({
    signal,
  }) => getAuctionItemReadModelItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuctionItemReadModelItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuctionItemReadModelItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuctionItemReadModelItem>>
>;
export type GetAuctionItemReadModelItemQueryError = unknown;

/**
 * @summary Retrieves a AuctionItemReadModel resource.
 */
export const useGetAuctionItemReadModelItem = <
  TData = Awaited<ReturnType<typeof getAuctionItemReadModelItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAuctionItemReadModelItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuctionItemReadModelItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
