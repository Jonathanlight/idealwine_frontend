/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  EstateJsonldShopEstateByExternalIdRead,
  EstateJsonldShopEstateRead,
  GetEstateCollection200,
  GetEstateCollectionParams,
  GetNamesEstateCollection200,
  GetNamesEstateCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a Estate resource.
 */
export const getByExternalIdEstateItem = (
  externalId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EstateJsonldShopEstateByExternalIdRead>(
    { url: `/api/v2/shop/estate-by-external-id/${externalId}`, method: "get", signal },
    options,
  );
};

export const getGetByExternalIdEstateItemQueryKey = (externalId: string) => {
  return [`/api/v2/shop/estate-by-external-id/${externalId}`] as const;
};

export const getGetByExternalIdEstateItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getByExternalIdEstateItem>>,
  TError = void,
>(
  externalId: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getByExternalIdEstateItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByExternalIdEstateItemQueryKey(externalId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByExternalIdEstateItem>>> = ({
    signal,
  }) => getByExternalIdEstateItem(externalId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!externalId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByExternalIdEstateItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetByExternalIdEstateItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getByExternalIdEstateItem>>
>;
export type GetByExternalIdEstateItemQueryError = void;

/**
 * @summary Retrieves a Estate resource.
 */
export const useGetByExternalIdEstateItem = <
  TData = Awaited<ReturnType<typeof getByExternalIdEstateItem>>,
  TError = void,
>(
  externalId: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getByExternalIdEstateItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetByExternalIdEstateItemQueryOptions(externalId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of EstateNamesDto resources.
 */
export const getNamesEstateCollection = (
  params?: GetNamesEstateCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetNamesEstateCollection200>(
    { url: `/api/v2/shop/estate-names`, method: "get", params, signal },
    options,
  );
};

export const getGetNamesEstateCollectionQueryKey = (params?: GetNamesEstateCollectionParams) => {
  return [`/api/v2/shop/estate-names`, ...(params ? [params] : [])] as const;
};

export const getGetNamesEstateCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getNamesEstateCollection>>,
  TError = unknown,
>(
  params?: GetNamesEstateCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getNamesEstateCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNamesEstateCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNamesEstateCollection>>> = ({
    signal,
  }) => getNamesEstateCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNamesEstateCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNamesEstateCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNamesEstateCollection>>
>;
export type GetNamesEstateCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of EstateNamesDto resources.
 */
export const useGetNamesEstateCollection = <
  TData = Awaited<ReturnType<typeof getNamesEstateCollection>>,
  TError = unknown,
>(
  params?: GetNamesEstateCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getNamesEstateCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNamesEstateCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Estate resources.
 */
export const getEstateCollection = (
  params?: GetEstateCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetEstateCollection200>(
    { url: `/api/v2/shop/estates`, method: "get", params, signal },
    options,
  );
};

export const getGetEstateCollectionQueryKey = (params?: GetEstateCollectionParams) => {
  return [`/api/v2/shop/estates`, ...(params ? [params] : [])] as const;
};

export const getGetEstateCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getEstateCollection>>,
  TError = unknown,
>(
  params?: GetEstateCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getEstateCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEstateCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEstateCollection>>> = ({ signal }) =>
    getEstateCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEstateCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEstateCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEstateCollection>>
>;
export type GetEstateCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Estate resources.
 */
export const useGetEstateCollection = <
  TData = Awaited<ReturnType<typeof getEstateCollection>>,
  TError = unknown,
>(
  params?: GetEstateCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getEstateCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEstateCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a Estate resource.
 */
export const getEstateItem = (
  name: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EstateJsonldShopEstateRead>(
    { url: `/api/v2/shop/estates/${name}`, method: "get", signal },
    options,
  );
};

export const getGetEstateItemQueryKey = (name: string) => {
  return [`/api/v2/shop/estates/${name}`] as const;
};

export const getGetEstateItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getEstateItem>>,
  TError = void,
>(
  name: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getEstateItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEstateItemQueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEstateItem>>> = ({ signal }) =>
    getEstateItem(name, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEstateItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEstateItemQueryResult = NonNullable<Awaited<ReturnType<typeof getEstateItem>>>;
export type GetEstateItemQueryError = void;

/**
 * @summary Retrieves a Estate resource.
 */
export const useGetEstateItem = <TData = Awaited<ReturnType<typeof getEstateItem>>, TError = void>(
  name: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getEstateItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEstateItemQueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
