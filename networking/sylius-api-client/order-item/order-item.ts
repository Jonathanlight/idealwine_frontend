/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiOrderItemsAdjustmentsGetSubresource200,
  ApiOrderItemsAdjustmentsGetSubresourceParams,
  ApiOrdersItemsAdjustmentsGetSubresource200,
  ApiOrdersItemsAdjustmentsGetSubresourceParams,
  ApiOrdersItemsGetSubresource200,
  ApiOrdersItemsGetSubresourceParams,
  OrderItemJsonldAdminOrderItemRead,
  OrderItemJsonldShopCartRead,
  ShopGetCustomerOrderItemsOrderItemCollection200,
  ShopGetCustomerOrderItemsOrderItemCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a OrderItem resource.
 */
export const adminGetOrderItemItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderItemJsonldAdminOrderItemRead>(
    { url: `/api/v2/admin/order-items/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetOrderItemItemQueryKey = (id: string) => {
  return [`/api/v2/admin/order-items/${id}`] as const;
};

export const getAdminGetOrderItemItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetOrderItemItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetOrderItemItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetOrderItemItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetOrderItemItem>>> = ({ signal }) =>
    adminGetOrderItemItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetOrderItemItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetOrderItemItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetOrderItemItem>>
>;
export type AdminGetOrderItemItemQueryError = void;

/**
 * @summary Retrieves a OrderItem resource.
 */
export const useAdminGetOrderItemItem = <
  TData = Awaited<ReturnType<typeof adminGetOrderItemItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetOrderItemItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetOrderItemItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const apiOrderItemsAdjustmentsGetSubresource = (
  id: string,
  params?: ApiOrderItemsAdjustmentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrderItemsAdjustmentsGetSubresource200>(
    { url: `/api/v2/admin/order-items/${id}/adjustments`, method: "get", params, signal },
    options,
  );
};

export const getApiOrderItemsAdjustmentsGetSubresourceQueryKey = (
  id: string,
  params?: ApiOrderItemsAdjustmentsGetSubresourceParams,
) => {
  return [`/api/v2/admin/order-items/${id}/adjustments`, ...(params ? [params] : [])] as const;
};

export const getApiOrderItemsAdjustmentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
  TError = void,
>(
  id: string,
  params?: ApiOrderItemsAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrderItemsAdjustmentsGetSubresourceQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>
  > = ({ signal }) => apiOrderItemsAdjustmentsGetSubresource(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrderItemsAdjustmentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>
>;
export type ApiOrderItemsAdjustmentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const useApiOrderItemsAdjustmentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
  TError = void,
>(
  id: string,
  params?: ApiOrderItemsAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrderItemsAdjustmentsGetSubresourceQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of OrderItem resources.
 */
export const shopGetCustomerOrderItemsOrderItemCollection = (
  params?: ShopGetCustomerOrderItemsOrderItemCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetCustomerOrderItemsOrderItemCollection200>(
    { url: `/api/v2/shop/customers/me/order-items`, method: "get", params, signal },
    options,
  );
};

export const getShopGetCustomerOrderItemsOrderItemCollectionQueryKey = (
  params?: ShopGetCustomerOrderItemsOrderItemCollectionParams,
) => {
  return [`/api/v2/shop/customers/me/order-items`, ...(params ? [params] : [])] as const;
};

export const getShopGetCustomerOrderItemsOrderItemCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetCustomerOrderItemsOrderItemCollection>>,
  TError = unknown,
>(
  params?: ShopGetCustomerOrderItemsOrderItemCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetCustomerOrderItemsOrderItemCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getShopGetCustomerOrderItemsOrderItemCollectionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof shopGetCustomerOrderItemsOrderItemCollection>>
  > = ({ signal }) => shopGetCustomerOrderItemsOrderItemCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetCustomerOrderItemsOrderItemCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetCustomerOrderItemsOrderItemCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetCustomerOrderItemsOrderItemCollection>>
>;
export type ShopGetCustomerOrderItemsOrderItemCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of OrderItem resources.
 */
export const useShopGetCustomerOrderItemsOrderItemCollection = <
  TData = Awaited<ReturnType<typeof shopGetCustomerOrderItemsOrderItemCollection>>,
  TError = unknown,
>(
  params?: ShopGetCustomerOrderItemsOrderItemCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetCustomerOrderItemsOrderItemCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetCustomerOrderItemsOrderItemCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a OrderItem resource.
 */
export const shopGetOrderItemItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderItemJsonldShopCartRead>(
    { url: `/api/v2/shop/order-items/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetOrderItemItemQueryKey = (id: string) => {
  return [`/api/v2/shop/order-items/${id}`] as const;
};

export const getShopGetOrderItemItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetOrderItemItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetOrderItemItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetOrderItemItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetOrderItemItem>>> = ({ signal }) =>
    shopGetOrderItemItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetOrderItemItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetOrderItemItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetOrderItemItem>>
>;
export type ShopGetOrderItemItemQueryError = void;

/**
 * @summary Retrieves a OrderItem resource.
 */
export const useShopGetOrderItemItem = <
  TData = Awaited<ReturnType<typeof shopGetOrderItemItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetOrderItemItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetOrderItemItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of OrderItem resources.
 */
export const apiOrdersItemsGetSubresource = (
  tokenValue: string,
  params?: ApiOrdersItemsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersItemsGetSubresource200>(
    { url: `/api/v2/shop/orders/${tokenValue}/items`, method: "get", params, signal },
    options,
  );
};

export const getApiOrdersItemsGetSubresourceQueryKey = (
  tokenValue: string,
  params?: ApiOrdersItemsGetSubresourceParams,
) => {
  return [`/api/v2/shop/orders/${tokenValue}/items`, ...(params ? [params] : [])] as const;
};

export const getApiOrdersItemsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersItemsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrdersItemsGetSubresourceQueryKey(tokenValue, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>> = ({
    signal,
  }) => apiOrdersItemsGetSubresource(tokenValue, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersItemsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>
>;
export type ApiOrdersItemsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of OrderItem resources.
 */
export const useApiOrdersItemsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersItemsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersItemsGetSubresourceQueryOptions(tokenValue, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const apiOrdersItemsAdjustmentsGetSubresource = (
  tokenValue: string,
  items: string,
  params?: ApiOrdersItemsAdjustmentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersItemsAdjustmentsGetSubresource200>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/items/${items}/adjustments`,
      method: "get",
      params,
      signal,
    },
    options,
  );
};

export const getApiOrdersItemsAdjustmentsGetSubresourceQueryKey = (
  tokenValue: string,
  items: string,
  params?: ApiOrdersItemsAdjustmentsGetSubresourceParams,
) => {
  return [
    `/api/v2/shop/orders/${tokenValue}/items/${items}/adjustments`,
    ...(params ? [params] : []),
  ] as const;
};

export const getApiOrdersItemsAdjustmentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  items: string,
  params?: ApiOrdersItemsAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getApiOrdersItemsAdjustmentsGetSubresourceQueryKey(tokenValue, items, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>
  > = ({ signal }) =>
    apiOrdersItemsAdjustmentsGetSubresource(tokenValue, items, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(tokenValue && items),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersItemsAdjustmentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>
>;
export type ApiOrdersItemsAdjustmentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const useApiOrdersItemsAdjustmentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  items: string,
  params?: ApiOrdersItemsAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersItemsAdjustmentsGetSubresourceQueryOptions(
    tokenValue,
    items,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
