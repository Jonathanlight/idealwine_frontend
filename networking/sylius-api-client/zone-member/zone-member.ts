/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiZonesMembersGetSubresource200,
  ApiZonesMembersGetSubresourceParams,
  ZoneMemberJsonldAdminZoneMemberRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a ZoneMember resource.
 */
export const adminGetZoneMemberItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ZoneMemberJsonldAdminZoneMemberRead>(
    { url: `/api/v2/admin/zone-members/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetZoneMemberItemQueryKey = (code: string) => {
  return [`/api/v2/admin/zone-members/${code}`] as const;
};

export const getAdminGetZoneMemberItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetZoneMemberItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetZoneMemberItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetZoneMemberItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetZoneMemberItem>>> = ({ signal }) =>
    adminGetZoneMemberItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetZoneMemberItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetZoneMemberItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetZoneMemberItem>>
>;
export type AdminGetZoneMemberItemQueryError = void;

/**
 * @summary Retrieves a ZoneMember resource.
 */
export const useAdminGetZoneMemberItem = <
  TData = Awaited<ReturnType<typeof adminGetZoneMemberItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetZoneMemberItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetZoneMemberItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of ZoneMember resources.
 */
export const apiZonesMembersGetSubresource = (
  code: string,
  params?: ApiZonesMembersGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiZonesMembersGetSubresource200>(
    { url: `/api/v2/admin/zones/${code}/members`, method: "get", params, signal },
    options,
  );
};

export const getApiZonesMembersGetSubresourceQueryKey = (
  code: string,
  params?: ApiZonesMembersGetSubresourceParams,
) => {
  return [`/api/v2/admin/zones/${code}/members`, ...(params ? [params] : [])] as const;
};

export const getApiZonesMembersGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiZonesMembersGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiZonesMembersGetSubresourceQueryKey(code, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>> = ({
    signal,
  }) => apiZonesMembersGetSubresource(code, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiZonesMembersGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>
>;
export type ApiZonesMembersGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of ZoneMember resources.
 */
export const useApiZonesMembersGetSubresource = <
  TData = Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiZonesMembersGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiZonesMembersGetSubresourceQueryOptions(code, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
