/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiCountriesProvincesGetSubresource200,
  ApiCountriesProvincesGetSubresourceParams,
  ProvinceJsonld,
  ProvinceJsonldAdminProvinceRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of Province resources.
 */
export const apiCountriesProvincesGetSubresource = (
  code: string,
  params?: ApiCountriesProvincesGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiCountriesProvincesGetSubresource200>(
    { url: `/api/v2/admin/countries/${code}/provinces`, method: "get", params, signal },
    options,
  );
};

export const getApiCountriesProvincesGetSubresourceQueryKey = (
  code: string,
  params?: ApiCountriesProvincesGetSubresourceParams,
) => {
  return [`/api/v2/admin/countries/${code}/provinces`, ...(params ? [params] : [])] as const;
};

export const getApiCountriesProvincesGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiCountriesProvincesGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiCountriesProvincesGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiCountriesProvincesGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiCountriesProvincesGetSubresourceQueryKey(code, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCountriesProvincesGetSubresource>>> = ({
    signal,
  }) => apiCountriesProvincesGetSubresource(code, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiCountriesProvincesGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiCountriesProvincesGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiCountriesProvincesGetSubresource>>
>;
export type ApiCountriesProvincesGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Province resources.
 */
export const useApiCountriesProvincesGetSubresource = <
  TData = Awaited<ReturnType<typeof apiCountriesProvincesGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiCountriesProvincesGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiCountriesProvincesGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiCountriesProvincesGetSubresourceQueryOptions(code, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a Province resource.
 */
export const adminGetProvinceItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProvinceJsonldAdminProvinceRead>(
    { url: `/api/v2/admin/provinces/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetProvinceItemQueryKey = (code: string) => {
  return [`/api/v2/admin/provinces/${code}`] as const;
};

export const getAdminGetProvinceItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProvinceItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProvinceItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProvinceItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProvinceItem>>> = ({ signal }) =>
    adminGetProvinceItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProvinceItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProvinceItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProvinceItem>>
>;
export type AdminGetProvinceItemQueryError = void;

/**
 * @summary Retrieves a Province resource.
 */
export const useAdminGetProvinceItem = <
  TData = Awaited<ReturnType<typeof adminGetProvinceItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProvinceItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProvinceItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the Province resource.
 */
export const adminPutProvinceItem = (
  code: string,
  provinceJsonld: NonReadonly<ProvinceJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProvinceJsonld>(
    {
      url: `/api/v2/admin/provinces/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: provinceJsonld,
    },
    options,
  );
};

export const getAdminPutProvinceItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProvinceItem>>,
    TError,
    { code: string; data: NonReadonly<ProvinceJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutProvinceItem>>,
  TError,
  { code: string; data: NonReadonly<ProvinceJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutProvinceItem>>,
    { code: string; data: NonReadonly<ProvinceJsonld> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutProvinceItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutProvinceItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutProvinceItem>>
>;
export type AdminPutProvinceItemMutationBody = NonReadonly<ProvinceJsonld>;
export type AdminPutProvinceItemMutationError = void;

/**
 * @summary Replaces the Province resource.
 */
export const useAdminPutProvinceItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProvinceItem>>,
    TError,
    { code: string; data: NonReadonly<ProvinceJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutProvinceItemMutationOptions(options);

  return useMutation(mutationOptions);
};
