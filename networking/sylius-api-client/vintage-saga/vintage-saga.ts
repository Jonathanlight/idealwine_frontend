/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetPlpVintageSagaCollection200,
  GetPlpVintageSagaCollectionParams,
  GetTableVintageSagaCollection200,
  GetTableVintageSagaCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of VintageSaga resources.
 */
export const getPlpVintageSagaCollection = (
  params?: GetPlpVintageSagaCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetPlpVintageSagaCollection200>(
    { url: `/api/v2/vintage-saga-plp`, method: "get", params, signal },
    options,
  );
};

export const getGetPlpVintageSagaCollectionQueryKey = (
  params?: GetPlpVintageSagaCollectionParams,
) => {
  return [`/api/v2/vintage-saga-plp`, ...(params ? [params] : [])] as const;
};

export const getGetPlpVintageSagaCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getPlpVintageSagaCollection>>,
  TError = unknown,
>(
  params?: GetPlpVintageSagaCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPlpVintageSagaCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPlpVintageSagaCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlpVintageSagaCollection>>> = ({
    signal,
  }) => getPlpVintageSagaCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPlpVintageSagaCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPlpVintageSagaCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlpVintageSagaCollection>>
>;
export type GetPlpVintageSagaCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of VintageSaga resources.
 */
export const useGetPlpVintageSagaCollection = <
  TData = Awaited<ReturnType<typeof getPlpVintageSagaCollection>>,
  TError = unknown,
>(
  params?: GetPlpVintageSagaCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPlpVintageSagaCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPlpVintageSagaCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of VintageSaga resources.
 */
export const getTableVintageSagaCollection = (
  params?: GetTableVintageSagaCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetTableVintageSagaCollection200>(
    { url: `/api/v2/vintage-sagas`, method: "get", params, signal },
    options,
  );
};

export const getGetTableVintageSagaCollectionQueryKey = (
  params?: GetTableVintageSagaCollectionParams,
) => {
  return [`/api/v2/vintage-sagas`, ...(params ? [params] : [])] as const;
};

export const getGetTableVintageSagaCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getTableVintageSagaCollection>>,
  TError = unknown,
>(
  params?: GetTableVintageSagaCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTableVintageSagaCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTableVintageSagaCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTableVintageSagaCollection>>> = ({
    signal,
  }) => getTableVintageSagaCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTableVintageSagaCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTableVintageSagaCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTableVintageSagaCollection>>
>;
export type GetTableVintageSagaCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of VintageSaga resources.
 */
export const useGetTableVintageSagaCollection = <
  TData = Awaited<ReturnType<typeof getTableVintageSagaCollection>>,
  TError = unknown,
>(
  params?: GetTableVintageSagaCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTableVintageSagaCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTableVintageSagaCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a VintageSaga resource.
 */
export const getVintageSagaItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v2/vintage-sagas/${id}`, method: "get", signal },
    options,
  );
};

export const getGetVintageSagaItemQueryKey = (id: string) => {
  return [`/api/v2/vintage-sagas/${id}`] as const;
};

export const getGetVintageSagaItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getVintageSagaItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getVintageSagaItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVintageSagaItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVintageSagaItem>>> = ({ signal }) =>
    getVintageSagaItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVintageSagaItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetVintageSagaItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVintageSagaItem>>
>;
export type GetVintageSagaItemQueryError = unknown;

/**
 * @summary Retrieves a VintageSaga resource.
 */
export const useGetVintageSagaItem = <
  TData = Awaited<ReturnType<typeof getVintageSagaItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getVintageSagaItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetVintageSagaItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
