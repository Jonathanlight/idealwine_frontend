/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AddressJsonld,
  AddressJsonldAdminAddressRead,
  AddressJsonldShopAddressCreate,
  AddressJsonldShopAddressRead,
  AddressJsonldShopAddressUpdate,
  ShopGetAddressCollection200,
  ShopGetAddressCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a Address resource.
 */
export const adminGetAddressItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AddressJsonldAdminAddressRead>(
    { url: `/api/v2/admin/addresses/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetAddressItemQueryKey = (id: string) => {
  return [`/api/v2/admin/addresses/${id}`] as const;
};

export const getAdminGetAddressItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetAddressItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetAddressItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetAddressItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetAddressItem>>> = ({ signal }) =>
    adminGetAddressItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetAddressItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetAddressItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetAddressItem>>
>;
export type AdminGetAddressItemQueryError = void;

/**
 * @summary Retrieves a Address resource.
 */
export const useAdminGetAddressItem = <
  TData = Awaited<ReturnType<typeof adminGetAddressItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetAddressItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetAddressItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Address resources.
 */
export const shopGetAddressCollection = (
  params?: ShopGetAddressCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetAddressCollection200>(
    { url: `/api/v2/shop/addresses`, method: "get", params, signal },
    options,
  );
};

export const getShopGetAddressCollectionQueryKey = (params?: ShopGetAddressCollectionParams) => {
  return [`/api/v2/shop/addresses`, ...(params ? [params] : [])] as const;
};

export const getShopGetAddressCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetAddressCollection>>,
  TError = unknown,
>(
  params?: ShopGetAddressCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetAddressCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetAddressCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetAddressCollection>>> = ({
    signal,
  }) => shopGetAddressCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetAddressCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetAddressCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetAddressCollection>>
>;
export type ShopGetAddressCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Address resources.
 */
export const useShopGetAddressCollection = <
  TData = Awaited<ReturnType<typeof shopGetAddressCollection>>,
  TError = unknown,
>(
  params?: ShopGetAddressCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetAddressCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetAddressCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a Address resource.
 */
export const shopPostAddressCollection = (
  addressJsonld: NonReadonly<AddressJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AddressJsonldShopAddressCreate>(
    {
      url: `/api/v2/shop/addresses`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: addressJsonld,
    },
    options,
  );
};

export const getShopPostAddressCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPostAddressCollection>>,
    TError,
    { data: NonReadonly<AddressJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPostAddressCollection>>,
  TError,
  { data: NonReadonly<AddressJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPostAddressCollection>>,
    { data: NonReadonly<AddressJsonld> }
  > = props => {
    const { data } = props ?? {};

    return shopPostAddressCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPostAddressCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPostAddressCollection>>
>;
export type ShopPostAddressCollectionMutationBody = NonReadonly<AddressJsonld>;
export type ShopPostAddressCollectionMutationError = void;

/**
 * @summary Creates a Address resource.
 */
export const useShopPostAddressCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPostAddressCollection>>,
    TError,
    { data: NonReadonly<AddressJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPostAddressCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a Address resource.
 */
export const shopGetAddressItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AddressJsonldShopAddressRead>(
    { url: `/api/v2/shop/addresses/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetAddressItemQueryKey = (id: string) => {
  return [`/api/v2/shop/addresses/${id}`] as const;
};

export const getShopGetAddressItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetAddressItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetAddressItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetAddressItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetAddressItem>>> = ({ signal }) =>
    shopGetAddressItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetAddressItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetAddressItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetAddressItem>>
>;
export type ShopGetAddressItemQueryError = void;

/**
 * @summary Retrieves a Address resource.
 */
export const useShopGetAddressItem = <
  TData = Awaited<ReturnType<typeof shopGetAddressItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetAddressItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetAddressItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Removes the Address resource.
 */
export const shopDeleteAddressItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v2/shop/addresses/${id}`, method: "delete" }, options);
};

export const getShopDeleteAddressItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopDeleteAddressItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopDeleteAddressItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopDeleteAddressItem>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return shopDeleteAddressItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopDeleteAddressItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopDeleteAddressItem>>
>;

export type ShopDeleteAddressItemMutationError = unknown;

/**
 * @summary Removes the Address resource.
 */
export const useShopDeleteAddressItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopDeleteAddressItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopDeleteAddressItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Replaces the Address resource.
 */
export const shopPutAddressItem = (
  id: string,
  addressJsonldShopAddressUpdate: NonReadonly<AddressJsonldShopAddressUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AddressJsonld>(
    {
      url: `/api/v2/shop/addresses/${id}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: addressJsonldShopAddressUpdate,
    },
    options,
  );
};

export const getShopPutAddressItemMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPutAddressItem>>,
    TError,
    { id: string; data: NonReadonly<AddressJsonldShopAddressUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPutAddressItem>>,
  TError,
  { id: string; data: NonReadonly<AddressJsonldShopAddressUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPutAddressItem>>,
    { id: string; data: NonReadonly<AddressJsonldShopAddressUpdate> }
  > = props => {
    const { id, data } = props ?? {};

    return shopPutAddressItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPutAddressItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPutAddressItem>>
>;
export type ShopPutAddressItemMutationBody = NonReadonly<AddressJsonldShopAddressUpdate>;
export type ShopPutAddressItemMutationError = void;

/**
 * @summary Replaces the Address resource.
 */
export const useShopPutAddressItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPutAddressItem>>,
    TError,
    { id: string; data: NonReadonly<AddressJsonldShopAddressUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPutAddressItemMutationOptions(options);

  return useMutation(mutationOptions);
};
