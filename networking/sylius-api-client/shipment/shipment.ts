/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetShipmentCollection200,
  AdminGetShipmentCollectionParams,
  ApiOrdersShipmentsGetSubresource200,
  ApiOrdersShipmentsGetSubresourceParams,
  ShipmentJsonld,
  ShipmentJsonldAdminShipmentRead,
  ShipmentJsonldShopShipmentRead,
  ShipmentShipShipmentAdminShipmentUpdate,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of Shipment resources.
 */
export const apiOrdersShipmentsGetSubresource = (
  tokenValue: string,
  params?: ApiOrdersShipmentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersShipmentsGetSubresource200>(
    { url: `/api/v2/admin/orders/${tokenValue}/shipments`, method: "get", params, signal },
    options,
  );
};

export const getApiOrdersShipmentsGetSubresourceQueryKey = (
  tokenValue: string,
  params?: ApiOrdersShipmentsGetSubresourceParams,
) => {
  return [`/api/v2/admin/orders/${tokenValue}/shipments`, ...(params ? [params] : [])] as const;
};

export const getApiOrdersShipmentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersShipmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrdersShipmentsGetSubresourceQueryKey(tokenValue, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>> = ({
    signal,
  }) => apiOrdersShipmentsGetSubresource(tokenValue, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersShipmentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>
>;
export type ApiOrdersShipmentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Shipment resources.
 */
export const useApiOrdersShipmentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersShipmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersShipmentsGetSubresourceQueryOptions(tokenValue, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Shipment resources.
 */
export const adminGetShipmentCollection = (
  params?: AdminGetShipmentCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetShipmentCollection200>(
    { url: `/api/v2/admin/shipments`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetShipmentCollectionQueryKey = (
  params?: AdminGetShipmentCollectionParams,
) => {
  return [`/api/v2/admin/shipments`, ...(params ? [params] : [])] as const;
};

export const getAdminGetShipmentCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetShipmentCollection>>,
  TError = unknown,
>(
  params?: AdminGetShipmentCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetShipmentCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetShipmentCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetShipmentCollection>>> = ({
    signal,
  }) => adminGetShipmentCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetShipmentCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetShipmentCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetShipmentCollection>>
>;
export type AdminGetShipmentCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Shipment resources.
 */
export const useAdminGetShipmentCollection = <
  TData = Awaited<ReturnType<typeof adminGetShipmentCollection>>,
  TError = unknown,
>(
  params?: AdminGetShipmentCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetShipmentCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetShipmentCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a Shipment resource.
 */
export const adminGetShipmentItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShipmentJsonldAdminShipmentRead>(
    { url: `/api/v2/admin/shipments/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetShipmentItemQueryKey = (id: string) => {
  return [`/api/v2/admin/shipments/${id}`] as const;
};

export const getAdminGetShipmentItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetShipmentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetShipmentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetShipmentItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetShipmentItem>>> = ({ signal }) =>
    adminGetShipmentItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetShipmentItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetShipmentItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetShipmentItem>>
>;
export type AdminGetShipmentItemQueryError = void;

/**
 * @summary Retrieves a Shipment resource.
 */
export const useAdminGetShipmentItem = <
  TData = Awaited<ReturnType<typeof adminGetShipmentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetShipmentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetShipmentItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Ships Shipment
 */
export const adminShipShipmentItem = (
  id: string,
  shipmentShipShipmentAdminShipmentUpdate: ShipmentShipShipmentAdminShipmentUpdate,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ShipmentJsonld>(
    {
      url: `/api/v2/admin/shipments/${id}/ship`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: shipmentShipShipmentAdminShipmentUpdate,
    },
    options,
  );
};

export const getAdminShipShipmentItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminShipShipmentItem>>,
    TError,
    { id: string; data: ShipmentShipShipmentAdminShipmentUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminShipShipmentItem>>,
  TError,
  { id: string; data: ShipmentShipShipmentAdminShipmentUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminShipShipmentItem>>,
    { id: string; data: ShipmentShipShipmentAdminShipmentUpdate }
  > = props => {
    const { id, data } = props ?? {};

    return adminShipShipmentItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminShipShipmentItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminShipShipmentItem>>
>;
export type AdminShipShipmentItemMutationBody = ShipmentShipShipmentAdminShipmentUpdate;
export type AdminShipShipmentItemMutationError = void;

/**
 * @summary Ships Shipment
 */
export const useAdminShipShipmentItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminShipShipmentItem>>,
    TError,
    { id: string; data: ShipmentShipShipmentAdminShipmentUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminShipShipmentItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a Shipment resource.
 */
export const shopGetShipmentItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShipmentJsonldShopShipmentRead>(
    { url: `/api/v2/shop/shipments/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetShipmentItemQueryKey = (id: string) => {
  return [`/api/v2/shop/shipments/${id}`] as const;
};

export const getShopGetShipmentItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetShipmentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetShipmentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetShipmentItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetShipmentItem>>> = ({ signal }) =>
    shopGetShipmentItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetShipmentItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetShipmentItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetShipmentItem>>
>;
export type ShopGetShipmentItemQueryError = void;

/**
 * @summary Retrieves a Shipment resource.
 */
export const useShopGetShipmentItem = <
  TData = Awaited<ReturnType<typeof shopGetShipmentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetShipmentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetShipmentItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
