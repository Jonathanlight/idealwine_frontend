/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions } from "@tanstack/react-query";
import type {
  VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate,
  VerifyCustomerAccountShopAccountVerificationUpdate,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Verifies Customer account
 */
export const shopVerifyCustomerAccountVerifyCustomerAccountItem = (
  token: string,
  verifyCustomerAccountShopAccountVerificationUpdate: VerifyCustomerAccountShopAccountVerificationUpdate,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v2/shop/account-verification-requests/${token}`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: verifyCustomerAccountShopAccountVerificationUpdate,
    },
    options,
  );
};

export const getShopVerifyCustomerAccountVerifyCustomerAccountItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopVerifyCustomerAccountVerifyCustomerAccountItem>>,
    TError,
    { token: string; data: VerifyCustomerAccountShopAccountVerificationUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopVerifyCustomerAccountVerifyCustomerAccountItem>>,
  TError,
  { token: string; data: VerifyCustomerAccountShopAccountVerificationUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopVerifyCustomerAccountVerifyCustomerAccountItem>>,
    { token: string; data: VerifyCustomerAccountShopAccountVerificationUpdate }
  > = props => {
    const { token, data } = props ?? {};

    return shopVerifyCustomerAccountVerifyCustomerAccountItem(token, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopVerifyCustomerAccountVerifyCustomerAccountItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopVerifyCustomerAccountVerifyCustomerAccountItem>>
>;
export type ShopVerifyCustomerAccountVerifyCustomerAccountItemMutationBody =
  VerifyCustomerAccountShopAccountVerificationUpdate;
export type ShopVerifyCustomerAccountVerifyCustomerAccountItemMutationError = unknown;

/**
 * @summary Verifies Customer account
 */
export const useShopVerifyCustomerAccountVerifyCustomerAccountItem = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopVerifyCustomerAccountVerifyCustomerAccountItem>>,
    TError,
    { token: string; data: VerifyCustomerAccountShopAccountVerificationUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getShopVerifyCustomerAccountVerifyCustomerAccountItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Resends verification email
 */
export const shopResendVerificationEmailCustomVerifyCustomerAccountCollection = (
  verifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate: NonReadonly<VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/api/v2/shop/resend-verification-email`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: verifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate,
    },
    options,
  );
};

export const getShopResendVerificationEmailCustomVerifyCustomerAccountCollectionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopResendVerificationEmailCustomVerifyCustomerAccountCollection>>,
    TError,
    {
      data: NonReadonly<VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate>;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopResendVerificationEmailCustomVerifyCustomerAccountCollection>>,
  TError,
  {
    data: NonReadonly<VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate>;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopResendVerificationEmailCustomVerifyCustomerAccountCollection>>,
    {
      data: NonReadonly<VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate>;
    }
  > = props => {
    const { data } = props ?? {};

    return shopResendVerificationEmailCustomVerifyCustomerAccountCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopResendVerificationEmailCustomVerifyCustomerAccountCollectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof shopResendVerificationEmailCustomVerifyCustomerAccountCollection>>
  >;
export type ShopResendVerificationEmailCustomVerifyCustomerAccountCollectionMutationBody =
  NonReadonly<VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate>;
export type ShopResendVerificationEmailCustomVerifyCustomerAccountCollectionMutationError = unknown;

/**
 * @summary Resends verification email
 */
export const useShopResendVerificationEmailCustomVerifyCustomerAccountCollection = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopResendVerificationEmailCustomVerifyCustomerAccountCollection>>,
    TError,
    {
      data: NonReadonly<VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate>;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getShopResendVerificationEmailCustomVerifyCustomerAccountCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
