/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetPaymentCollection200,
  AdminGetPaymentCollectionParams,
  ApiOrdersPaymentsGetSubresource200,
  ApiOrdersPaymentsGetSubresourceParams,
  PaymentJsonld,
  PaymentJsonldAdminPaymentRead,
  PaymentJsonldShopPaymentRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of Payment resources.
 */
export const apiOrdersPaymentsGetSubresource = (
  tokenValue: string,
  params?: ApiOrdersPaymentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersPaymentsGetSubresource200>(
    { url: `/api/v2/admin/orders/${tokenValue}/payments`, method: "get", params, signal },
    options,
  );
};

export const getApiOrdersPaymentsGetSubresourceQueryKey = (
  tokenValue: string,
  params?: ApiOrdersPaymentsGetSubresourceParams,
) => {
  return [`/api/v2/admin/orders/${tokenValue}/payments`, ...(params ? [params] : [])] as const;
};

export const getApiOrdersPaymentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersPaymentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrdersPaymentsGetSubresourceQueryKey(tokenValue, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>> = ({
    signal,
  }) => apiOrdersPaymentsGetSubresource(tokenValue, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersPaymentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>
>;
export type ApiOrdersPaymentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Payment resources.
 */
export const useApiOrdersPaymentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersPaymentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersPaymentsGetSubresourceQueryOptions(tokenValue, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Payment resources.
 */
export const adminGetPaymentCollection = (
  params?: AdminGetPaymentCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetPaymentCollection200>(
    { url: `/api/v2/admin/payments`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetPaymentCollectionQueryKey = (params?: AdminGetPaymentCollectionParams) => {
  return [`/api/v2/admin/payments`, ...(params ? [params] : [])] as const;
};

export const getAdminGetPaymentCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetPaymentCollection>>,
  TError = unknown,
>(
  params?: AdminGetPaymentCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetPaymentCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetPaymentCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetPaymentCollection>>> = ({
    signal,
  }) => adminGetPaymentCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetPaymentCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetPaymentCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetPaymentCollection>>
>;
export type AdminGetPaymentCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Payment resources.
 */
export const useAdminGetPaymentCollection = <
  TData = Awaited<ReturnType<typeof adminGetPaymentCollection>>,
  TError = unknown,
>(
  params?: AdminGetPaymentCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetPaymentCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetPaymentCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a Payment resource.
 */
export const adminGetPaymentItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaymentJsonldAdminPaymentRead>(
    { url: `/api/v2/admin/payments/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetPaymentItemQueryKey = (id: string) => {
  return [`/api/v2/admin/payments/${id}`] as const;
};

export const getAdminGetPaymentItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetPaymentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetPaymentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetPaymentItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetPaymentItem>>> = ({ signal }) =>
    adminGetPaymentItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetPaymentItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetPaymentItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetPaymentItem>>
>;
export type AdminGetPaymentItemQueryError = void;

/**
 * @summary Retrieves a Payment resource.
 */
export const useAdminGetPaymentItem = <
  TData = Awaited<ReturnType<typeof adminGetPaymentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetPaymentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetPaymentItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Completes Payment
 */
export const adminCompletePaymentItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PaymentJsonld>(
    { url: `/api/v2/admin/payments/${id}/complete`, method: "patch" },
    options,
  );
};

export const getAdminCompletePaymentItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminCompletePaymentItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminCompletePaymentItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminCompletePaymentItem>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return adminCompletePaymentItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminCompletePaymentItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminCompletePaymentItem>>
>;

export type AdminCompletePaymentItemMutationError = void;

/**
 * @summary Completes Payment
 */
export const useAdminCompletePaymentItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminCompletePaymentItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminCompletePaymentItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a Payment resource.
 */
export const shopGetPaymentItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaymentJsonldShopPaymentRead>(
    { url: `/api/v2/shop/payments/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetPaymentItemQueryKey = (id: string) => {
  return [`/api/v2/shop/payments/${id}`] as const;
};

export const getShopGetPaymentItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetPaymentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetPaymentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetPaymentItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetPaymentItem>>> = ({ signal }) =>
    shopGetPaymentItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetPaymentItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetPaymentItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetPaymentItem>>
>;
export type ShopGetPaymentItemQueryError = void;

/**
 * @summary Retrieves a Payment resource.
 */
export const useShopGetPaymentItem = <
  TData = Awaited<ReturnType<typeof shopGetPaymentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetPaymentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetPaymentItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
