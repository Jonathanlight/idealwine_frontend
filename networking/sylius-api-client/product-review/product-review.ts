/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetProductReviewCollection200,
  AdminGetProductReviewCollectionParams,
  ProductReviewAddProductReviewJsonldShopProductReviewCreate,
  ProductReviewJsonld,
  ProductReviewJsonldAdminProductReviewRead,
  ProductReviewJsonldAdminProductReviewUpdate,
  ProductReviewJsonldShopProductReviewRead,
  ShopGetProductReviewCollection200,
  ShopGetProductReviewCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of ProductReview resources.
 */
export const adminGetProductReviewCollection = (
  params?: AdminGetProductReviewCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetProductReviewCollection200>(
    { url: `/api/v2/admin/product-reviews`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetProductReviewCollectionQueryKey = (
  params?: AdminGetProductReviewCollectionParams,
) => {
  return [`/api/v2/admin/product-reviews`, ...(params ? [params] : [])] as const;
};

export const getAdminGetProductReviewCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductReviewCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductReviewCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductReviewCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductReviewCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductReviewCollection>>> = ({
    signal,
  }) => adminGetProductReviewCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductReviewCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductReviewCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductReviewCollection>>
>;
export type AdminGetProductReviewCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductReview resources.
 */
export const useAdminGetProductReviewCollection = <
  TData = Awaited<ReturnType<typeof adminGetProductReviewCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductReviewCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductReviewCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductReviewCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductReview resource.
 */
export const adminGetProductReviewItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductReviewJsonldAdminProductReviewRead>(
    { url: `/api/v2/admin/product-reviews/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetProductReviewItemQueryKey = (id: string) => {
  return [`/api/v2/admin/product-reviews/${id}`] as const;
};

export const getAdminGetProductReviewItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductReviewItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductReviewItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductReviewItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductReviewItem>>> = ({
    signal,
  }) => adminGetProductReviewItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductReviewItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductReviewItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductReviewItem>>
>;
export type AdminGetProductReviewItemQueryError = void;

/**
 * @summary Retrieves a ProductReview resource.
 */
export const useAdminGetProductReviewItem = <
  TData = Awaited<ReturnType<typeof adminGetProductReviewItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductReviewItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductReviewItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Removes the ProductReview resource.
 */
export const adminDeleteProductReviewItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/admin/product-reviews/${id}`, method: "delete" },
    options,
  );
};

export const getAdminDeleteProductReviewItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteProductReviewItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeleteProductReviewItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeleteProductReviewItem>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return adminDeleteProductReviewItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminDeleteProductReviewItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeleteProductReviewItem>>
>;

export type AdminDeleteProductReviewItemMutationError = unknown;

/**
 * @summary Removes the ProductReview resource.
 */
export const useAdminDeleteProductReviewItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteProductReviewItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminDeleteProductReviewItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Replaces the ProductReview resource.
 */
export const adminPutProductReviewItem = (
  id: string,
  productReviewJsonldAdminProductReviewUpdate: NonReadonly<ProductReviewJsonldAdminProductReviewUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductReviewJsonld>(
    {
      url: `/api/v2/admin/product-reviews/${id}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: productReviewJsonldAdminProductReviewUpdate,
    },
    options,
  );
};

export const getAdminPutProductReviewItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProductReviewItem>>,
    TError,
    { id: string; data: NonReadonly<ProductReviewJsonldAdminProductReviewUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutProductReviewItem>>,
  TError,
  { id: string; data: NonReadonly<ProductReviewJsonldAdminProductReviewUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutProductReviewItem>>,
    { id: string; data: NonReadonly<ProductReviewJsonldAdminProductReviewUpdate> }
  > = props => {
    const { id, data } = props ?? {};

    return adminPutProductReviewItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutProductReviewItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutProductReviewItem>>
>;
export type AdminPutProductReviewItemMutationBody =
  NonReadonly<ProductReviewJsonldAdminProductReviewUpdate>;
export type AdminPutProductReviewItemMutationError = void;

/**
 * @summary Replaces the ProductReview resource.
 */
export const useAdminPutProductReviewItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProductReviewItem>>,
    TError,
    { id: string; data: NonReadonly<ProductReviewJsonldAdminProductReviewUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutProductReviewItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Accepts Product Review
 */
export const adminAcceptProductReviewItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductReviewJsonld>(
    { url: `/api/v2/admin/product-reviews/${id}/accept`, method: "patch" },
    options,
  );
};

export const getAdminAcceptProductReviewItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAcceptProductReviewItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAcceptProductReviewItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAcceptProductReviewItem>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return adminAcceptProductReviewItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminAcceptProductReviewItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAcceptProductReviewItem>>
>;

export type AdminAcceptProductReviewItemMutationError = void;

/**
 * @summary Accepts Product Review
 */
export const useAdminAcceptProductReviewItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAcceptProductReviewItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminAcceptProductReviewItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Rejects Product Review
 */
export const adminRejectProductReviewItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductReviewJsonld>(
    { url: `/api/v2/admin/product-reviews/${id}/reject`, method: "patch" },
    options,
  );
};

export const getAdminRejectProductReviewItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminRejectProductReviewItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminRejectProductReviewItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminRejectProductReviewItem>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return adminRejectProductReviewItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminRejectProductReviewItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminRejectProductReviewItem>>
>;

export type AdminRejectProductReviewItemMutationError = void;

/**
 * @summary Rejects Product Review
 */
export const useAdminRejectProductReviewItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminRejectProductReviewItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminRejectProductReviewItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Creates a ProductReview resource.
 */
export const shopPostProductReviewCollection = (
  productReviewAddProductReviewJsonldShopProductReviewCreate: NonReadonly<ProductReviewAddProductReviewJsonldShopProductReviewCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductReviewJsonld>(
    {
      url: `/api/v2/shop/product-reviews`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: productReviewAddProductReviewJsonldShopProductReviewCreate,
    },
    options,
  );
};

export const getShopPostProductReviewCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPostProductReviewCollection>>,
    TError,
    { data: NonReadonly<ProductReviewAddProductReviewJsonldShopProductReviewCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPostProductReviewCollection>>,
  TError,
  { data: NonReadonly<ProductReviewAddProductReviewJsonldShopProductReviewCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPostProductReviewCollection>>,
    { data: NonReadonly<ProductReviewAddProductReviewJsonldShopProductReviewCreate> }
  > = props => {
    const { data } = props ?? {};

    return shopPostProductReviewCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPostProductReviewCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPostProductReviewCollection>>
>;
export type ShopPostProductReviewCollectionMutationBody =
  NonReadonly<ProductReviewAddProductReviewJsonldShopProductReviewCreate>;
export type ShopPostProductReviewCollectionMutationError = void;

/**
 * @summary Creates a ProductReview resource.
 */
export const useShopPostProductReviewCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPostProductReviewCollection>>,
    TError,
    { data: NonReadonly<ProductReviewAddProductReviewJsonldShopProductReviewCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPostProductReviewCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of ProductReview resources.
 */
export const shopGetProductReviewCollection = (
  params?: ShopGetProductReviewCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetProductReviewCollection200>(
    { url: `/api/v2/shop/product-reviews`, method: "get", params, signal },
    options,
  );
};

export const getShopGetProductReviewCollectionQueryKey = (
  params?: ShopGetProductReviewCollectionParams,
) => {
  return [`/api/v2/shop/product-reviews`, ...(params ? [params] : [])] as const;
};

export const getShopGetProductReviewCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetProductReviewCollection>>,
  TError = unknown,
>(
  params?: ShopGetProductReviewCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetProductReviewCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetProductReviewCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetProductReviewCollection>>> = ({
    signal,
  }) => shopGetProductReviewCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetProductReviewCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetProductReviewCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetProductReviewCollection>>
>;
export type ShopGetProductReviewCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductReview resources.
 */
export const useShopGetProductReviewCollection = <
  TData = Awaited<ReturnType<typeof shopGetProductReviewCollection>>,
  TError = unknown,
>(
  params?: ShopGetProductReviewCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetProductReviewCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetProductReviewCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductReview resource.
 */
export const shopGetProductReviewItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductReviewJsonldShopProductReviewRead>(
    { url: `/api/v2/shop/product-reviews/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetProductReviewItemQueryKey = (id: string) => {
  return [`/api/v2/shop/product-reviews/${id}`] as const;
};

export const getShopGetProductReviewItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetProductReviewItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductReviewItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetProductReviewItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetProductReviewItem>>> = ({
    signal,
  }) => shopGetProductReviewItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetProductReviewItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetProductReviewItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetProductReviewItem>>
>;
export type ShopGetProductReviewItemQueryError = void;

/**
 * @summary Retrieves a ProductReview resource.
 */
export const useShopGetProductReviewItem = <
  TData = Awaited<ReturnType<typeof shopGetProductReviewItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductReviewItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetProductReviewItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
