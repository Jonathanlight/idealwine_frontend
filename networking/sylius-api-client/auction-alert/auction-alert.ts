/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AuctionAlertJsonld,
  AuctionAlertJsonldShopAuctionAlertRead,
  GetAuctionAlertCollection200,
  GetAuctionAlertCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Creates a AuctionAlert resource.
 */
export const postAuctionAlertCollection = (
  auctionAlertJsonld: NonReadonly<AuctionAlertJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AuctionAlertJsonldShopAuctionAlertRead>(
    {
      url: `/api/v2/shop/auction-alerts`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: auctionAlertJsonld,
    },
    options,
  );
};

export const getPostAuctionAlertCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuctionAlertCollection>>,
    TError,
    { data: NonReadonly<AuctionAlertJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuctionAlertCollection>>,
  TError,
  { data: NonReadonly<AuctionAlertJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuctionAlertCollection>>,
    { data: NonReadonly<AuctionAlertJsonld> }
  > = props => {
    const { data } = props ?? {};

    return postAuctionAlertCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuctionAlertCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuctionAlertCollection>>
>;
export type PostAuctionAlertCollectionMutationBody = NonReadonly<AuctionAlertJsonld>;
export type PostAuctionAlertCollectionMutationError = void;

/**
 * @summary Creates a AuctionAlert resource.
 */
export const usePostAuctionAlertCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuctionAlertCollection>>,
    TError,
    { data: NonReadonly<AuctionAlertJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostAuctionAlertCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of AuctionAlert resources.
 */
export const getAuctionAlertCollection = (
  params?: GetAuctionAlertCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetAuctionAlertCollection200>(
    { url: `/api/v2/shop/auction-alerts`, method: "get", params, signal },
    options,
  );
};

export const getGetAuctionAlertCollectionQueryKey = (params?: GetAuctionAlertCollectionParams) => {
  return [`/api/v2/shop/auction-alerts`, ...(params ? [params] : [])] as const;
};

export const getGetAuctionAlertCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuctionAlertCollection>>,
  TError = unknown,
>(
  params?: GetAuctionAlertCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAuctionAlertCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuctionAlertCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuctionAlertCollection>>> = ({
    signal,
  }) => getAuctionAlertCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuctionAlertCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuctionAlertCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuctionAlertCollection>>
>;
export type GetAuctionAlertCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of AuctionAlert resources.
 */
export const useGetAuctionAlertCollection = <
  TData = Awaited<ReturnType<typeof getAuctionAlertCollection>>,
  TError = unknown,
>(
  params?: GetAuctionAlertCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAuctionAlertCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuctionAlertCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a AuctionAlert resource.
 */
export const getAuctionAlertItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/auction-alerts/${id}`, method: "get", signal },
    options,
  );
};

export const getGetAuctionAlertItemQueryKey = (id: string) => {
  return [`/api/v2/shop/auction-alerts/${id}`] as const;
};

export const getGetAuctionAlertItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuctionAlertItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAuctionAlertItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuctionAlertItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuctionAlertItem>>> = ({ signal }) =>
    getAuctionAlertItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuctionAlertItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuctionAlertItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuctionAlertItem>>
>;
export type GetAuctionAlertItemQueryError = unknown;

/**
 * @summary Retrieves a AuctionAlert resource.
 */
export const useGetAuctionAlertItem = <
  TData = Awaited<ReturnType<typeof getAuctionAlertItem>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAuctionAlertItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuctionAlertItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the AuctionAlert resource.
 */
export const putAuctionAlertItem = (
  id: string,
  auctionAlertJsonld: NonReadonly<AuctionAlertJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AuctionAlertJsonld>(
    {
      url: `/api/v2/shop/auction-alerts/${id}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: auctionAlertJsonld,
    },
    options,
  );
};

export const getPutAuctionAlertItemMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAuctionAlertItem>>,
    TError,
    { id: string; data: NonReadonly<AuctionAlertJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putAuctionAlertItem>>,
  TError,
  { id: string; data: NonReadonly<AuctionAlertJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putAuctionAlertItem>>,
    { id: string; data: NonReadonly<AuctionAlertJsonld> }
  > = props => {
    const { id, data } = props ?? {};

    return putAuctionAlertItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutAuctionAlertItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof putAuctionAlertItem>>
>;
export type PutAuctionAlertItemMutationBody = NonReadonly<AuctionAlertJsonld>;
export type PutAuctionAlertItemMutationError = void;

/**
 * @summary Replaces the AuctionAlert resource.
 */
export const usePutAuctionAlertItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAuctionAlertItem>>,
    TError,
    { id: string; data: NonReadonly<AuctionAlertJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPutAuctionAlertItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Removes the AuctionAlert resource.
 */
export const deleteAuctionAlertItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/auction-alerts/${id}`, method: "delete" },
    options,
  );
};

export const getDeleteAuctionAlertItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAuctionAlertItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAuctionAlertItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAuctionAlertItem>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return deleteAuctionAlertItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteAuctionAlertItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAuctionAlertItem>>
>;

export type DeleteAuctionAlertItemMutationError = unknown;

/**
 * @summary Removes the AuctionAlert resource.
 */
export const useDeleteAuctionAlertItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAuctionAlertItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getDeleteAuctionAlertItemMutationOptions(options);

  return useMutation(mutationOptions);
};
