/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetTaxCategoryCollection200,
  AdminGetTaxCategoryCollectionParams,
  TaxCategoryJsonld,
  TaxCategoryJsonldAdminTaxCategoryCreate,
  TaxCategoryJsonldAdminTaxCategoryRead,
  TaxCategoryJsonldAdminTaxCategoryUpdate,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of TaxCategory resources.
 */
export const adminGetTaxCategoryCollection = (
  params?: AdminGetTaxCategoryCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetTaxCategoryCollection200>(
    { url: `/api/v2/admin/tax-categories`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetTaxCategoryCollectionQueryKey = (
  params?: AdminGetTaxCategoryCollectionParams,
) => {
  return [`/api/v2/admin/tax-categories`, ...(params ? [params] : [])] as const;
};

export const getAdminGetTaxCategoryCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetTaxCategoryCollection>>,
  TError = unknown,
>(
  params?: AdminGetTaxCategoryCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetTaxCategoryCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetTaxCategoryCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetTaxCategoryCollection>>> = ({
    signal,
  }) => adminGetTaxCategoryCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetTaxCategoryCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetTaxCategoryCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetTaxCategoryCollection>>
>;
export type AdminGetTaxCategoryCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of TaxCategory resources.
 */
export const useAdminGetTaxCategoryCollection = <
  TData = Awaited<ReturnType<typeof adminGetTaxCategoryCollection>>,
  TError = unknown,
>(
  params?: AdminGetTaxCategoryCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetTaxCategoryCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetTaxCategoryCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a TaxCategory resource.
 */
export const adminPostTaxCategoryCollection = (
  taxCategoryJsonldAdminTaxCategoryCreate: NonReadonly<TaxCategoryJsonldAdminTaxCategoryCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<TaxCategoryJsonld>(
    {
      url: `/api/v2/admin/tax-categories`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: taxCategoryJsonldAdminTaxCategoryCreate,
    },
    options,
  );
};

export const getAdminPostTaxCategoryCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostTaxCategoryCollection>>,
    TError,
    { data: NonReadonly<TaxCategoryJsonldAdminTaxCategoryCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostTaxCategoryCollection>>,
  TError,
  { data: NonReadonly<TaxCategoryJsonldAdminTaxCategoryCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostTaxCategoryCollection>>,
    { data: NonReadonly<TaxCategoryJsonldAdminTaxCategoryCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostTaxCategoryCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostTaxCategoryCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostTaxCategoryCollection>>
>;
export type AdminPostTaxCategoryCollectionMutationBody =
  NonReadonly<TaxCategoryJsonldAdminTaxCategoryCreate>;
export type AdminPostTaxCategoryCollectionMutationError = void;

/**
 * @summary Creates a TaxCategory resource.
 */
export const useAdminPostTaxCategoryCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostTaxCategoryCollection>>,
    TError,
    { data: NonReadonly<TaxCategoryJsonldAdminTaxCategoryCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostTaxCategoryCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a TaxCategory resource.
 */
export const adminGetTaxCategoryItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TaxCategoryJsonldAdminTaxCategoryRead>(
    { url: `/api/v2/admin/tax-categories/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetTaxCategoryItemQueryKey = (code: string) => {
  return [`/api/v2/admin/tax-categories/${code}`] as const;
};

export const getAdminGetTaxCategoryItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetTaxCategoryItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetTaxCategoryItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetTaxCategoryItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetTaxCategoryItem>>> = ({
    signal,
  }) => adminGetTaxCategoryItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetTaxCategoryItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetTaxCategoryItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetTaxCategoryItem>>
>;
export type AdminGetTaxCategoryItemQueryError = void;

/**
 * @summary Retrieves a TaxCategory resource.
 */
export const useAdminGetTaxCategoryItem = <
  TData = Awaited<ReturnType<typeof adminGetTaxCategoryItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetTaxCategoryItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetTaxCategoryItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the TaxCategory resource.
 */
export const adminPutTaxCategoryItem = (
  code: string,
  taxCategoryJsonldAdminTaxCategoryUpdate: NonReadonly<TaxCategoryJsonldAdminTaxCategoryUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<TaxCategoryJsonld>(
    {
      url: `/api/v2/admin/tax-categories/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: taxCategoryJsonldAdminTaxCategoryUpdate,
    },
    options,
  );
};

export const getAdminPutTaxCategoryItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutTaxCategoryItem>>,
    TError,
    { code: string; data: NonReadonly<TaxCategoryJsonldAdminTaxCategoryUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutTaxCategoryItem>>,
  TError,
  { code: string; data: NonReadonly<TaxCategoryJsonldAdminTaxCategoryUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutTaxCategoryItem>>,
    { code: string; data: NonReadonly<TaxCategoryJsonldAdminTaxCategoryUpdate> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutTaxCategoryItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutTaxCategoryItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutTaxCategoryItem>>
>;
export type AdminPutTaxCategoryItemMutationBody =
  NonReadonly<TaxCategoryJsonldAdminTaxCategoryUpdate>;
export type AdminPutTaxCategoryItemMutationError = void;

/**
 * @summary Replaces the TaxCategory resource.
 */
export const useAdminPutTaxCategoryItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutTaxCategoryItem>>,
    TError,
    { code: string; data: NonReadonly<TaxCategoryJsonldAdminTaxCategoryUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutTaxCategoryItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Removes the TaxCategory resource.
 */
export const adminDeleteTaxCategoryItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/admin/tax-categories/${code}`, method: "delete" },
    options,
  );
};

export const getAdminDeleteTaxCategoryItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteTaxCategoryItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeleteTaxCategoryItem>>,
  TError,
  { code: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeleteTaxCategoryItem>>,
    { code: string }
  > = props => {
    const { code } = props ?? {};

    return adminDeleteTaxCategoryItem(code, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminDeleteTaxCategoryItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeleteTaxCategoryItem>>
>;

export type AdminDeleteTaxCategoryItemMutationError = unknown;

/**
 * @summary Removes the TaxCategory resource.
 */
export const useAdminDeleteTaxCategoryItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteTaxCategoryItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminDeleteTaxCategoryItemMutationOptions(options);

  return useMutation(mutationOptions);
};
