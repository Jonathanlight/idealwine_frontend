/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetProductCollection200,
  AdminGetProductCollectionParams,
  ApiProductsAttributesGetSubresource200,
  ApiProductsAttributesGetSubresourceParams,
  ProductJsonld,
  ProductJsonldAdminProductCreate,
  ProductJsonldAdminProductRead,
  ProductJsonldAdminProductUpdate,
  ProductJsonldShopProductRead,
  ShopGetProductCollection200,
  ShopGetProductCollectionParams,
  ShopGetProductItemParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of Product resources.
 */
export const adminGetProductCollection = (
  params?: AdminGetProductCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetProductCollection200>(
    { url: `/api/v2/admin/products`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetProductCollectionQueryKey = (params?: AdminGetProductCollectionParams) => {
  return [`/api/v2/admin/products`, ...(params ? [params] : [])] as const;
};

export const getAdminGetProductCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductCollection>>> = ({
    signal,
  }) => adminGetProductCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductCollection>>
>;
export type AdminGetProductCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Product resources.
 */
export const useAdminGetProductCollection = <
  TData = Awaited<ReturnType<typeof adminGetProductCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a Product resource.
 */
export const adminPostProductCollection = (
  productJsonldAdminProductCreate: NonReadonly<ProductJsonldAdminProductCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductJsonld>(
    {
      url: `/api/v2/admin/products`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: productJsonldAdminProductCreate,
    },
    options,
  );
};

export const getAdminPostProductCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostProductCollection>>,
    TError,
    { data: NonReadonly<ProductJsonldAdminProductCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostProductCollection>>,
  TError,
  { data: NonReadonly<ProductJsonldAdminProductCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostProductCollection>>,
    { data: NonReadonly<ProductJsonldAdminProductCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostProductCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostProductCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostProductCollection>>
>;
export type AdminPostProductCollectionMutationBody = NonReadonly<ProductJsonldAdminProductCreate>;
export type AdminPostProductCollectionMutationError = void;

/**
 * @summary Creates a Product resource.
 */
export const useAdminPostProductCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostProductCollection>>,
    TError,
    { data: NonReadonly<ProductJsonldAdminProductCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostProductCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Use code to retrieve a product resource.
 */
export const adminGetProductItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductJsonldAdminProductRead>(
    { url: `/api/v2/admin/products/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetProductItemQueryKey = (code: string) => {
  return [`/api/v2/admin/products/${code}`] as const;
};

export const getAdminGetProductItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductItem>>> = ({ signal }) =>
    adminGetProductItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductItem>>
>;
export type AdminGetProductItemQueryError = void;

/**
 * @summary Use code to retrieve a product resource.
 */
export const useAdminGetProductItem = <
  TData = Awaited<ReturnType<typeof adminGetProductItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the Product resource.
 */
export const adminPutProductItem = (
  code: string,
  productJsonldAdminProductUpdate: NonReadonly<ProductJsonldAdminProductUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductJsonld>(
    {
      url: `/api/v2/admin/products/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: productJsonldAdminProductUpdate,
    },
    options,
  );
};

export const getAdminPutProductItemMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProductItem>>,
    TError,
    { code: string; data: NonReadonly<ProductJsonldAdminProductUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutProductItem>>,
  TError,
  { code: string; data: NonReadonly<ProductJsonldAdminProductUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutProductItem>>,
    { code: string; data: NonReadonly<ProductJsonldAdminProductUpdate> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutProductItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutProductItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutProductItem>>
>;
export type AdminPutProductItemMutationBody = NonReadonly<ProductJsonldAdminProductUpdate>;
export type AdminPutProductItemMutationError = void;

/**
 * @summary Replaces the Product resource.
 */
export const useAdminPutProductItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProductItem>>,
    TError,
    { code: string; data: NonReadonly<ProductJsonldAdminProductUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutProductItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Removes the Product resource.
 */
export const adminDeleteProductItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v2/admin/products/${code}`, method: "delete" }, options);
};

export const getAdminDeleteProductItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteProductItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeleteProductItem>>,
  TError,
  { code: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeleteProductItem>>,
    { code: string }
  > = props => {
    const { code } = props ?? {};

    return adminDeleteProductItem(code, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminDeleteProductItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeleteProductItem>>
>;

export type AdminDeleteProductItemMutationError = unknown;

/**
 * @summary Removes the Product resource.
 */
export const useAdminDeleteProductItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteProductItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminDeleteProductItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of Product resources.
 */
export const shopGetProductCollection = (
  params?: ShopGetProductCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetProductCollection200>(
    { url: `/api/v2/shop/products`, method: "get", params, signal },
    options,
  );
};

export const getShopGetProductCollectionQueryKey = (params?: ShopGetProductCollectionParams) => {
  return [`/api/v2/shop/products`, ...(params ? [params] : [])] as const;
};

export const getShopGetProductCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetProductCollection>>,
  TError = unknown,
>(
  params?: ShopGetProductCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetProductCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetProductCollection>>> = ({
    signal,
  }) => shopGetProductCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetProductCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetProductCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetProductCollection>>
>;
export type ShopGetProductCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Product resources.
 */
export const useShopGetProductCollection = <
  TData = Awaited<ReturnType<typeof shopGetProductCollection>>,
  TError = unknown,
>(
  params?: ShopGetProductCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetProductCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Use slug to retrieve a product resource.
 */
export const shopGetBySlugProductItem = (
  slug: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductJsonldShopProductRead>(
    { url: `/api/v2/shop/products-by-slug/${slug}`, method: "get", signal },
    options,
  );
};

export const getShopGetBySlugProductItemQueryKey = (slug: string) => {
  return [`/api/v2/shop/products-by-slug/${slug}`] as const;
};

export const getShopGetBySlugProductItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetBySlugProductItem>>,
  TError = void,
>(
  slug: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetBySlugProductItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetBySlugProductItemQueryKey(slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetBySlugProductItem>>> = ({
    signal,
  }) => shopGetBySlugProductItem(slug, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!slug, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetBySlugProductItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetBySlugProductItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetBySlugProductItem>>
>;
export type ShopGetBySlugProductItemQueryError = void;

/**
 * @summary Use slug to retrieve a product resource.
 */
export const useShopGetBySlugProductItem = <
  TData = Awaited<ReturnType<typeof shopGetBySlugProductItem>>,
  TError = void,
>(
  slug: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetBySlugProductItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetBySlugProductItemQueryOptions(slug, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Use code to retrieve a product resource.
 */
export const shopGetProductItem = (
  code: string,
  params?: ShopGetProductItemParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductJsonldShopProductRead>(
    { url: `/api/v2/shop/products/${code}`, method: "get", params, signal },
    options,
  );
};

export const getShopGetProductItemQueryKey = (code: string, params?: ShopGetProductItemParams) => {
  return [`/api/v2/shop/products/${code}`, ...(params ? [params] : [])] as const;
};

export const getShopGetProductItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetProductItem>>,
  TError = void,
>(
  code: string,
  params?: ShopGetProductItemParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetProductItemQueryKey(code, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetProductItem>>> = ({ signal }) =>
    shopGetProductItem(code, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetProductItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetProductItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetProductItem>>
>;
export type ShopGetProductItemQueryError = void;

/**
 * @summary Use code to retrieve a product resource.
 */
export const useShopGetProductItem = <
  TData = Awaited<ReturnType<typeof shopGetProductItem>>,
  TError = void,
>(
  code: string,
  params?: ShopGetProductItemParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetProductItemQueryOptions(code, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of ProductAttributeValue resources.
 */
export const apiProductsAttributesGetSubresource = (
  code: string,
  params?: ApiProductsAttributesGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiProductsAttributesGetSubresource200>(
    { url: `/api/v2/shop/products/${code}/attributes`, method: "get", params, signal },
    options,
  );
};

export const getApiProductsAttributesGetSubresourceQueryKey = (
  code: string,
  params?: ApiProductsAttributesGetSubresourceParams,
) => {
  return [`/api/v2/shop/products/${code}/attributes`, ...(params ? [params] : [])] as const;
};

export const getApiProductsAttributesGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiProductsAttributesGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiProductsAttributesGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiProductsAttributesGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiProductsAttributesGetSubresourceQueryKey(code, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiProductsAttributesGetSubresource>>> = ({
    signal,
  }) => apiProductsAttributesGetSubresource(code, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiProductsAttributesGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiProductsAttributesGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiProductsAttributesGetSubresource>>
>;
export type ApiProductsAttributesGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of ProductAttributeValue resources.
 */
export const useApiProductsAttributesGetSubresource = <
  TData = Awaited<ReturnType<typeof apiProductsAttributesGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiProductsAttributesGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiProductsAttributesGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiProductsAttributesGetSubresourceQueryOptions(code, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
