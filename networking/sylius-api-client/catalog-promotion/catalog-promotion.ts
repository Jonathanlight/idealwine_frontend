/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetCatalogPromotionCollection200,
  AdminGetCatalogPromotionCollectionParams,
  CatalogPromotionJsonldAdminCatalogPromotionCreate,
  CatalogPromotionJsonldAdminCatalogPromotionRead,
  CatalogPromotionJsonldAdminCatalogPromotionUpdate,
  CatalogPromotionJsonldShopCatalogPromotionRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of CatalogPromotion resources.
 */
export const adminGetCatalogPromotionCollection = (
  params?: AdminGetCatalogPromotionCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetCatalogPromotionCollection200>(
    { url: `/api/v2/admin/catalog-promotions`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetCatalogPromotionCollectionQueryKey = (
  params?: AdminGetCatalogPromotionCollectionParams,
) => {
  return [`/api/v2/admin/catalog-promotions`, ...(params ? [params] : [])] as const;
};

export const getAdminGetCatalogPromotionCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetCatalogPromotionCollection>>,
  TError = unknown,
>(
  params?: AdminGetCatalogPromotionCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetCatalogPromotionCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetCatalogPromotionCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetCatalogPromotionCollection>>> = ({
    signal,
  }) => adminGetCatalogPromotionCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetCatalogPromotionCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetCatalogPromotionCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetCatalogPromotionCollection>>
>;
export type AdminGetCatalogPromotionCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of CatalogPromotion resources.
 */
export const useAdminGetCatalogPromotionCollection = <
  TData = Awaited<ReturnType<typeof adminGetCatalogPromotionCollection>>,
  TError = unknown,
>(
  params?: AdminGetCatalogPromotionCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetCatalogPromotionCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetCatalogPromotionCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * 
Example configuration for `for_variants` scope type:

```
{
    "type": "for_variants",
    "configuration": {
        "variants": [
            "string"
        ]
    }
}
```

Example configuration for `percentage_discount` action type:

```
{
    "type": "percentage_discount",
    "configuration": {
        "amount": float
    }
}
```
                    
 * @summary Creates a CatalogPromotion resource.
 */
export const adminPostCatalogPromotionCollection = (
  catalogPromotionJsonldAdminCatalogPromotionCreate: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CatalogPromotionJsonldAdminCatalogPromotionRead>(
    {
      url: `/api/v2/admin/catalog-promotions`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: catalogPromotionJsonldAdminCatalogPromotionCreate,
    },
    options,
  );
};

export const getAdminPostCatalogPromotionCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostCatalogPromotionCollection>>,
    TError,
    { data: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostCatalogPromotionCollection>>,
  TError,
  { data: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostCatalogPromotionCollection>>,
    { data: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostCatalogPromotionCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostCatalogPromotionCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostCatalogPromotionCollection>>
>;
export type AdminPostCatalogPromotionCollectionMutationBody =
  NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionCreate>;
export type AdminPostCatalogPromotionCollectionMutationError = void;

/**
 * @summary Creates a CatalogPromotion resource.
 */
export const useAdminPostCatalogPromotionCollection = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostCatalogPromotionCollection>>,
    TError,
    { data: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostCatalogPromotionCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a CatalogPromotion resource.
 */
export const adminGetCatalogPromotionItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CatalogPromotionJsonldAdminCatalogPromotionRead>(
    { url: `/api/v2/admin/catalog-promotions/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetCatalogPromotionItemQueryKey = (code: string) => {
  return [`/api/v2/admin/catalog-promotions/${code}`] as const;
};

export const getAdminGetCatalogPromotionItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetCatalogPromotionItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetCatalogPromotionItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetCatalogPromotionItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetCatalogPromotionItem>>> = ({
    signal,
  }) => adminGetCatalogPromotionItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetCatalogPromotionItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetCatalogPromotionItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetCatalogPromotionItem>>
>;
export type AdminGetCatalogPromotionItemQueryError = void;

/**
 * @summary Retrieves a CatalogPromotion resource.
 */
export const useAdminGetCatalogPromotionItem = <
  TData = Awaited<ReturnType<typeof adminGetCatalogPromotionItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetCatalogPromotionItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetCatalogPromotionItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * 
Example configuration for `for_variants` scope type:

```
{
    "type": "for_variants",
    "configuration": {
        "variants": [
            "string"
        ]
    }
}
```

Example configuration for `percentage_discount` action type:

```
{
    "type": "percentage_discount",
    "configuration": {
        "amount": float
    }
}
```
                    
 * @summary Replaces the CatalogPromotion resource.
 */
export const adminPutCatalogPromotionItem = (
  code: string,
  catalogPromotionJsonldAdminCatalogPromotionUpdate: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CatalogPromotionJsonldAdminCatalogPromotionRead>(
    {
      url: `/api/v2/admin/catalog-promotions/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: catalogPromotionJsonldAdminCatalogPromotionUpdate,
    },
    options,
  );
};

export const getAdminPutCatalogPromotionItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutCatalogPromotionItem>>,
    TError,
    { code: string; data: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutCatalogPromotionItem>>,
  TError,
  { code: string; data: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutCatalogPromotionItem>>,
    { code: string; data: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionUpdate> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutCatalogPromotionItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutCatalogPromotionItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutCatalogPromotionItem>>
>;
export type AdminPutCatalogPromotionItemMutationBody =
  NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionUpdate>;
export type AdminPutCatalogPromotionItemMutationError = void;

/**
 * @summary Replaces the CatalogPromotion resource.
 */
export const useAdminPutCatalogPromotionItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutCatalogPromotionItem>>,
    TError,
    { code: string; data: NonReadonly<CatalogPromotionJsonldAdminCatalogPromotionUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutCatalogPromotionItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Removes the CatalogPromotion resource.
 */
export const adminDeleteCatalogPromotionItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/admin/catalog-promotions/${code}`, method: "delete" },
    options,
  );
};

export const getAdminDeleteCatalogPromotionItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteCatalogPromotionItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeleteCatalogPromotionItem>>,
  TError,
  { code: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeleteCatalogPromotionItem>>,
    { code: string }
  > = props => {
    const { code } = props ?? {};

    return adminDeleteCatalogPromotionItem(code, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminDeleteCatalogPromotionItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeleteCatalogPromotionItem>>
>;

export type AdminDeleteCatalogPromotionItemMutationError = unknown;

/**
 * @summary Removes the CatalogPromotion resource.
 */
export const useAdminDeleteCatalogPromotionItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteCatalogPromotionItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminDeleteCatalogPromotionItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a CatalogPromotion resource.
 */
export const shopGetCatalogPromotionItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CatalogPromotionJsonldShopCatalogPromotionRead>(
    { url: `/api/v2/shop/catalog-promotions/${code}`, method: "get", signal },
    options,
  );
};

export const getShopGetCatalogPromotionItemQueryKey = (code: string) => {
  return [`/api/v2/shop/catalog-promotions/${code}`] as const;
};

export const getShopGetCatalogPromotionItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetCatalogPromotionItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetCatalogPromotionItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetCatalogPromotionItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetCatalogPromotionItem>>> = ({
    signal,
  }) => shopGetCatalogPromotionItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetCatalogPromotionItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetCatalogPromotionItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetCatalogPromotionItem>>
>;
export type ShopGetCatalogPromotionItemQueryError = void;

/**
 * @summary Retrieves a CatalogPromotion resource.
 */
export const useShopGetCatalogPromotionItem = <
  TData = Awaited<ReturnType<typeof shopGetCatalogPromotionItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetCatalogPromotionItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetCatalogPromotionItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
