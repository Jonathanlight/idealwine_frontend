/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetOrderCollection200,
  AdminGetOrderCollectionParams,
  ApiOrdersAdjustmentsGetSubresource200,
  ApiOrdersAdjustmentsGetSubresourceParams,
  ApiOrdersItemsGetSubresource200,
  ApiOrdersItemsGetSubresourceParams,
  ApiOrdersPaymentsGetSubresource200,
  ApiOrdersPaymentsGetSubresourceParams,
  ApiOrdersShipmentsGetSubresource200,
  ApiOrdersShipmentsGetSubresourceParams,
  OrderAddItemToCartJsonldShopCartAddItem,
  OrderChangeItemQuantityInCartShopCartChangeQuantity,
  OrderChangePaymentMethodShopOrderAccountChangePaymentMethod,
  OrderChoosePaymentMethodShopCartSelectPaymentMethod,
  OrderChooseShippingMethodShopCartSelectShippingMethod,
  OrderCompleteOrderShopCartComplete,
  OrderCreditNotePayload,
  OrderGeneratePaymentUrlDTOJsonldShopOrderRead,
  OrderGenerateSignedUrlDTO,
  OrderGroupedOrderPayload,
  OrderJsonld,
  OrderJsonldAdminOrderRead,
  OrderJsonldShopCartRead,
  OrderJsonldShopOrderAccountRead,
  OrderJsonldShopOrderRead,
  OrderListGroupedOrderPayload,
  OrderMerchantValidationOutputDTOJsonldShopOrderRead,
  OrderOrderAmountValidationOutputDTOJsonldShopOrderRead,
  OrderOrderTokenMessageJsonld,
  OrderPaymentProcessingInputDTOJsonldShopOrderRead,
  OrderPaymentProcessingOutputDTOJsonldShopOrderRead,
  OrderPickupCartJsonldShopOrderCreate,
  OrderShopOrderUpdateShopCartUpdate,
  OrderUpdateCartJsonldShopCartUpdate,
  OrderUpdateCartShopOrderUpdateShopCartUpdate,
  ShopAccountChangePaymentMethodOrderItemParams,
  ShopAddCreditNoteToCartOrderItemParams,
  ShopAddItemOrderItemParams,
  ShopChangeQuantityOrderItemParams,
  ShopDeleteGroupedOrderOrderItemParams,
  ShopGetOrderCollection200,
  ShopGetOrderCollectionParams,
  ShopPostOrderCollectionParams,
  ShopPutOrderItemParams,
  ShopRemoveCreditNoteFromCartOrderItemParams,
  ShopRemoveItemOrderItemParams,
  ShopSelectPaymentMethodOrderItemParams,
  ShopSelectShippingMethodOrderItemParams,
  ShopValidateBasketOrderItemParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of Order resources.
 */
export const adminGetOrderCollection = (
  params?: AdminGetOrderCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetOrderCollection200>(
    { url: `/api/v2/admin/orders`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetOrderCollectionQueryKey = (params?: AdminGetOrderCollectionParams) => {
  return [`/api/v2/admin/orders`, ...(params ? [params] : [])] as const;
};

export const getAdminGetOrderCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetOrderCollection>>,
  TError = unknown,
>(
  params?: AdminGetOrderCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetOrderCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetOrderCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetOrderCollection>>> = ({
    signal,
  }) => adminGetOrderCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetOrderCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetOrderCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetOrderCollection>>
>;
export type AdminGetOrderCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Order resources.
 */
export const useAdminGetOrderCollection = <
  TData = Awaited<ReturnType<typeof adminGetOrderCollection>>,
  TError = unknown,
>(
  params?: AdminGetOrderCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetOrderCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetOrderCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a Order resource.
 */
export const adminGetOrderItem = (
  tokenValue: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderJsonldAdminOrderRead>(
    { url: `/api/v2/admin/orders/${tokenValue}`, method: "get", signal },
    options,
  );
};

export const getAdminGetOrderItemQueryKey = (tokenValue: string) => {
  return [`/api/v2/admin/orders/${tokenValue}`] as const;
};

export const getAdminGetOrderItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetOrderItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetOrderItemQueryKey(tokenValue);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetOrderItem>>> = ({ signal }) =>
    adminGetOrderItem(tokenValue, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetOrderItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetOrderItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetOrderItem>>
>;
export type AdminGetOrderItemQueryError = void;

/**
 * @summary Retrieves a Order resource.
 */
export const useAdminGetOrderItem = <
  TData = Awaited<ReturnType<typeof adminGetOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetOrderItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetOrderItemQueryOptions(tokenValue, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Cancels Order
 */
export const adminCancelOrderItem = (
  tokenValue: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldAdminOrderRead>(
    { url: `/api/v2/admin/orders/${tokenValue}/cancel`, method: "patch" },
    options,
  );
};

export const getAdminCancelOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminCancelOrderItem>>,
    TError,
    { tokenValue: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminCancelOrderItem>>,
  TError,
  { tokenValue: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminCancelOrderItem>>,
    { tokenValue: string }
  > = props => {
    const { tokenValue } = props ?? {};

    return adminCancelOrderItem(tokenValue, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminCancelOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminCancelOrderItem>>
>;

export type AdminCancelOrderItemMutationError = void;

/**
 * @summary Cancels Order
 */
export const useAdminCancelOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminCancelOrderItem>>,
    TError,
    { tokenValue: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminCancelOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of Payment resources.
 */
export const apiOrdersPaymentsGetSubresource = (
  tokenValue: string,
  params?: ApiOrdersPaymentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersPaymentsGetSubresource200>(
    { url: `/api/v2/admin/orders/${tokenValue}/payments`, method: "get", params, signal },
    options,
  );
};

export const getApiOrdersPaymentsGetSubresourceQueryKey = (
  tokenValue: string,
  params?: ApiOrdersPaymentsGetSubresourceParams,
) => {
  return [`/api/v2/admin/orders/${tokenValue}/payments`, ...(params ? [params] : [])] as const;
};

export const getApiOrdersPaymentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersPaymentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrdersPaymentsGetSubresourceQueryKey(tokenValue, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>> = ({
    signal,
  }) => apiOrdersPaymentsGetSubresource(tokenValue, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersPaymentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>
>;
export type ApiOrdersPaymentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Payment resources.
 */
export const useApiOrdersPaymentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersPaymentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersPaymentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersPaymentsGetSubresourceQueryOptions(tokenValue, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Shipment resources.
 */
export const apiOrdersShipmentsGetSubresource = (
  tokenValue: string,
  params?: ApiOrdersShipmentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersShipmentsGetSubresource200>(
    { url: `/api/v2/admin/orders/${tokenValue}/shipments`, method: "get", params, signal },
    options,
  );
};

export const getApiOrdersShipmentsGetSubresourceQueryKey = (
  tokenValue: string,
  params?: ApiOrdersShipmentsGetSubresourceParams,
) => {
  return [`/api/v2/admin/orders/${tokenValue}/shipments`, ...(params ? [params] : [])] as const;
};

export const getApiOrdersShipmentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersShipmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrdersShipmentsGetSubresourceQueryKey(tokenValue, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>> = ({
    signal,
  }) => apiOrdersShipmentsGetSubresource(tokenValue, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersShipmentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>
>;
export type ApiOrdersShipmentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Shipment resources.
 */
export const useApiOrdersShipmentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersShipmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersShipmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersShipmentsGetSubresourceQueryOptions(tokenValue, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Change the payment method as logged shop user
 */
export const shopAccountChangePaymentMethodOrderItem = (
  tokenValue: string,
  paymentId: string,
  orderChangePaymentMethodShopOrderAccountChangePaymentMethod: OrderChangePaymentMethodShopOrderAccountChangePaymentMethod,
  params?: ShopAccountChangePaymentMethodOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopOrderAccountRead>(
    {
      url: `/api/v2/shop/account/orders/${tokenValue}/payments/${paymentId}`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderChangePaymentMethodShopOrderAccountChangePaymentMethod,
      params,
    },
    options,
  );
};

export const getShopAccountChangePaymentMethodOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAccountChangePaymentMethodOrderItem>>,
    TError,
    {
      tokenValue: string;
      paymentId: string;
      data: OrderChangePaymentMethodShopOrderAccountChangePaymentMethod;
      params?: ShopAccountChangePaymentMethodOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopAccountChangePaymentMethodOrderItem>>,
  TError,
  {
    tokenValue: string;
    paymentId: string;
    data: OrderChangePaymentMethodShopOrderAccountChangePaymentMethod;
    params?: ShopAccountChangePaymentMethodOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopAccountChangePaymentMethodOrderItem>>,
    {
      tokenValue: string;
      paymentId: string;
      data: OrderChangePaymentMethodShopOrderAccountChangePaymentMethod;
      params?: ShopAccountChangePaymentMethodOrderItemParams;
    }
  > = props => {
    const { tokenValue, paymentId, data, params } = props ?? {};

    return shopAccountChangePaymentMethodOrderItem(
      tokenValue,
      paymentId,
      data,
      params,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopAccountChangePaymentMethodOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopAccountChangePaymentMethodOrderItem>>
>;
export type ShopAccountChangePaymentMethodOrderItemMutationBody =
  OrderChangePaymentMethodShopOrderAccountChangePaymentMethod;
export type ShopAccountChangePaymentMethodOrderItemMutationError = void;

/**
 * @summary Change the payment method as logged shop user
 */
export const useShopAccountChangePaymentMethodOrderItem = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAccountChangePaymentMethodOrderItem>>,
    TError,
    {
      tokenValue: string;
      paymentId: string;
      data: OrderChangePaymentMethodShopOrderAccountChangePaymentMethod;
      params?: ShopAccountChangePaymentMethodOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopAccountChangePaymentMethodOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Creates a Order resource.
 */
export const shopPostOrderCollection = (
  orderPickupCartJsonldShopOrderCreate: NonReadonly<OrderPickupCartJsonldShopOrderCreate>,
  params?: ShopPostOrderCollectionParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: orderPickupCartJsonldShopOrderCreate,
      params,
    },
    options,
  );
};

export const getShopPostOrderCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPostOrderCollection>>,
    TError,
    {
      data: NonReadonly<OrderPickupCartJsonldShopOrderCreate>;
      params?: ShopPostOrderCollectionParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPostOrderCollection>>,
  TError,
  {
    data: NonReadonly<OrderPickupCartJsonldShopOrderCreate>;
    params?: ShopPostOrderCollectionParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPostOrderCollection>>,
    {
      data: NonReadonly<OrderPickupCartJsonldShopOrderCreate>;
      params?: ShopPostOrderCollectionParams;
    }
  > = props => {
    const { data, params } = props ?? {};

    return shopPostOrderCollection(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPostOrderCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPostOrderCollection>>
>;
export type ShopPostOrderCollectionMutationBody = NonReadonly<OrderPickupCartJsonldShopOrderCreate>;
export type ShopPostOrderCollectionMutationError = void;

/**
 * @summary Creates a Order resource.
 */
export const useShopPostOrderCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPostOrderCollection>>,
    TError,
    {
      data: NonReadonly<OrderPickupCartJsonldShopOrderCreate>;
      params?: ShopPostOrderCollectionParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPostOrderCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of Order resources.
 */
export const shopGetOrderCollection = (
  params?: ShopGetOrderCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetOrderCollection200>(
    { url: `/api/v2/shop/orders`, method: "get", params, signal },
    options,
  );
};

export const getShopGetOrderCollectionQueryKey = (params?: ShopGetOrderCollectionParams) => {
  return [`/api/v2/shop/orders`, ...(params ? [params] : [])] as const;
};

export const getShopGetOrderCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetOrderCollection>>,
  TError = unknown,
>(
  params?: ShopGetOrderCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetOrderCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetOrderCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetOrderCollection>>> = ({ signal }) =>
    shopGetOrderCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetOrderCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetOrderCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetOrderCollection>>
>;
export type ShopGetOrderCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Order resources.
 */
export const useShopGetOrderCollection = <
  TData = Awaited<ReturnType<typeof shopGetOrderCollection>>,
  TError = unknown,
>(
  params?: ShopGetOrderCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetOrderCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetOrderCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a Order resource.
 */
export const shopGetOrderItem = (
  tokenValue: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    { url: `/api/v2/shop/orders/${tokenValue}`, method: "get", signal },
    options,
  );
};

export const getShopGetOrderItemQueryKey = (tokenValue: string) => {
  return [`/api/v2/shop/orders/${tokenValue}`] as const;
};

export const getShopGetOrderItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetOrderItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetOrderItemQueryKey(tokenValue);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetOrderItem>>> = ({ signal }) =>
    shopGetOrderItem(tokenValue, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetOrderItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetOrderItemQueryResult = NonNullable<Awaited<ReturnType<typeof shopGetOrderItem>>>;
export type ShopGetOrderItemQueryError = void;

/**
 * @summary Retrieves a Order resource.
 */
export const useShopGetOrderItem = <
  TData = Awaited<ReturnType<typeof shopGetOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetOrderItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetOrderItemQueryOptions(tokenValue, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Deletes cart
 */
export const shopDeleteOrderItem = (
  tokenValue: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/orders/${tokenValue}`, method: "delete" },
    options,
  );
};

export const getShopDeleteOrderItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopDeleteOrderItem>>,
    TError,
    { tokenValue: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopDeleteOrderItem>>,
  TError,
  { tokenValue: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopDeleteOrderItem>>,
    { tokenValue: string }
  > = props => {
    const { tokenValue } = props ?? {};

    return shopDeleteOrderItem(tokenValue, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopDeleteOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopDeleteOrderItem>>
>;

export type ShopDeleteOrderItemMutationError = unknown;

/**
 * @summary Deletes cart
 */
export const useShopDeleteOrderItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopDeleteOrderItem>>,
    TError,
    { tokenValue: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopDeleteOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary 
                        Addresses cart to given location, logged in Customer does not have to provide an email. Applies
                        coupon to cart.
                    
 */
export const shopPutOrderItem = (
  tokenValue: string,
  orderUpdateCartJsonldShopCartUpdate: NonReadonly<OrderUpdateCartJsonldShopCartUpdate>,
  params?: ShopPutOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: orderUpdateCartJsonldShopCartUpdate,
      params,
    },
    options,
  );
};

export const getShopPutOrderItemMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPutOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: NonReadonly<OrderUpdateCartJsonldShopCartUpdate>;
      params?: ShopPutOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopPutOrderItem>>,
  TError,
  {
    tokenValue: string;
    data: NonReadonly<OrderUpdateCartJsonldShopCartUpdate>;
    params?: ShopPutOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopPutOrderItem>>,
    {
      tokenValue: string;
      data: NonReadonly<OrderUpdateCartJsonldShopCartUpdate>;
      params?: ShopPutOrderItemParams;
    }
  > = props => {
    const { tokenValue, data, params } = props ?? {};

    return shopPutOrderItem(tokenValue, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopPutOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopPutOrderItem>>
>;
export type ShopPutOrderItemMutationBody = NonReadonly<OrderUpdateCartJsonldShopCartUpdate>;
export type ShopPutOrderItemMutationError = void;

/**
 * @summary 
                        Addresses cart to given location, logged in Customer does not have to provide an email. Applies
                        coupon to cart.
                    
 */
export const useShopPutOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopPutOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: NonReadonly<OrderUpdateCartJsonldShopCartUpdate>;
      params?: ShopPutOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopPutOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Updates the Order resource.
 */
export const shopAddCreditNoteToCartOrderItem = (
  tokenValue: string,
  orderCreditNotePayload: OrderCreditNotePayload,
  params?: ShopAddCreditNoteToCartOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/add-credit-note-to-cart`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderCreditNotePayload,
      params,
    },
    options,
  );
};

export const getShopAddCreditNoteToCartOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAddCreditNoteToCartOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: OrderCreditNotePayload;
      params?: ShopAddCreditNoteToCartOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopAddCreditNoteToCartOrderItem>>,
  TError,
  {
    tokenValue: string;
    data: OrderCreditNotePayload;
    params?: ShopAddCreditNoteToCartOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopAddCreditNoteToCartOrderItem>>,
    {
      tokenValue: string;
      data: OrderCreditNotePayload;
      params?: ShopAddCreditNoteToCartOrderItemParams;
    }
  > = props => {
    const { tokenValue, data, params } = props ?? {};

    return shopAddCreditNoteToCartOrderItem(tokenValue, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopAddCreditNoteToCartOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopAddCreditNoteToCartOrderItem>>
>;
export type ShopAddCreditNoteToCartOrderItemMutationBody = OrderCreditNotePayload;
export type ShopAddCreditNoteToCartOrderItemMutationError = void;

/**
 * @summary Updates the Order resource.
 */
export const useShopAddCreditNoteToCartOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAddCreditNoteToCartOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: OrderCreditNotePayload;
      params?: ShopAddCreditNoteToCartOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopAddCreditNoteToCartOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Updates the Order resource.
 */
export const shopAddGroupedOrderOrderItem = (
  tokenValue: string,
  orderGroupedOrderPayload: OrderGroupedOrderPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/add-grouped-order`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderGroupedOrderPayload,
    },
    options,
  );
};

export const getShopAddGroupedOrderOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAddGroupedOrderOrderItem>>,
    TError,
    { tokenValue: string; data: OrderGroupedOrderPayload },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopAddGroupedOrderOrderItem>>,
  TError,
  { tokenValue: string; data: OrderGroupedOrderPayload },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopAddGroupedOrderOrderItem>>,
    { tokenValue: string; data: OrderGroupedOrderPayload }
  > = props => {
    const { tokenValue, data } = props ?? {};

    return shopAddGroupedOrderOrderItem(tokenValue, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopAddGroupedOrderOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopAddGroupedOrderOrderItem>>
>;
export type ShopAddGroupedOrderOrderItemMutationBody = OrderGroupedOrderPayload;
export type ShopAddGroupedOrderOrderItemMutationError = void;

/**
 * @summary Updates the Order resource.
 */
export const useShopAddGroupedOrderOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAddGroupedOrderOrderItem>>,
    TError,
    { tokenValue: string; data: OrderGroupedOrderPayload },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopAddGroupedOrderOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Updates the Order resource.
 */
export const shopAddListGroupedOrderOrderItem = (
  tokenValue: string,
  orderListGroupedOrderPayload: OrderListGroupedOrderPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/add-list-grouped-order`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderListGroupedOrderPayload,
    },
    options,
  );
};

export const getShopAddListGroupedOrderOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAddListGroupedOrderOrderItem>>,
    TError,
    { tokenValue: string; data: OrderListGroupedOrderPayload },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopAddListGroupedOrderOrderItem>>,
  TError,
  { tokenValue: string; data: OrderListGroupedOrderPayload },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopAddListGroupedOrderOrderItem>>,
    { tokenValue: string; data: OrderListGroupedOrderPayload }
  > = props => {
    const { tokenValue, data } = props ?? {};

    return shopAddListGroupedOrderOrderItem(tokenValue, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopAddListGroupedOrderOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopAddListGroupedOrderOrderItem>>
>;
export type ShopAddListGroupedOrderOrderItemMutationBody = OrderListGroupedOrderPayload;
export type ShopAddListGroupedOrderOrderItemMutationError = void;

/**
 * @summary Updates the Order resource.
 */
export const useShopAddListGroupedOrderOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAddListGroupedOrderOrderItem>>,
    TError,
    { tokenValue: string; data: OrderListGroupedOrderPayload },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopAddListGroupedOrderOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const apiOrdersAdjustmentsGetSubresource = (
  tokenValue: string,
  params?: ApiOrdersAdjustmentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersAdjustmentsGetSubresource200>(
    { url: `/api/v2/shop/orders/${tokenValue}/adjustments`, method: "get", params, signal },
    options,
  );
};

export const getApiOrdersAdjustmentsGetSubresourceQueryKey = (
  tokenValue: string,
  params?: ApiOrdersAdjustmentsGetSubresourceParams,
) => {
  return [`/api/v2/shop/orders/${tokenValue}/adjustments`, ...(params ? [params] : [])] as const;
};

export const getApiOrdersAdjustmentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrdersAdjustmentsGetSubresourceQueryKey(tokenValue, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>> = ({
    signal,
  }) => apiOrdersAdjustmentsGetSubresource(tokenValue, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersAdjustmentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>
>;
export type ApiOrdersAdjustmentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const useApiOrdersAdjustmentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersAdjustmentsGetSubresourceQueryOptions(
    tokenValue,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary 
                        Contact Apple Pay servers to validate our identity as a merchant.
                    
 */
export const applePayMerchantValidationOrderItem = (
  tokenValue: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderMerchantValidationOutputDTOJsonldShopOrderRead>(
    { url: `/api/v2/shop/orders/${tokenValue}/apple-pay/merchant-validation`, method: "post" },
    options,
  );
};

export const getApplePayMerchantValidationOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof applePayMerchantValidationOrderItem>>,
    TError,
    { tokenValue: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof applePayMerchantValidationOrderItem>>,
  TError,
  { tokenValue: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof applePayMerchantValidationOrderItem>>,
    { tokenValue: string }
  > = props => {
    const { tokenValue } = props ?? {};

    return applePayMerchantValidationOrderItem(tokenValue, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApplePayMerchantValidationOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof applePayMerchantValidationOrderItem>>
>;

export type ApplePayMerchantValidationOrderItemMutationError = void;

/**
 * @summary 
                        Contact Apple Pay servers to validate our identity as a merchant.
                    
 */
export const useApplePayMerchantValidationOrderItem = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof applePayMerchantValidationOrderItem>>,
    TError,
    { tokenValue: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getApplePayMerchantValidationOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary 
                        Due to Apple Pay workflow, we need to fix the order amount in the backend prior to contacting
                        Apple. This is where it happens.
                    
 */
export const applePayOrderAmountValidationOrderItem = (
  tokenValue: string,
  orderJsonld: NonReadonly<OrderJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderOrderAmountValidationOutputDTOJsonldShopOrderRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/apple-pay/order-amount-validation`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: orderJsonld,
    },
    options,
  );
};

export const getApplePayOrderAmountValidationOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof applePayOrderAmountValidationOrderItem>>,
    TError,
    { tokenValue: string; data: NonReadonly<OrderJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof applePayOrderAmountValidationOrderItem>>,
  TError,
  { tokenValue: string; data: NonReadonly<OrderJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof applePayOrderAmountValidationOrderItem>>,
    { tokenValue: string; data: NonReadonly<OrderJsonld> }
  > = props => {
    const { tokenValue, data } = props ?? {};

    return applePayOrderAmountValidationOrderItem(tokenValue, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApplePayOrderAmountValidationOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof applePayOrderAmountValidationOrderItem>>
>;
export type ApplePayOrderAmountValidationOrderItemMutationBody = NonReadonly<OrderJsonld>;
export type ApplePayOrderAmountValidationOrderItemMutationError = void;

/**
 * @summary 
                        Due to Apple Pay workflow, we need to fix the order amount in the backend prior to contacting
                        Apple. This is where it happens.
                    
 */
export const useApplePayOrderAmountValidationOrderItem = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof applePayOrderAmountValidationOrderItem>>,
    TError,
    { tokenValue: string; data: NonReadonly<OrderJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getApplePayOrderAmountValidationOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Process an Apple Pay payment transaction by contacting Axepta.
 */
export const applePayPaymentProcessingOrderItem = (
  tokenValue: string,
  orderPaymentProcessingInputDTOJsonldShopOrderRead: NonReadonly<OrderPaymentProcessingInputDTOJsonldShopOrderRead>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderPaymentProcessingOutputDTOJsonldShopOrderRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/apple-pay/payment-processing`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: orderPaymentProcessingInputDTOJsonldShopOrderRead,
    },
    options,
  );
};

export const getApplePayPaymentProcessingOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof applePayPaymentProcessingOrderItem>>,
    TError,
    { tokenValue: string; data: NonReadonly<OrderPaymentProcessingInputDTOJsonldShopOrderRead> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof applePayPaymentProcessingOrderItem>>,
  TError,
  { tokenValue: string; data: NonReadonly<OrderPaymentProcessingInputDTOJsonldShopOrderRead> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof applePayPaymentProcessingOrderItem>>,
    { tokenValue: string; data: NonReadonly<OrderPaymentProcessingInputDTOJsonldShopOrderRead> }
  > = props => {
    const { tokenValue, data } = props ?? {};

    return applePayPaymentProcessingOrderItem(tokenValue, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApplePayPaymentProcessingOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof applePayPaymentProcessingOrderItem>>
>;
export type ApplePayPaymentProcessingOrderItemMutationBody =
  NonReadonly<OrderPaymentProcessingInputDTOJsonldShopOrderRead>;
export type ApplePayPaymentProcessingOrderItemMutationError = void;

/**
 * @summary Process an Apple Pay payment transaction by contacting Axepta.
 */
export const useApplePayPaymentProcessingOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof applePayPaymentProcessingOrderItem>>,
    TError,
    { tokenValue: string; data: NonReadonly<OrderPaymentProcessingInputDTOJsonldShopOrderRead> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getApplePayPaymentProcessingOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Completes checkout
 */
export const shopCompleteOrderItem = (
  tokenValue: string,
  orderCompleteOrderShopCartComplete: OrderCompleteOrderShopCartComplete,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/complete`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderCompleteOrderShopCartComplete,
    },
    options,
  );
};

export const getShopCompleteOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopCompleteOrderItem>>,
    TError,
    { tokenValue: string; data: OrderCompleteOrderShopCartComplete },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopCompleteOrderItem>>,
  TError,
  { tokenValue: string; data: OrderCompleteOrderShopCartComplete },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopCompleteOrderItem>>,
    { tokenValue: string; data: OrderCompleteOrderShopCartComplete }
  > = props => {
    const { tokenValue, data } = props ?? {};

    return shopCompleteOrderItem(tokenValue, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopCompleteOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopCompleteOrderItem>>
>;
export type ShopCompleteOrderItemMutationBody = OrderCompleteOrderShopCartComplete;
export type ShopCompleteOrderItemMutationError = void;

/**
 * @summary Completes checkout
 */
export const useShopCompleteOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopCompleteOrderItem>>,
    TError,
    { tokenValue: string; data: OrderCompleteOrderShopCartComplete },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopCompleteOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Updates the Order resource.
 */
export const shopCompleteAutomaticCheckoutOrderItem = (
  tokenValue: string,
  orderShopOrderUpdateShopCartUpdate: NonReadonly<OrderShopOrderUpdateShopCartUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/complete-xtra-order-checkout`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderShopOrderUpdateShopCartUpdate,
    },
    options,
  );
};

export const getShopCompleteAutomaticCheckoutOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopCompleteAutomaticCheckoutOrderItem>>,
    TError,
    { tokenValue: string; data: NonReadonly<OrderShopOrderUpdateShopCartUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopCompleteAutomaticCheckoutOrderItem>>,
  TError,
  { tokenValue: string; data: NonReadonly<OrderShopOrderUpdateShopCartUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopCompleteAutomaticCheckoutOrderItem>>,
    { tokenValue: string; data: NonReadonly<OrderShopOrderUpdateShopCartUpdate> }
  > = props => {
    const { tokenValue, data } = props ?? {};

    return shopCompleteAutomaticCheckoutOrderItem(tokenValue, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopCompleteAutomaticCheckoutOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopCompleteAutomaticCheckoutOrderItem>>
>;
export type ShopCompleteAutomaticCheckoutOrderItemMutationBody =
  NonReadonly<OrderShopOrderUpdateShopCartUpdate>;
export type ShopCompleteAutomaticCheckoutOrderItemMutationError = void;

/**
 * @summary Updates the Order resource.
 */
export const useShopCompleteAutomaticCheckoutOrderItem = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopCompleteAutomaticCheckoutOrderItem>>,
    TError,
    { tokenValue: string; data: NonReadonly<OrderShopOrderUpdateShopCartUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopCompleteAutomaticCheckoutOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Prepare payment URL
 */
export const generatePaymentUrlOrderItem = (
  tokenValue: string,
  orderOrderTokenMessageJsonld: NonReadonly<OrderOrderTokenMessageJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderGeneratePaymentUrlDTOJsonldShopOrderRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/create-payment-url`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: orderOrderTokenMessageJsonld,
    },
    options,
  );
};

export const getGeneratePaymentUrlOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generatePaymentUrlOrderItem>>,
    TError,
    { tokenValue: string; data: NonReadonly<OrderOrderTokenMessageJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof generatePaymentUrlOrderItem>>,
  TError,
  { tokenValue: string; data: NonReadonly<OrderOrderTokenMessageJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof generatePaymentUrlOrderItem>>,
    { tokenValue: string; data: NonReadonly<OrderOrderTokenMessageJsonld> }
  > = props => {
    const { tokenValue, data } = props ?? {};

    return generatePaymentUrlOrderItem(tokenValue, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GeneratePaymentUrlOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof generatePaymentUrlOrderItem>>
>;
export type GeneratePaymentUrlOrderItemMutationBody = NonReadonly<OrderOrderTokenMessageJsonld>;
export type GeneratePaymentUrlOrderItemMutationError = void;

/**
 * @summary Prepare payment URL
 */
export const useGeneratePaymentUrlOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generatePaymentUrlOrderItem>>,
    TError,
    { tokenValue: string; data: NonReadonly<OrderOrderTokenMessageJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getGeneratePaymentUrlOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Updates the Order resource.
 */
export const shopDeleteGroupedOrderOrderItem = (
  tokenValue: string,
  orderGroupedOrderPayload: OrderGroupedOrderPayload,
  params?: ShopDeleteGroupedOrderOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/delete-grouped-order`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderGroupedOrderPayload,
      params,
    },
    options,
  );
};

export const getShopDeleteGroupedOrderOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopDeleteGroupedOrderOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: OrderGroupedOrderPayload;
      params?: ShopDeleteGroupedOrderOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopDeleteGroupedOrderOrderItem>>,
  TError,
  {
    tokenValue: string;
    data: OrderGroupedOrderPayload;
    params?: ShopDeleteGroupedOrderOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopDeleteGroupedOrderOrderItem>>,
    {
      tokenValue: string;
      data: OrderGroupedOrderPayload;
      params?: ShopDeleteGroupedOrderOrderItemParams;
    }
  > = props => {
    const { tokenValue, data, params } = props ?? {};

    return shopDeleteGroupedOrderOrderItem(tokenValue, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopDeleteGroupedOrderOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopDeleteGroupedOrderOrderItem>>
>;
export type ShopDeleteGroupedOrderOrderItemMutationBody = OrderGroupedOrderPayload;
export type ShopDeleteGroupedOrderOrderItemMutationError = void;

/**
 * @summary Updates the Order resource.
 */
export const useShopDeleteGroupedOrderOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopDeleteGroupedOrderOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: OrderGroupedOrderPayload;
      params?: ShopDeleteGroupedOrderOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopDeleteGroupedOrderOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Updates the Order resource.
 */
export const shopDeleteListGroupedOrderOrderItem = (
  tokenValue: string,
  orderListGroupedOrderPayload: OrderListGroupedOrderPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/delete-list-grouped-order`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderListGroupedOrderPayload,
    },
    options,
  );
};

export const getShopDeleteListGroupedOrderOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopDeleteListGroupedOrderOrderItem>>,
    TError,
    { tokenValue: string; data: OrderListGroupedOrderPayload },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopDeleteListGroupedOrderOrderItem>>,
  TError,
  { tokenValue: string; data: OrderListGroupedOrderPayload },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopDeleteListGroupedOrderOrderItem>>,
    { tokenValue: string; data: OrderListGroupedOrderPayload }
  > = props => {
    const { tokenValue, data } = props ?? {};

    return shopDeleteListGroupedOrderOrderItem(tokenValue, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopDeleteListGroupedOrderOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopDeleteListGroupedOrderOrderItem>>
>;
export type ShopDeleteListGroupedOrderOrderItemMutationBody = OrderListGroupedOrderPayload;
export type ShopDeleteListGroupedOrderOrderItemMutationError = void;

/**
 * @summary Updates the Order resource.
 */
export const useShopDeleteListGroupedOrderOrderItem = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopDeleteListGroupedOrderOrderItem>>,
    TError,
    { tokenValue: string; data: OrderListGroupedOrderPayload },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopDeleteListGroupedOrderOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a GenerateSignedUrlDTO resource.
 */
export const downloadInvoiceOrderItem = (
  tokenValue: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderGenerateSignedUrlDTO>(
    { url: `/api/v2/shop/orders/${tokenValue}/download-invoice`, method: "get", signal },
    options,
  );
};

export const getDownloadInvoiceOrderItemQueryKey = (tokenValue: string) => {
  return [`/api/v2/shop/orders/${tokenValue}/download-invoice`] as const;
};

export const getDownloadInvoiceOrderItemQueryOptions = <
  TData = Awaited<ReturnType<typeof downloadInvoiceOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof downloadInvoiceOrderItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDownloadInvoiceOrderItemQueryKey(tokenValue);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadInvoiceOrderItem>>> = ({
    signal,
  }) => downloadInvoiceOrderItem(tokenValue, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof downloadInvoiceOrderItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DownloadInvoiceOrderItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof downloadInvoiceOrderItem>>
>;
export type DownloadInvoiceOrderItemQueryError = void;

/**
 * @summary Retrieves a GenerateSignedUrlDTO resource.
 */
export const useDownloadInvoiceOrderItem = <
  TData = Awaited<ReturnType<typeof downloadInvoiceOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof downloadInvoiceOrderItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDownloadInvoiceOrderItemQueryOptions(tokenValue, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Adds Item to cart
 */
export const shopAddItemOrderItem = (
  tokenValue: string,
  orderAddItemToCartJsonldShopCartAddItem: NonReadonly<OrderAddItemToCartJsonldShopCartAddItem>,
  params?: ShopAddItemOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/items`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: orderAddItemToCartJsonldShopCartAddItem,
      params,
    },
    options,
  );
};

export const getShopAddItemOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAddItemOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: NonReadonly<OrderAddItemToCartJsonldShopCartAddItem>;
      params?: ShopAddItemOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopAddItemOrderItem>>,
  TError,
  {
    tokenValue: string;
    data: NonReadonly<OrderAddItemToCartJsonldShopCartAddItem>;
    params?: ShopAddItemOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopAddItemOrderItem>>,
    {
      tokenValue: string;
      data: NonReadonly<OrderAddItemToCartJsonldShopCartAddItem>;
      params?: ShopAddItemOrderItemParams;
    }
  > = props => {
    const { tokenValue, data, params } = props ?? {};

    return shopAddItemOrderItem(tokenValue, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopAddItemOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopAddItemOrderItem>>
>;
export type ShopAddItemOrderItemMutationBody = NonReadonly<OrderAddItemToCartJsonldShopCartAddItem>;
export type ShopAddItemOrderItemMutationError = void;

/**
 * @summary Adds Item to cart
 */
export const useShopAddItemOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopAddItemOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: NonReadonly<OrderAddItemToCartJsonldShopCartAddItem>;
      params?: ShopAddItemOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopAddItemOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of OrderItem resources.
 */
export const apiOrdersItemsGetSubresource = (
  tokenValue: string,
  params?: ApiOrdersItemsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersItemsGetSubresource200>(
    { url: `/api/v2/shop/orders/${tokenValue}/items`, method: "get", params, signal },
    options,
  );
};

export const getApiOrdersItemsGetSubresourceQueryKey = (
  tokenValue: string,
  params?: ApiOrdersItemsGetSubresourceParams,
) => {
  return [`/api/v2/shop/orders/${tokenValue}/items`, ...(params ? [params] : [])] as const;
};

export const getApiOrdersItemsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersItemsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrdersItemsGetSubresourceQueryKey(tokenValue, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>> = ({
    signal,
  }) => apiOrdersItemsGetSubresource(tokenValue, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersItemsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>
>;
export type ApiOrdersItemsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of OrderItem resources.
 */
export const useApiOrdersItemsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersItemsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersItemsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersItemsGetSubresourceQueryOptions(tokenValue, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Removes the Order resource.
 */
export const shopRemoveItemOrderItem = (
  tokenValue: string,
  itemId: string,
  params?: ShopRemoveItemOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/orders/${tokenValue}/items/${itemId}`, method: "delete", params },
    options,
  );
};

export const getShopRemoveItemOrderItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopRemoveItemOrderItem>>,
    TError,
    { tokenValue: string; itemId: string; params?: ShopRemoveItemOrderItemParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopRemoveItemOrderItem>>,
  TError,
  { tokenValue: string; itemId: string; params?: ShopRemoveItemOrderItemParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopRemoveItemOrderItem>>,
    { tokenValue: string; itemId: string; params?: ShopRemoveItemOrderItemParams }
  > = props => {
    const { tokenValue, itemId, params } = props ?? {};

    return shopRemoveItemOrderItem(tokenValue, itemId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopRemoveItemOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopRemoveItemOrderItem>>
>;

export type ShopRemoveItemOrderItemMutationError = unknown;

/**
 * @summary Removes the Order resource.
 */
export const useShopRemoveItemOrderItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopRemoveItemOrderItem>>,
    TError,
    { tokenValue: string; itemId: string; params?: ShopRemoveItemOrderItemParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopRemoveItemOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Changes quantity of order item
 */
export const shopChangeQuantityOrderItem = (
  tokenValue: string,
  orderItemId: string,
  orderChangeItemQuantityInCartShopCartChangeQuantity: OrderChangeItemQuantityInCartShopCartChangeQuantity,
  params?: ShopChangeQuantityOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/items/${orderItemId}`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderChangeItemQuantityInCartShopCartChangeQuantity,
      params,
    },
    options,
  );
};

export const getShopChangeQuantityOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopChangeQuantityOrderItem>>,
    TError,
    {
      tokenValue: string;
      orderItemId: string;
      data: OrderChangeItemQuantityInCartShopCartChangeQuantity;
      params?: ShopChangeQuantityOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopChangeQuantityOrderItem>>,
  TError,
  {
    tokenValue: string;
    orderItemId: string;
    data: OrderChangeItemQuantityInCartShopCartChangeQuantity;
    params?: ShopChangeQuantityOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopChangeQuantityOrderItem>>,
    {
      tokenValue: string;
      orderItemId: string;
      data: OrderChangeItemQuantityInCartShopCartChangeQuantity;
      params?: ShopChangeQuantityOrderItemParams;
    }
  > = props => {
    const { tokenValue, orderItemId, data, params } = props ?? {};

    return shopChangeQuantityOrderItem(tokenValue, orderItemId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopChangeQuantityOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopChangeQuantityOrderItem>>
>;
export type ShopChangeQuantityOrderItemMutationBody =
  OrderChangeItemQuantityInCartShopCartChangeQuantity;
export type ShopChangeQuantityOrderItemMutationError = void;

/**
 * @summary Changes quantity of order item
 */
export const useShopChangeQuantityOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopChangeQuantityOrderItem>>,
    TError,
    {
      tokenValue: string;
      orderItemId: string;
      data: OrderChangeItemQuantityInCartShopCartChangeQuantity;
      params?: ShopChangeQuantityOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopChangeQuantityOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a Order resource.
 */
export const generatePaymentRecapOrderItem = (
  tokenValue: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderJsonldShopOrderRead>(
    { url: `/api/v2/shop/orders/${tokenValue}/payment-recap`, method: "get", signal },
    options,
  );
};

export const getGeneratePaymentRecapOrderItemQueryKey = (tokenValue: string) => {
  return [`/api/v2/shop/orders/${tokenValue}/payment-recap`] as const;
};

export const getGeneratePaymentRecapOrderItemQueryOptions = <
  TData = Awaited<ReturnType<typeof generatePaymentRecapOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof generatePaymentRecapOrderItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGeneratePaymentRecapOrderItemQueryKey(tokenValue);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof generatePaymentRecapOrderItem>>> = ({
    signal,
  }) => generatePaymentRecapOrderItem(tokenValue, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof generatePaymentRecapOrderItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GeneratePaymentRecapOrderItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof generatePaymentRecapOrderItem>>
>;
export type GeneratePaymentRecapOrderItemQueryError = void;

/**
 * @summary Retrieves a Order resource.
 */
export const useGeneratePaymentRecapOrderItem = <
  TData = Awaited<ReturnType<typeof generatePaymentRecapOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof generatePaymentRecapOrderItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGeneratePaymentRecapOrderItemQueryOptions(tokenValue, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Selects payment methods for particular payment
 */
export const shopSelectPaymentMethodOrderItem = (
  tokenValue: string,
  paymentId: string,
  orderChoosePaymentMethodShopCartSelectPaymentMethod: OrderChoosePaymentMethodShopCartSelectPaymentMethod,
  params?: ShopSelectPaymentMethodOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/payments/${paymentId}`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderChoosePaymentMethodShopCartSelectPaymentMethod,
      params,
    },
    options,
  );
};

export const getShopSelectPaymentMethodOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopSelectPaymentMethodOrderItem>>,
    TError,
    {
      tokenValue: string;
      paymentId: string;
      data: OrderChoosePaymentMethodShopCartSelectPaymentMethod;
      params?: ShopSelectPaymentMethodOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopSelectPaymentMethodOrderItem>>,
  TError,
  {
    tokenValue: string;
    paymentId: string;
    data: OrderChoosePaymentMethodShopCartSelectPaymentMethod;
    params?: ShopSelectPaymentMethodOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopSelectPaymentMethodOrderItem>>,
    {
      tokenValue: string;
      paymentId: string;
      data: OrderChoosePaymentMethodShopCartSelectPaymentMethod;
      params?: ShopSelectPaymentMethodOrderItemParams;
    }
  > = props => {
    const { tokenValue, paymentId, data, params } = props ?? {};

    return shopSelectPaymentMethodOrderItem(tokenValue, paymentId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopSelectPaymentMethodOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopSelectPaymentMethodOrderItem>>
>;
export type ShopSelectPaymentMethodOrderItemMutationBody =
  OrderChoosePaymentMethodShopCartSelectPaymentMethod;
export type ShopSelectPaymentMethodOrderItemMutationError = void;

/**
 * @summary Selects payment methods for particular payment
 */
export const useShopSelectPaymentMethodOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopSelectPaymentMethodOrderItem>>,
    TError,
    {
      tokenValue: string;
      paymentId: string;
      data: OrderChoosePaymentMethodShopCartSelectPaymentMethod;
      params?: ShopSelectPaymentMethodOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopSelectPaymentMethodOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieve payment method configuration
 */
export const getConfigurationOrderItem = (
  tokenValue: string,
  paymentId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderJsonld>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/payments/${paymentId}/configuration`,
      method: "get",
      signal,
    },
    options,
  );
};

export const getGetConfigurationOrderItemQueryKey = (tokenValue: string, paymentId: string) => {
  return [`/api/v2/shop/orders/${tokenValue}/payments/${paymentId}/configuration`] as const;
};

export const getGetConfigurationOrderItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getConfigurationOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  paymentId: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getConfigurationOrderItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetConfigurationOrderItemQueryKey(tokenValue, paymentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConfigurationOrderItem>>> = ({
    signal,
  }) => getConfigurationOrderItem(tokenValue, paymentId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(tokenValue && paymentId),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getConfigurationOrderItem>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetConfigurationOrderItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConfigurationOrderItem>>
>;
export type GetConfigurationOrderItemQueryError = void;

/**
 * @summary Retrieve payment method configuration
 */
export const useGetConfigurationOrderItem = <
  TData = Awaited<ReturnType<typeof getConfigurationOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  paymentId: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getConfigurationOrderItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetConfigurationOrderItemQueryOptions(tokenValue, paymentId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Updates the Order resource.
 */
export const shopRemoveCreditNoteFromCartOrderItem = (
  tokenValue: string,
  orderCreditNotePayload: OrderCreditNotePayload,
  params?: ShopRemoveCreditNoteFromCartOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/remove-credit-note-from-cart`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderCreditNotePayload,
      params,
    },
    options,
  );
};

export const getShopRemoveCreditNoteFromCartOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopRemoveCreditNoteFromCartOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: OrderCreditNotePayload;
      params?: ShopRemoveCreditNoteFromCartOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopRemoveCreditNoteFromCartOrderItem>>,
  TError,
  {
    tokenValue: string;
    data: OrderCreditNotePayload;
    params?: ShopRemoveCreditNoteFromCartOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopRemoveCreditNoteFromCartOrderItem>>,
    {
      tokenValue: string;
      data: OrderCreditNotePayload;
      params?: ShopRemoveCreditNoteFromCartOrderItemParams;
    }
  > = props => {
    const { tokenValue, data, params } = props ?? {};

    return shopRemoveCreditNoteFromCartOrderItem(tokenValue, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopRemoveCreditNoteFromCartOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopRemoveCreditNoteFromCartOrderItem>>
>;
export type ShopRemoveCreditNoteFromCartOrderItemMutationBody = OrderCreditNotePayload;
export type ShopRemoveCreditNoteFromCartOrderItemMutationError = void;

/**
 * @summary Updates the Order resource.
 */
export const useShopRemoveCreditNoteFromCartOrderItem = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopRemoveCreditNoteFromCartOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: OrderCreditNotePayload;
      params?: ShopRemoveCreditNoteFromCartOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopRemoveCreditNoteFromCartOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Selects shipping methods for particular shipment
 */
export const shopSelectShippingMethodOrderItem = (
  tokenValue: string,
  shipmentId: string,
  orderChooseShippingMethodShopCartSelectShippingMethod: OrderChooseShippingMethodShopCartSelectShippingMethod,
  params?: ShopSelectShippingMethodOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/shipments/${shipmentId}`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderChooseShippingMethodShopCartSelectShippingMethod,
      params,
    },
    options,
  );
};

export const getShopSelectShippingMethodOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopSelectShippingMethodOrderItem>>,
    TError,
    {
      tokenValue: string;
      shipmentId: string;
      data: OrderChooseShippingMethodShopCartSelectShippingMethod;
      params?: ShopSelectShippingMethodOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopSelectShippingMethodOrderItem>>,
  TError,
  {
    tokenValue: string;
    shipmentId: string;
    data: OrderChooseShippingMethodShopCartSelectShippingMethod;
    params?: ShopSelectShippingMethodOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopSelectShippingMethodOrderItem>>,
    {
      tokenValue: string;
      shipmentId: string;
      data: OrderChooseShippingMethodShopCartSelectShippingMethod;
      params?: ShopSelectShippingMethodOrderItemParams;
    }
  > = props => {
    const { tokenValue, shipmentId, data, params } = props ?? {};

    return shopSelectShippingMethodOrderItem(tokenValue, shipmentId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopSelectShippingMethodOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopSelectShippingMethodOrderItem>>
>;
export type ShopSelectShippingMethodOrderItemMutationBody =
  OrderChooseShippingMethodShopCartSelectShippingMethod;
export type ShopSelectShippingMethodOrderItemMutationError = void;

/**
 * @summary Selects shipping methods for particular shipment
 */
export const useShopSelectShippingMethodOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopSelectShippingMethodOrderItem>>,
    TError,
    {
      tokenValue: string;
      shipmentId: string;
      data: OrderChooseShippingMethodShopCartSelectShippingMethod;
      params?: ShopSelectShippingMethodOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopSelectShippingMethodOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a Order resource.
 */
export const generateShippingRecapOrderItem = (
  tokenValue: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderJsonldShopOrderRead>(
    { url: `/api/v2/shop/orders/${tokenValue}/shipping-recap`, method: "get", signal },
    options,
  );
};

export const getGenerateShippingRecapOrderItemQueryKey = (tokenValue: string) => {
  return [`/api/v2/shop/orders/${tokenValue}/shipping-recap`] as const;
};

export const getGenerateShippingRecapOrderItemQueryOptions = <
  TData = Awaited<ReturnType<typeof generateShippingRecapOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof generateShippingRecapOrderItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGenerateShippingRecapOrderItemQueryKey(tokenValue);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof generateShippingRecapOrderItem>>> = ({
    signal,
  }) => generateShippingRecapOrderItem(tokenValue, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof generateShippingRecapOrderItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GenerateShippingRecapOrderItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof generateShippingRecapOrderItem>>
>;
export type GenerateShippingRecapOrderItemQueryError = void;

/**
 * @summary Retrieves a Order resource.
 */
export const useGenerateShippingRecapOrderItem = <
  TData = Awaited<ReturnType<typeof generateShippingRecapOrderItem>>,
  TError = void,
>(
  tokenValue: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof generateShippingRecapOrderItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGenerateShippingRecapOrderItemQueryOptions(tokenValue, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Updates the Order resource.
 */
export const shopValidateBasketOrderItem = (
  tokenValue: string,
  orderUpdateCartShopOrderUpdateShopCartUpdate: OrderUpdateCartShopOrderUpdateShopCartUpdate,
  params?: ShopValidateBasketOrderItemParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OrderJsonldShopCartRead>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/validate-basket`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: orderUpdateCartShopOrderUpdateShopCartUpdate,
      params,
    },
    options,
  );
};

export const getShopValidateBasketOrderItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopValidateBasketOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: OrderUpdateCartShopOrderUpdateShopCartUpdate;
      params?: ShopValidateBasketOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof shopValidateBasketOrderItem>>,
  TError,
  {
    tokenValue: string;
    data: OrderUpdateCartShopOrderUpdateShopCartUpdate;
    params?: ShopValidateBasketOrderItemParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof shopValidateBasketOrderItem>>,
    {
      tokenValue: string;
      data: OrderUpdateCartShopOrderUpdateShopCartUpdate;
      params?: ShopValidateBasketOrderItemParams;
    }
  > = props => {
    const { tokenValue, data, params } = props ?? {};

    return shopValidateBasketOrderItem(tokenValue, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ShopValidateBasketOrderItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof shopValidateBasketOrderItem>>
>;
export type ShopValidateBasketOrderItemMutationBody = OrderUpdateCartShopOrderUpdateShopCartUpdate;
export type ShopValidateBasketOrderItemMutationError = void;

/**
 * @summary Updates the Order resource.
 */
export const useShopValidateBasketOrderItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof shopValidateBasketOrderItem>>,
    TError,
    {
      tokenValue: string;
      data: OrderUpdateCartShopOrderUpdateShopCartUpdate;
      params?: ShopValidateBasketOrderItemParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getShopValidateBasketOrderItemMutationOptions(options);

  return useMutation(mutationOptions);
};
