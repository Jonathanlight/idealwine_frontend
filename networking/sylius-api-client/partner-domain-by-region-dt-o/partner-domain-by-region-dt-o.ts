/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { PartnerDomainByRegionDTOShopPartnerDomainWithRegionRead } from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a PartnerDomainByRegionDTO resource.
 */
export const getPartnerDomainByRegionDTOItem = (
  regionName: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/partner-domain-by-region-d-t-os/${regionName}`, method: "get", signal },
    options,
  );
};

export const getGetPartnerDomainByRegionDTOItemQueryKey = (regionName: string) => {
  return [`/api/v2/shop/partner-domain-by-region-d-t-os/${regionName}`] as const;
};

export const getGetPartnerDomainByRegionDTOItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getPartnerDomainByRegionDTOItem>>,
  TError = unknown,
>(
  regionName: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPartnerDomainByRegionDTOItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPartnerDomainByRegionDTOItemQueryKey(regionName);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPartnerDomainByRegionDTOItem>>> = ({
    signal,
  }) => getPartnerDomainByRegionDTOItem(regionName, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!regionName, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPartnerDomainByRegionDTOItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPartnerDomainByRegionDTOItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPartnerDomainByRegionDTOItem>>
>;
export type GetPartnerDomainByRegionDTOItemQueryError = unknown;

/**
 * @summary Retrieves a PartnerDomainByRegionDTO resource.
 */
export const useGetPartnerDomainByRegionDTOItem = <
  TData = Awaited<ReturnType<typeof getPartnerDomainByRegionDTOItem>>,
  TError = unknown,
>(
  regionName: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPartnerDomainByRegionDTOItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPartnerDomainByRegionDTOItemQueryOptions(regionName, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of PartnerDomainByRegionDTO resources.
 */
export const getPartnerDomainByRegionDTOCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PartnerDomainByRegionDTOShopPartnerDomainWithRegionRead[]>(
    { url: `/api/v2/shop/partner-domain-with-region`, method: "get", signal },
    options,
  );
};

export const getGetPartnerDomainByRegionDTOCollectionQueryKey = () => {
  return [`/api/v2/shop/partner-domain-with-region`] as const;
};

export const getGetPartnerDomainByRegionDTOCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getPartnerDomainByRegionDTOCollection>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPartnerDomainByRegionDTOCollection>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPartnerDomainByRegionDTOCollectionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPartnerDomainByRegionDTOCollection>>
  > = ({ signal }) => getPartnerDomainByRegionDTOCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPartnerDomainByRegionDTOCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPartnerDomainByRegionDTOCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPartnerDomainByRegionDTOCollection>>
>;
export type GetPartnerDomainByRegionDTOCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of PartnerDomainByRegionDTO resources.
 */
export const useGetPartnerDomainByRegionDTOCollection = <
  TData = Awaited<ReturnType<typeof getPartnerDomainByRegionDTOCollection>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPartnerDomainByRegionDTOCollection>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPartnerDomainByRegionDTOCollectionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
