/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetLocaleCollection200,
  LocaleJsonld,
  LocaleJsonldAdminLocaleCreate,
  LocaleJsonldAdminLocaleRead,
  LocaleJsonldShopLocaleRead,
  ShopGetLocaleCollection200,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of Locale resources.
 */
export const adminGetLocaleCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetLocaleCollection200>(
    { url: `/api/v2/admin/locales`, method: "get", signal },
    options,
  );
};

export const getAdminGetLocaleCollectionQueryKey = () => {
  return [`/api/v2/admin/locales`] as const;
};

export const getAdminGetLocaleCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetLocaleCollection>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetLocaleCollection>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetLocaleCollectionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetLocaleCollection>>> = ({
    signal,
  }) => adminGetLocaleCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetLocaleCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetLocaleCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetLocaleCollection>>
>;
export type AdminGetLocaleCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Locale resources.
 */
export const useAdminGetLocaleCollection = <
  TData = Awaited<ReturnType<typeof adminGetLocaleCollection>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetLocaleCollection>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetLocaleCollectionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a Locale resource.
 */
export const adminPostLocaleCollection = (
  localeJsonldAdminLocaleCreate: NonReadonly<LocaleJsonldAdminLocaleCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<LocaleJsonld>(
    {
      url: `/api/v2/admin/locales`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: localeJsonldAdminLocaleCreate,
    },
    options,
  );
};

export const getAdminPostLocaleCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostLocaleCollection>>,
    TError,
    { data: NonReadonly<LocaleJsonldAdminLocaleCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostLocaleCollection>>,
  TError,
  { data: NonReadonly<LocaleJsonldAdminLocaleCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostLocaleCollection>>,
    { data: NonReadonly<LocaleJsonldAdminLocaleCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostLocaleCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostLocaleCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostLocaleCollection>>
>;
export type AdminPostLocaleCollectionMutationBody = NonReadonly<LocaleJsonldAdminLocaleCreate>;
export type AdminPostLocaleCollectionMutationError = void;

/**
 * @summary Creates a Locale resource.
 */
export const useAdminPostLocaleCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostLocaleCollection>>,
    TError,
    { data: NonReadonly<LocaleJsonldAdminLocaleCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostLocaleCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a Locale resource.
 */
export const adminGetLocaleItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<LocaleJsonldAdminLocaleRead>(
    { url: `/api/v2/admin/locales/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetLocaleItemQueryKey = (code: string) => {
  return [`/api/v2/admin/locales/${code}`] as const;
};

export const getAdminGetLocaleItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetLocaleItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetLocaleItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetLocaleItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetLocaleItem>>> = ({ signal }) =>
    adminGetLocaleItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetLocaleItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetLocaleItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetLocaleItem>>
>;
export type AdminGetLocaleItemQueryError = void;

/**
 * @summary Retrieves a Locale resource.
 */
export const useAdminGetLocaleItem = <
  TData = Awaited<ReturnType<typeof adminGetLocaleItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetLocaleItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetLocaleItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Locale resources.
 */
export const shopGetLocaleCollection = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetLocaleCollection200>(
    { url: `/api/v2/shop/locales`, method: "get", signal },
    options,
  );
};

export const getShopGetLocaleCollectionQueryKey = () => {
  return [`/api/v2/shop/locales`] as const;
};

export const getShopGetLocaleCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetLocaleCollection>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetLocaleCollection>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetLocaleCollectionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetLocaleCollection>>> = ({
    signal,
  }) => shopGetLocaleCollection(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetLocaleCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetLocaleCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetLocaleCollection>>
>;
export type ShopGetLocaleCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Locale resources.
 */
export const useShopGetLocaleCollection = <
  TData = Awaited<ReturnType<typeof shopGetLocaleCollection>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetLocaleCollection>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetLocaleCollectionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a Locale resource.
 */
export const shopGetLocaleItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<LocaleJsonldShopLocaleRead>(
    { url: `/api/v2/shop/locales/${code}`, method: "get", signal },
    options,
  );
};

export const getShopGetLocaleItemQueryKey = (code: string) => {
  return [`/api/v2/shop/locales/${code}`] as const;
};

export const getShopGetLocaleItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetLocaleItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetLocaleItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetLocaleItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetLocaleItem>>> = ({ signal }) =>
    shopGetLocaleItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetLocaleItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetLocaleItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetLocaleItem>>
>;
export type ShopGetLocaleItemQueryError = void;

/**
 * @summary Retrieves a Locale resource.
 */
export const useShopGetLocaleItem = <
  TData = Awaited<ReturnType<typeof shopGetLocaleItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetLocaleItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetLocaleItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
