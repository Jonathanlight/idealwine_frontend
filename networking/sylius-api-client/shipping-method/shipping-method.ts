/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetShippingMethodCollection200,
  AdminGetShippingMethodCollectionParams,
  ShippingMethodJsonldAdminShippingMethodCreate,
  ShippingMethodJsonldAdminShippingMethodRead,
  ShippingMethodJsonldAdminShippingMethodUpdate,
  ShippingMethodJsonldShopShippingMethodRead,
  ShopGetByCountryShippingMethodCollection200,
  ShopGetByCountryShippingMethodCollectionParams,
  ShopGetShippingMethodCollection200,
  ShopGetShippingMethodCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of ShippingMethod resources.
 */
export const adminGetShippingMethodCollection = (
  params?: AdminGetShippingMethodCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetShippingMethodCollection200>(
    { url: `/api/v2/admin/shipping-methods`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetShippingMethodCollectionQueryKey = (
  params?: AdminGetShippingMethodCollectionParams,
) => {
  return [`/api/v2/admin/shipping-methods`, ...(params ? [params] : [])] as const;
};

export const getAdminGetShippingMethodCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetShippingMethodCollection>>,
  TError = unknown,
>(
  params?: AdminGetShippingMethodCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetShippingMethodCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetShippingMethodCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetShippingMethodCollection>>> = ({
    signal,
  }) => adminGetShippingMethodCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetShippingMethodCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetShippingMethodCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetShippingMethodCollection>>
>;
export type AdminGetShippingMethodCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ShippingMethod resources.
 */
export const useAdminGetShippingMethodCollection = <
  TData = Awaited<ReturnType<typeof adminGetShippingMethodCollection>>,
  TError = unknown,
>(
  params?: AdminGetShippingMethodCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetShippingMethodCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetShippingMethodCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a ShippingMethod resource.
 */
export const adminPostShippingMethodCollection = (
  shippingMethodJsonldAdminShippingMethodCreate: NonReadonly<ShippingMethodJsonldAdminShippingMethodCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ShippingMethodJsonldAdminShippingMethodRead>(
    {
      url: `/api/v2/admin/shipping-methods`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: shippingMethodJsonldAdminShippingMethodCreate,
    },
    options,
  );
};

export const getAdminPostShippingMethodCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostShippingMethodCollection>>,
    TError,
    { data: NonReadonly<ShippingMethodJsonldAdminShippingMethodCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostShippingMethodCollection>>,
  TError,
  { data: NonReadonly<ShippingMethodJsonldAdminShippingMethodCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostShippingMethodCollection>>,
    { data: NonReadonly<ShippingMethodJsonldAdminShippingMethodCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostShippingMethodCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostShippingMethodCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostShippingMethodCollection>>
>;
export type AdminPostShippingMethodCollectionMutationBody =
  NonReadonly<ShippingMethodJsonldAdminShippingMethodCreate>;
export type AdminPostShippingMethodCollectionMutationError = void;

/**
 * @summary Creates a ShippingMethod resource.
 */
export const useAdminPostShippingMethodCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostShippingMethodCollection>>,
    TError,
    { data: NonReadonly<ShippingMethodJsonldAdminShippingMethodCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostShippingMethodCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a ShippingMethod resource.
 */
export const adminGetShippingMethodItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShippingMethodJsonldAdminShippingMethodRead>(
    { url: `/api/v2/admin/shipping-methods/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetShippingMethodItemQueryKey = (code: string) => {
  return [`/api/v2/admin/shipping-methods/${code}`] as const;
};

export const getAdminGetShippingMethodItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetShippingMethodItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetShippingMethodItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetShippingMethodItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetShippingMethodItem>>> = ({
    signal,
  }) => adminGetShippingMethodItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetShippingMethodItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetShippingMethodItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetShippingMethodItem>>
>;
export type AdminGetShippingMethodItemQueryError = void;

/**
 * @summary Retrieves a ShippingMethod resource.
 */
export const useAdminGetShippingMethodItem = <
  TData = Awaited<ReturnType<typeof adminGetShippingMethodItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetShippingMethodItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetShippingMethodItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the ShippingMethod resource.
 */
export const adminPutShippingMethodItem = (
  code: string,
  shippingMethodJsonldAdminShippingMethodUpdate: NonReadonly<ShippingMethodJsonldAdminShippingMethodUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ShippingMethodJsonldAdminShippingMethodRead>(
    {
      url: `/api/v2/admin/shipping-methods/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: shippingMethodJsonldAdminShippingMethodUpdate,
    },
    options,
  );
};

export const getAdminPutShippingMethodItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutShippingMethodItem>>,
    TError,
    { code: string; data: NonReadonly<ShippingMethodJsonldAdminShippingMethodUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutShippingMethodItem>>,
  TError,
  { code: string; data: NonReadonly<ShippingMethodJsonldAdminShippingMethodUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutShippingMethodItem>>,
    { code: string; data: NonReadonly<ShippingMethodJsonldAdminShippingMethodUpdate> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutShippingMethodItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutShippingMethodItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutShippingMethodItem>>
>;
export type AdminPutShippingMethodItemMutationBody =
  NonReadonly<ShippingMethodJsonldAdminShippingMethodUpdate>;
export type AdminPutShippingMethodItemMutationError = void;

/**
 * @summary Replaces the ShippingMethod resource.
 */
export const useAdminPutShippingMethodItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutShippingMethodItem>>,
    TError,
    { code: string; data: NonReadonly<ShippingMethodJsonldAdminShippingMethodUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutShippingMethodItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Removes the ShippingMethod resource.
 */
export const adminDeleteShippingMethodItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/admin/shipping-methods/${code}`, method: "delete" },
    options,
  );
};

export const getAdminDeleteShippingMethodItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteShippingMethodItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeleteShippingMethodItem>>,
  TError,
  { code: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeleteShippingMethodItem>>,
    { code: string }
  > = props => {
    const { code } = props ?? {};

    return adminDeleteShippingMethodItem(code, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminDeleteShippingMethodItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeleteShippingMethodItem>>
>;

export type AdminDeleteShippingMethodItemMutationError = unknown;

/**
 * @summary Removes the ShippingMethod resource.
 */
export const useAdminDeleteShippingMethodItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteShippingMethodItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminDeleteShippingMethodItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Archives Shipping Method
 */
export const adminArchiveShippingMethodItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ShippingMethodJsonldAdminShippingMethodRead>(
    { url: `/api/v2/admin/shipping-methods/${code}/archive`, method: "patch" },
    options,
  );
};

export const getAdminArchiveShippingMethodItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminArchiveShippingMethodItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminArchiveShippingMethodItem>>,
  TError,
  { code: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminArchiveShippingMethodItem>>,
    { code: string }
  > = props => {
    const { code } = props ?? {};

    return adminArchiveShippingMethodItem(code, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminArchiveShippingMethodItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminArchiveShippingMethodItem>>
>;

export type AdminArchiveShippingMethodItemMutationError = void;

/**
 * @summary Archives Shipping Method
 */
export const useAdminArchiveShippingMethodItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminArchiveShippingMethodItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminArchiveShippingMethodItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Restores archived Shipping Method
 */
export const adminRestoreShippingMethodItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ShippingMethodJsonldAdminShippingMethodRead>(
    { url: `/api/v2/admin/shipping-methods/${code}/restore`, method: "patch" },
    options,
  );
};

export const getAdminRestoreShippingMethodItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminRestoreShippingMethodItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminRestoreShippingMethodItem>>,
  TError,
  { code: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminRestoreShippingMethodItem>>,
    { code: string }
  > = props => {
    const { code } = props ?? {};

    return adminRestoreShippingMethodItem(code, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminRestoreShippingMethodItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminRestoreShippingMethodItem>>
>;

export type AdminRestoreShippingMethodItemMutationError = void;

/**
 * @summary Restores archived Shipping Method
 */
export const useAdminRestoreShippingMethodItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminRestoreShippingMethodItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminRestoreShippingMethodItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of ShippingMethod resources.
 */
export const shopGetShippingMethodCollection = (
  params?: ShopGetShippingMethodCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetShippingMethodCollection200>(
    { url: `/api/v2/shop/shipping-methods`, method: "get", params, signal },
    options,
  );
};

export const getShopGetShippingMethodCollectionQueryKey = (
  params?: ShopGetShippingMethodCollectionParams,
) => {
  return [`/api/v2/shop/shipping-methods`, ...(params ? [params] : [])] as const;
};

export const getShopGetShippingMethodCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetShippingMethodCollection>>,
  TError = unknown,
>(
  params?: ShopGetShippingMethodCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetShippingMethodCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetShippingMethodCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetShippingMethodCollection>>> = ({
    signal,
  }) => shopGetShippingMethodCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetShippingMethodCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetShippingMethodCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetShippingMethodCollection>>
>;
export type ShopGetShippingMethodCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ShippingMethod resources.
 */
export const useShopGetShippingMethodCollection = <
  TData = Awaited<ReturnType<typeof shopGetShippingMethodCollection>>,
  TError = unknown,
>(
  params?: ShopGetShippingMethodCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetShippingMethodCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetShippingMethodCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Selects shipping methods by country
 */
export const shopGetByCountryShippingMethodCollection = (
  countryCode: string,
  params?: ShopGetByCountryShippingMethodCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetByCountryShippingMethodCollection200>(
    {
      url: `/api/v2/shop/shipping-methods/by-country/${countryCode}`,
      method: "get",
      params,
      signal,
    },
    options,
  );
};

export const getShopGetByCountryShippingMethodCollectionQueryKey = (
  countryCode: string,
  params?: ShopGetByCountryShippingMethodCollectionParams,
) => {
  return [
    `/api/v2/shop/shipping-methods/by-country/${countryCode}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getShopGetByCountryShippingMethodCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetByCountryShippingMethodCollection>>,
  TError = unknown,
>(
  countryCode: string,
  params?: ShopGetByCountryShippingMethodCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetByCountryShippingMethodCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getShopGetByCountryShippingMethodCollectionQueryKey(countryCode, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof shopGetByCountryShippingMethodCollection>>
  > = ({ signal }) =>
    shopGetByCountryShippingMethodCollection(countryCode, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!countryCode, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetByCountryShippingMethodCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetByCountryShippingMethodCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetByCountryShippingMethodCollection>>
>;
export type ShopGetByCountryShippingMethodCollectionQueryError = unknown;

/**
 * @summary Selects shipping methods by country
 */
export const useShopGetByCountryShippingMethodCollection = <
  TData = Awaited<ReturnType<typeof shopGetByCountryShippingMethodCollection>>,
  TError = unknown,
>(
  countryCode: string,
  params?: ShopGetByCountryShippingMethodCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shopGetByCountryShippingMethodCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetByCountryShippingMethodCollectionQueryOptions(
    countryCode,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ShippingMethod resource.
 */
export const shopGetShippingMethodItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShippingMethodJsonldShopShippingMethodRead>(
    { url: `/api/v2/shop/shipping-methods/${code}`, method: "get", signal },
    options,
  );
};

export const getShopGetShippingMethodItemQueryKey = (code: string) => {
  return [`/api/v2/shop/shipping-methods/${code}`] as const;
};

export const getShopGetShippingMethodItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetShippingMethodItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetShippingMethodItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetShippingMethodItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetShippingMethodItem>>> = ({
    signal,
  }) => shopGetShippingMethodItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetShippingMethodItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetShippingMethodItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetShippingMethodItem>>
>;
export type ShopGetShippingMethodItemQueryError = void;

/**
 * @summary Retrieves a ShippingMethod resource.
 */
export const useShopGetShippingMethodItem = <
  TData = Awaited<ReturnType<typeof shopGetShippingMethodItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetShippingMethodItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetShippingMethodItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
