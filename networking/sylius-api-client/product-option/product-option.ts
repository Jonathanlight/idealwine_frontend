/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetProductOptionCollection200,
  AdminGetProductOptionCollectionParams,
  ApiProductOptionsValuesGetSubresource200,
  ApiProductOptionsValuesGetSubresourceParams,
  ProductOptionJsonldAdminProductOptionCreate,
  ProductOptionJsonldAdminProductOptionRead,
  ProductOptionJsonldAdminProductOptionUpdate,
  ProductOptionJsonldShopProductOptionRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of ProductOption resources.
 */
export const adminGetProductOptionCollection = (
  params?: AdminGetProductOptionCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetProductOptionCollection200>(
    { url: `/api/v2/admin/product-options`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetProductOptionCollectionQueryKey = (
  params?: AdminGetProductOptionCollectionParams,
) => {
  return [`/api/v2/admin/product-options`, ...(params ? [params] : [])] as const;
};

export const getAdminGetProductOptionCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductOptionCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductOptionCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductOptionCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductOptionCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductOptionCollection>>> = ({
    signal,
  }) => adminGetProductOptionCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductOptionCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductOptionCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductOptionCollection>>
>;
export type AdminGetProductOptionCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductOption resources.
 */
export const useAdminGetProductOptionCollection = <
  TData = Awaited<ReturnType<typeof adminGetProductOptionCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductOptionCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductOptionCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductOptionCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a ProductOption resource.
 */
export const adminPostProductOptionCollection = (
  productOptionJsonldAdminProductOptionCreate: NonReadonly<ProductOptionJsonldAdminProductOptionCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductOptionJsonldAdminProductOptionRead>(
    {
      url: `/api/v2/admin/product-options`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: productOptionJsonldAdminProductOptionCreate,
    },
    options,
  );
};

export const getAdminPostProductOptionCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostProductOptionCollection>>,
    TError,
    { data: NonReadonly<ProductOptionJsonldAdminProductOptionCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostProductOptionCollection>>,
  TError,
  { data: NonReadonly<ProductOptionJsonldAdminProductOptionCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostProductOptionCollection>>,
    { data: NonReadonly<ProductOptionJsonldAdminProductOptionCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostProductOptionCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostProductOptionCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostProductOptionCollection>>
>;
export type AdminPostProductOptionCollectionMutationBody =
  NonReadonly<ProductOptionJsonldAdminProductOptionCreate>;
export type AdminPostProductOptionCollectionMutationError = void;

/**
 * @summary Creates a ProductOption resource.
 */
export const useAdminPostProductOptionCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostProductOptionCollection>>,
    TError,
    { data: NonReadonly<ProductOptionJsonldAdminProductOptionCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostProductOptionCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a ProductOption resource.
 */
export const adminGetProductOptionItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductOptionJsonldAdminProductOptionRead>(
    { url: `/api/v2/admin/product-options/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetProductOptionItemQueryKey = (code: string) => {
  return [`/api/v2/admin/product-options/${code}`] as const;
};

export const getAdminGetProductOptionItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductOptionItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductOptionItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductOptionItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductOptionItem>>> = ({
    signal,
  }) => adminGetProductOptionItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductOptionItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductOptionItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductOptionItem>>
>;
export type AdminGetProductOptionItemQueryError = void;

/**
 * @summary Retrieves a ProductOption resource.
 */
export const useAdminGetProductOptionItem = <
  TData = Awaited<ReturnType<typeof adminGetProductOptionItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductOptionItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductOptionItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the ProductOption resource.
 */
export const adminPutProductOptionItem = (
  code: string,
  productOptionJsonldAdminProductOptionUpdate: NonReadonly<ProductOptionJsonldAdminProductOptionUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductOptionJsonldAdminProductOptionRead>(
    {
      url: `/api/v2/admin/product-options/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: productOptionJsonldAdminProductOptionUpdate,
    },
    options,
  );
};

export const getAdminPutProductOptionItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProductOptionItem>>,
    TError,
    { code: string; data: NonReadonly<ProductOptionJsonldAdminProductOptionUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutProductOptionItem>>,
  TError,
  { code: string; data: NonReadonly<ProductOptionJsonldAdminProductOptionUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutProductOptionItem>>,
    { code: string; data: NonReadonly<ProductOptionJsonldAdminProductOptionUpdate> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutProductOptionItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutProductOptionItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutProductOptionItem>>
>;
export type AdminPutProductOptionItemMutationBody =
  NonReadonly<ProductOptionJsonldAdminProductOptionUpdate>;
export type AdminPutProductOptionItemMutationError = void;

/**
 * @summary Replaces the ProductOption resource.
 */
export const useAdminPutProductOptionItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutProductOptionItem>>,
    TError,
    { code: string; data: NonReadonly<ProductOptionJsonldAdminProductOptionUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutProductOptionItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of ProductOptionValue resources.
 */
export const apiProductOptionsValuesGetSubresource = (
  code: string,
  params?: ApiProductOptionsValuesGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiProductOptionsValuesGetSubresource200>(
    { url: `/api/v2/admin/product-options/${code}/values`, method: "get", params, signal },
    options,
  );
};

export const getApiProductOptionsValuesGetSubresourceQueryKey = (
  code: string,
  params?: ApiProductOptionsValuesGetSubresourceParams,
) => {
  return [`/api/v2/admin/product-options/${code}/values`, ...(params ? [params] : [])] as const;
};

export const getApiProductOptionsValuesGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiProductOptionsValuesGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiProductOptionsValuesGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiProductOptionsValuesGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiProductOptionsValuesGetSubresourceQueryKey(code, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiProductOptionsValuesGetSubresource>>
  > = ({ signal }) => apiProductOptionsValuesGetSubresource(code, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiProductOptionsValuesGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiProductOptionsValuesGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiProductOptionsValuesGetSubresource>>
>;
export type ApiProductOptionsValuesGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of ProductOptionValue resources.
 */
export const useApiProductOptionsValuesGetSubresource = <
  TData = Awaited<ReturnType<typeof apiProductOptionsValuesGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiProductOptionsValuesGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiProductOptionsValuesGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiProductOptionsValuesGetSubresourceQueryOptions(code, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductOption resource.
 */
export const shopGetProductOptionItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductOptionJsonldShopProductOptionRead>(
    { url: `/api/v2/shop/product-options/${code}`, method: "get", signal },
    options,
  );
};

export const getShopGetProductOptionItemQueryKey = (code: string) => {
  return [`/api/v2/shop/product-options/${code}`] as const;
};

export const getShopGetProductOptionItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetProductOptionItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductOptionItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetProductOptionItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetProductOptionItem>>> = ({
    signal,
  }) => shopGetProductOptionItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetProductOptionItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetProductOptionItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetProductOptionItem>>
>;
export type ShopGetProductOptionItemQueryError = void;

/**
 * @summary Retrieves a ProductOption resource.
 */
export const useShopGetProductOptionItem = <
  TData = Awaited<ReturnType<typeof shopGetProductOptionItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductOptionItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetProductOptionItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
