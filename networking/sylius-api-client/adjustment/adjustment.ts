/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdjustmentJsonldAdminAdjustmentRead,
  AdjustmentJsonldShopAdjustmentRead,
  ApiOrderItemsAdjustmentsGetSubresource200,
  ApiOrderItemsAdjustmentsGetSubresourceParams,
  ApiOrdersAdjustmentsGetSubresource200,
  ApiOrdersAdjustmentsGetSubresourceParams,
  ApiOrdersItemsAdjustmentsGetSubresource200,
  ApiOrdersItemsAdjustmentsGetSubresourceParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves a Adjustment resource.
 */
export const adminGetAdjustmentItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdjustmentJsonldAdminAdjustmentRead>(
    { url: `/api/v2/admin/adjustments/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetAdjustmentItemQueryKey = (id: string) => {
  return [`/api/v2/admin/adjustments/${id}`] as const;
};

export const getAdminGetAdjustmentItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetAdjustmentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetAdjustmentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetAdjustmentItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetAdjustmentItem>>> = ({ signal }) =>
    adminGetAdjustmentItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetAdjustmentItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetAdjustmentItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetAdjustmentItem>>
>;
export type AdminGetAdjustmentItemQueryError = void;

/**
 * @summary Retrieves a Adjustment resource.
 */
export const useAdminGetAdjustmentItem = <
  TData = Awaited<ReturnType<typeof adminGetAdjustmentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetAdjustmentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetAdjustmentItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const apiOrderItemsAdjustmentsGetSubresource = (
  id: string,
  params?: ApiOrderItemsAdjustmentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrderItemsAdjustmentsGetSubresource200>(
    { url: `/api/v2/admin/order-items/${id}/adjustments`, method: "get", params, signal },
    options,
  );
};

export const getApiOrderItemsAdjustmentsGetSubresourceQueryKey = (
  id: string,
  params?: ApiOrderItemsAdjustmentsGetSubresourceParams,
) => {
  return [`/api/v2/admin/order-items/${id}/adjustments`, ...(params ? [params] : [])] as const;
};

export const getApiOrderItemsAdjustmentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
  TError = void,
>(
  id: string,
  params?: ApiOrderItemsAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrderItemsAdjustmentsGetSubresourceQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>
  > = ({ signal }) => apiOrderItemsAdjustmentsGetSubresource(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrderItemsAdjustmentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>
>;
export type ApiOrderItemsAdjustmentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const useApiOrderItemsAdjustmentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
  TError = void,
>(
  id: string,
  params?: ApiOrderItemsAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrderItemsAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrderItemsAdjustmentsGetSubresourceQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a Adjustment resource.
 */
export const shopGetAdjustmentItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdjustmentJsonldShopAdjustmentRead>(
    { url: `/api/v2/shop/adjustments/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetAdjustmentItemQueryKey = (id: string) => {
  return [`/api/v2/shop/adjustments/${id}`] as const;
};

export const getShopGetAdjustmentItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetAdjustmentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetAdjustmentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetAdjustmentItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetAdjustmentItem>>> = ({ signal }) =>
    shopGetAdjustmentItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetAdjustmentItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetAdjustmentItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetAdjustmentItem>>
>;
export type ShopGetAdjustmentItemQueryError = void;

/**
 * @summary Retrieves a Adjustment resource.
 */
export const useShopGetAdjustmentItem = <
  TData = Awaited<ReturnType<typeof shopGetAdjustmentItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetAdjustmentItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetAdjustmentItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const apiOrdersAdjustmentsGetSubresource = (
  tokenValue: string,
  params?: ApiOrdersAdjustmentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersAdjustmentsGetSubresource200>(
    { url: `/api/v2/shop/orders/${tokenValue}/adjustments`, method: "get", params, signal },
    options,
  );
};

export const getApiOrdersAdjustmentsGetSubresourceQueryKey = (
  tokenValue: string,
  params?: ApiOrdersAdjustmentsGetSubresourceParams,
) => {
  return [`/api/v2/shop/orders/${tokenValue}/adjustments`, ...(params ? [params] : [])] as const;
};

export const getApiOrdersAdjustmentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiOrdersAdjustmentsGetSubresourceQueryKey(tokenValue, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>> = ({
    signal,
  }) => apiOrdersAdjustmentsGetSubresource(tokenValue, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!tokenValue, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersAdjustmentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>
>;
export type ApiOrdersAdjustmentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const useApiOrdersAdjustmentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  params?: ApiOrdersAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersAdjustmentsGetSubresourceQueryOptions(
    tokenValue,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const apiOrdersItemsAdjustmentsGetSubresource = (
  tokenValue: string,
  items: string,
  params?: ApiOrdersItemsAdjustmentsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiOrdersItemsAdjustmentsGetSubresource200>(
    {
      url: `/api/v2/shop/orders/${tokenValue}/items/${items}/adjustments`,
      method: "get",
      params,
      signal,
    },
    options,
  );
};

export const getApiOrdersItemsAdjustmentsGetSubresourceQueryKey = (
  tokenValue: string,
  items: string,
  params?: ApiOrdersItemsAdjustmentsGetSubresourceParams,
) => {
  return [
    `/api/v2/shop/orders/${tokenValue}/items/${items}/adjustments`,
    ...(params ? [params] : []),
  ] as const;
};

export const getApiOrdersItemsAdjustmentsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  items: string,
  params?: ApiOrdersItemsAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getApiOrdersItemsAdjustmentsGetSubresourceQueryKey(tokenValue, items, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>
  > = ({ signal }) =>
    apiOrdersItemsAdjustmentsGetSubresource(tokenValue, items, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(tokenValue && items),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiOrdersItemsAdjustmentsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>
>;
export type ApiOrdersItemsAdjustmentsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of Adjustment resources.
 */
export const useApiOrdersItemsAdjustmentsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
  TError = void,
>(
  tokenValue: string,
  items: string,
  params?: ApiOrdersItemsAdjustmentsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiOrdersItemsAdjustmentsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiOrdersItemsAdjustmentsGetSubresourceQueryOptions(
    tokenValue,
    items,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
