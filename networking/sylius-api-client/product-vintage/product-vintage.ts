/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetProductVintageCollection200,
  GetProductVintageCollectionParams,
  ProductVintageJsonld,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of ProductVintage resources.
 */
export const getProductVintageCollection = (
  params?: GetProductVintageCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetProductVintageCollection200>(
    { url: `/api/v2/product-vintages`, method: "get", params, signal },
    options,
  );
};

export const getGetProductVintageCollectionQueryKey = (
  params?: GetProductVintageCollectionParams,
) => {
  return [`/api/v2/product-vintages`, ...(params ? [params] : [])] as const;
};

export const getGetProductVintageCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductVintageCollection>>,
  TError = unknown,
>(
  params?: GetProductVintageCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProductVintageCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductVintageCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductVintageCollection>>> = ({
    signal,
  }) => getProductVintageCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductVintageCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductVintageCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductVintageCollection>>
>;
export type GetProductVintageCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductVintage resources.
 */
export const useGetProductVintageCollection = <
  TData = Awaited<ReturnType<typeof getProductVintageCollection>>,
  TError = unknown,
>(
  params?: GetProductVintageCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProductVintageCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductVintageCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a ProductVintage resource.
 */
export const postProductVintageCollection = (
  productVintageJsonld: NonReadonly<ProductVintageJsonld>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProductVintageJsonld>(
    {
      url: `/api/v2/product-vintages`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: productVintageJsonld,
    },
    options,
  );
};

export const getPostProductVintageCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductVintageCollection>>,
    TError,
    { data: NonReadonly<ProductVintageJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProductVintageCollection>>,
  TError,
  { data: NonReadonly<ProductVintageJsonld> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProductVintageCollection>>,
    { data: NonReadonly<ProductVintageJsonld> }
  > = props => {
    const { data } = props ?? {};

    return postProductVintageCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProductVintageCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProductVintageCollection>>
>;
export type PostProductVintageCollectionMutationBody = NonReadonly<ProductVintageJsonld>;
export type PostProductVintageCollectionMutationError = void;

/**
 * @summary Creates a ProductVintage resource.
 */
export const usePostProductVintageCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductVintageCollection>>,
    TError,
    { data: NonReadonly<ProductVintageJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostProductVintageCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a ProductVintage resource.
 */
export const getProductVintageItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductVintageJsonld>(
    { url: `/api/v2/product-vintages/${id}`, method: "get", signal },
    options,
  );
};

export const getGetProductVintageItemQueryKey = (id: string) => {
  return [`/api/v2/product-vintages/${id}`] as const;
};

export const getGetProductVintageItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductVintageItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProductVintageItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductVintageItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductVintageItem>>> = ({ signal }) =>
    getProductVintageItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductVintageItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductVintageItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductVintageItem>>
>;
export type GetProductVintageItemQueryError = void;

/**
 * @summary Retrieves a ProductVintage resource.
 */
export const useGetProductVintageItem = <
  TData = Awaited<ReturnType<typeof getProductVintageItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProductVintageItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductVintageItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
