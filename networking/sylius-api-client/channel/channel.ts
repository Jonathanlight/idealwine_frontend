/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetChannelCollection200,
  AdminGetChannelCollectionParams,
  ChannelJsonld,
  ChannelJsonldAdminChannelCreate,
  ChannelJsonldAdminChannelRead,
  ChannelJsonldAdminChannelUpdate,
  ChannelJsonldShopChannelRead,
  ShopBillingDataJsonld,
  ShopGetChannelCollection200,
  ShopGetChannelCollectionParams,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of Channel resources.
 */
export const adminGetChannelCollection = (
  params?: AdminGetChannelCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetChannelCollection200>(
    { url: `/api/v2/admin/channels`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetChannelCollectionQueryKey = (params?: AdminGetChannelCollectionParams) => {
  return [`/api/v2/admin/channels`, ...(params ? [params] : [])] as const;
};

export const getAdminGetChannelCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetChannelCollection>>,
  TError = unknown,
>(
  params?: AdminGetChannelCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetChannelCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetChannelCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetChannelCollection>>> = ({
    signal,
  }) => adminGetChannelCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetChannelCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetChannelCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetChannelCollection>>
>;
export type AdminGetChannelCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Channel resources.
 */
export const useAdminGetChannelCollection = <
  TData = Awaited<ReturnType<typeof adminGetChannelCollection>>,
  TError = unknown,
>(
  params?: AdminGetChannelCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetChannelCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetChannelCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a Channel resource.
 */
export const adminPostChannelCollection = (
  channelJsonldAdminChannelCreate: NonReadonly<ChannelJsonldAdminChannelCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ChannelJsonld>(
    {
      url: `/api/v2/admin/channels`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: channelJsonldAdminChannelCreate,
    },
    options,
  );
};

export const getAdminPostChannelCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostChannelCollection>>,
    TError,
    { data: NonReadonly<ChannelJsonldAdminChannelCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostChannelCollection>>,
  TError,
  { data: NonReadonly<ChannelJsonldAdminChannelCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostChannelCollection>>,
    { data: NonReadonly<ChannelJsonldAdminChannelCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostChannelCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostChannelCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostChannelCollection>>
>;
export type AdminPostChannelCollectionMutationBody = NonReadonly<ChannelJsonldAdminChannelCreate>;
export type AdminPostChannelCollectionMutationError = void;

/**
 * @summary Creates a Channel resource.
 */
export const useAdminPostChannelCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostChannelCollection>>,
    TError,
    { data: NonReadonly<ChannelJsonldAdminChannelCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostChannelCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Use $code to retrieve a channel resource.
 */
export const adminGetChannelItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ChannelJsonldAdminChannelRead>(
    { url: `/api/v2/admin/channels/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetChannelItemQueryKey = (code: string) => {
  return [`/api/v2/admin/channels/${code}`] as const;
};

export const getAdminGetChannelItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetChannelItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetChannelItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetChannelItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetChannelItem>>> = ({ signal }) =>
    adminGetChannelItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetChannelItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetChannelItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetChannelItem>>
>;
export type AdminGetChannelItemQueryError = void;

/**
 * @summary Use $code to retrieve a channel resource.
 */
export const useAdminGetChannelItem = <
  TData = Awaited<ReturnType<typeof adminGetChannelItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetChannelItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetChannelItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the Channel resource.
 */
export const adminPutChannelItem = (
  code: string,
  channelJsonldAdminChannelUpdate: NonReadonly<ChannelJsonldAdminChannelUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ChannelJsonld>(
    {
      url: `/api/v2/admin/channels/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: channelJsonldAdminChannelUpdate,
    },
    options,
  );
};

export const getAdminPutChannelItemMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutChannelItem>>,
    TError,
    { code: string; data: NonReadonly<ChannelJsonldAdminChannelUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutChannelItem>>,
  TError,
  { code: string; data: NonReadonly<ChannelJsonldAdminChannelUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutChannelItem>>,
    { code: string; data: NonReadonly<ChannelJsonldAdminChannelUpdate> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutChannelItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutChannelItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutChannelItem>>
>;
export type AdminPutChannelItemMutationBody = NonReadonly<ChannelJsonldAdminChannelUpdate>;
export type AdminPutChannelItemMutationError = void;

/**
 * @summary Replaces the Channel resource.
 */
export const useAdminPutChannelItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutChannelItem>>,
    TError,
    { code: string; data: NonReadonly<ChannelJsonldAdminChannelUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutChannelItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a ShopBillingData resource.
 */
export const apiChannelsShopBillingDataGetSubresource = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopBillingDataJsonld>(
    { url: `/api/v2/admin/channels/${code}/shop-billing-data`, method: "get", signal },
    options,
  );
};

export const getApiChannelsShopBillingDataGetSubresourceQueryKey = (code: string) => {
  return [`/api/v2/admin/channels/${code}/shop-billing-data`] as const;
};

export const getApiChannelsShopBillingDataGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiChannelsShopBillingDataGetSubresourceQueryKey(code);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>
  > = ({ signal }) => apiChannelsShopBillingDataGetSubresource(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiChannelsShopBillingDataGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>
>;
export type ApiChannelsShopBillingDataGetSubresourceQueryError = void;

/**
 * @summary Retrieves a ShopBillingData resource.
 */
export const useApiChannelsShopBillingDataGetSubresource = <
  TData = Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiChannelsShopBillingDataGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiChannelsShopBillingDataGetSubresourceQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of Channel resources.
 */
export const shopGetChannelCollection = (
  params?: ShopGetChannelCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetChannelCollection200>(
    { url: `/api/v2/shop/channels`, method: "get", params, signal },
    options,
  );
};

export const getShopGetChannelCollectionQueryKey = (params?: ShopGetChannelCollectionParams) => {
  return [`/api/v2/shop/channels`, ...(params ? [params] : [])] as const;
};

export const getShopGetChannelCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetChannelCollection>>,
  TError = unknown,
>(
  params?: ShopGetChannelCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetChannelCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetChannelCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetChannelCollection>>> = ({
    signal,
  }) => shopGetChannelCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetChannelCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetChannelCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetChannelCollection>>
>;
export type ShopGetChannelCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Channel resources.
 */
export const useShopGetChannelCollection = <
  TData = Awaited<ReturnType<typeof shopGetChannelCollection>>,
  TError = unknown,
>(
  params?: ShopGetChannelCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetChannelCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetChannelCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Use $code to retrieve a channel resource.
 */
export const shopGetChannelItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ChannelJsonldShopChannelRead>(
    { url: `/api/v2/shop/channels/${code}`, method: "get", signal },
    options,
  );
};

export const getShopGetChannelItemQueryKey = (code: string) => {
  return [`/api/v2/shop/channels/${code}`] as const;
};

export const getShopGetChannelItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetChannelItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetChannelItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetChannelItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetChannelItem>>> = ({ signal }) =>
    shopGetChannelItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetChannelItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetChannelItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetChannelItem>>
>;
export type ShopGetChannelItemQueryError = void;

/**
 * @summary Use $code to retrieve a channel resource.
 */
export const useShopGetChannelItem = <
  TData = Awaited<ReturnType<typeof shopGetChannelItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetChannelItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetChannelItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
