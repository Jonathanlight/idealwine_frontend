/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetProductTaxonCollection200,
  AdminGetProductTaxonCollectionParams,
  ProductTaxonJsonldAdminProductTaxonRead,
  ProductTaxonJsonldShopProductTaxonRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of ProductTaxon resources.
 */
export const adminGetProductTaxonCollection = (
  params?: AdminGetProductTaxonCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetProductTaxonCollection200>(
    { url: `/api/v2/admin/product-taxons`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetProductTaxonCollectionQueryKey = (
  params?: AdminGetProductTaxonCollectionParams,
) => {
  return [`/api/v2/admin/product-taxons`, ...(params ? [params] : [])] as const;
};

export const getAdminGetProductTaxonCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductTaxonCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductTaxonCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductTaxonCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductTaxonCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductTaxonCollection>>> = ({
    signal,
  }) => adminGetProductTaxonCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductTaxonCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductTaxonCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductTaxonCollection>>
>;
export type AdminGetProductTaxonCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of ProductTaxon resources.
 */
export const useAdminGetProductTaxonCollection = <
  TData = Awaited<ReturnType<typeof adminGetProductTaxonCollection>>,
  TError = unknown,
>(
  params?: AdminGetProductTaxonCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminGetProductTaxonCollection>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductTaxonCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductTaxon resource.
 */
export const adminGetProductTaxonItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductTaxonJsonldAdminProductTaxonRead>(
    { url: `/api/v2/admin/product-taxons/${id}`, method: "get", signal },
    options,
  );
};

export const getAdminGetProductTaxonItemQueryKey = (id: string) => {
  return [`/api/v2/admin/product-taxons/${id}`] as const;
};

export const getAdminGetProductTaxonItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetProductTaxonItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductTaxonItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetProductTaxonItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetProductTaxonItem>>> = ({
    signal,
  }) => adminGetProductTaxonItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetProductTaxonItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetProductTaxonItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetProductTaxonItem>>
>;
export type AdminGetProductTaxonItemQueryError = void;

/**
 * @summary Retrieves a ProductTaxon resource.
 */
export const useAdminGetProductTaxonItem = <
  TData = Awaited<ReturnType<typeof adminGetProductTaxonItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetProductTaxonItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetProductTaxonItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a ProductTaxon resource.
 */
export const shopGetProductTaxonItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductTaxonJsonldShopProductTaxonRead>(
    { url: `/api/v2/shop/product-taxons/${id}`, method: "get", signal },
    options,
  );
};

export const getShopGetProductTaxonItemQueryKey = (id: string) => {
  return [`/api/v2/shop/product-taxons/${id}`] as const;
};

export const getShopGetProductTaxonItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetProductTaxonItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductTaxonItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetProductTaxonItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetProductTaxonItem>>> = ({
    signal,
  }) => shopGetProductTaxonItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetProductTaxonItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetProductTaxonItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetProductTaxonItem>>
>;
export type ShopGetProductTaxonItemQueryError = void;

/**
 * @summary Retrieves a ProductTaxon resource.
 */
export const useShopGetProductTaxonItem = <
  TData = Awaited<ReturnType<typeof shopGetProductTaxonItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetProductTaxonItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetProductTaxonItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
