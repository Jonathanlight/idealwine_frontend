/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetTaxonCollection200,
  AdminGetTaxonCollectionParams,
  ShopGetTaxonCollection200,
  ShopGetTaxonCollectionParams,
  TaxonJsonld,
  TaxonJsonldAdminTaxonCreate,
  TaxonJsonldAdminTaxonRead,
  TaxonJsonldAdminTaxonUpdate,
  TaxonJsonldShopTaxonRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of Taxon resources.
 */
export const adminGetTaxonCollection = (
  params?: AdminGetTaxonCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetTaxonCollection200>(
    { url: `/api/v2/admin/taxons`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetTaxonCollectionQueryKey = (params?: AdminGetTaxonCollectionParams) => {
  return [`/api/v2/admin/taxons`, ...(params ? [params] : [])] as const;
};

export const getAdminGetTaxonCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetTaxonCollection>>,
  TError = unknown,
>(
  params?: AdminGetTaxonCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetTaxonCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetTaxonCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetTaxonCollection>>> = ({
    signal,
  }) => adminGetTaxonCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetTaxonCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetTaxonCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetTaxonCollection>>
>;
export type AdminGetTaxonCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Taxon resources.
 */
export const useAdminGetTaxonCollection = <
  TData = Awaited<ReturnType<typeof adminGetTaxonCollection>>,
  TError = unknown,
>(
  params?: AdminGetTaxonCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetTaxonCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetTaxonCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a Taxon resource.
 */
export const adminPostTaxonCollection = (
  taxonJsonldAdminTaxonCreate: NonReadonly<TaxonJsonldAdminTaxonCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<TaxonJsonld>(
    {
      url: `/api/v2/admin/taxons`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: taxonJsonldAdminTaxonCreate,
    },
    options,
  );
};

export const getAdminPostTaxonCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostTaxonCollection>>,
    TError,
    { data: NonReadonly<TaxonJsonldAdminTaxonCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostTaxonCollection>>,
  TError,
  { data: NonReadonly<TaxonJsonldAdminTaxonCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostTaxonCollection>>,
    { data: NonReadonly<TaxonJsonldAdminTaxonCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostTaxonCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostTaxonCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostTaxonCollection>>
>;
export type AdminPostTaxonCollectionMutationBody = NonReadonly<TaxonJsonldAdminTaxonCreate>;
export type AdminPostTaxonCollectionMutationError = void;

/**
 * @summary Creates a Taxon resource.
 */
export const useAdminPostTaxonCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostTaxonCollection>>,
    TError,
    { data: NonReadonly<TaxonJsonldAdminTaxonCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostTaxonCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a Taxon resource.
 */
export const adminGetTaxonItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TaxonJsonldAdminTaxonRead>(
    { url: `/api/v2/admin/taxons/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetTaxonItemQueryKey = (code: string) => {
  return [`/api/v2/admin/taxons/${code}`] as const;
};

export const getAdminGetTaxonItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetTaxonItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetTaxonItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetTaxonItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetTaxonItem>>> = ({ signal }) =>
    adminGetTaxonItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetTaxonItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetTaxonItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetTaxonItem>>
>;
export type AdminGetTaxonItemQueryError = void;

/**
 * @summary Retrieves a Taxon resource.
 */
export const useAdminGetTaxonItem = <
  TData = Awaited<ReturnType<typeof adminGetTaxonItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetTaxonItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetTaxonItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the Taxon resource.
 */
export const adminPutTaxonItem = (
  code: string,
  taxonJsonldAdminTaxonUpdate: NonReadonly<TaxonJsonldAdminTaxonUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<TaxonJsonld>(
    {
      url: `/api/v2/admin/taxons/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: taxonJsonldAdminTaxonUpdate,
    },
    options,
  );
};

export const getAdminPutTaxonItemMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutTaxonItem>>,
    TError,
    { code: string; data: NonReadonly<TaxonJsonldAdminTaxonUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutTaxonItem>>,
  TError,
  { code: string; data: NonReadonly<TaxonJsonldAdminTaxonUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutTaxonItem>>,
    { code: string; data: NonReadonly<TaxonJsonldAdminTaxonUpdate> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutTaxonItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutTaxonItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutTaxonItem>>
>;
export type AdminPutTaxonItemMutationBody = NonReadonly<TaxonJsonldAdminTaxonUpdate>;
export type AdminPutTaxonItemMutationError = void;

/**
 * @summary Replaces the Taxon resource.
 */
export const useAdminPutTaxonItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutTaxonItem>>,
    TError,
    { code: string; data: NonReadonly<TaxonJsonldAdminTaxonUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutTaxonItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of Taxon resources.
 */
export const shopGetTaxonCollection = (
  params?: ShopGetTaxonCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ShopGetTaxonCollection200>(
    { url: `/api/v2/shop/taxons`, method: "get", params, signal },
    options,
  );
};

export const getShopGetTaxonCollectionQueryKey = (params?: ShopGetTaxonCollectionParams) => {
  return [`/api/v2/shop/taxons`, ...(params ? [params] : [])] as const;
};

export const getShopGetTaxonCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetTaxonCollection>>,
  TError = unknown,
>(
  params?: ShopGetTaxonCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetTaxonCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetTaxonCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetTaxonCollection>>> = ({ signal }) =>
    shopGetTaxonCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetTaxonCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetTaxonCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopGetTaxonCollection>>
>;
export type ShopGetTaxonCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Taxon resources.
 */
export const useShopGetTaxonCollection = <
  TData = Awaited<ReturnType<typeof shopGetTaxonCollection>>,
  TError = unknown,
>(
  params?: ShopGetTaxonCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetTaxonCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetTaxonCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves a Taxon resource.
 */
export const shopGetTaxonItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TaxonJsonldShopTaxonRead>(
    { url: `/api/v2/shop/taxons/${code}`, method: "get", signal },
    options,
  );
};

export const getShopGetTaxonItemQueryKey = (code: string) => {
  return [`/api/v2/shop/taxons/${code}`] as const;
};

export const getShopGetTaxonItemQueryOptions = <
  TData = Awaited<ReturnType<typeof shopGetTaxonItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetTaxonItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShopGetTaxonItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopGetTaxonItem>>> = ({ signal }) =>
    shopGetTaxonItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shopGetTaxonItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShopGetTaxonItemQueryResult = NonNullable<Awaited<ReturnType<typeof shopGetTaxonItem>>>;
export type ShopGetTaxonItemQueryError = void;

/**
 * @summary Retrieves a Taxon resource.
 */
export const useShopGetTaxonItem = <
  TData = Awaited<ReturnType<typeof shopGetTaxonItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof shopGetTaxonItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getShopGetTaxonItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
