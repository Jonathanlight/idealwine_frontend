/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiVirtualCellarsVirtualCellarItemsGetSubresource200,
  ApiVirtualCellarsVirtualCellarItemsGetSubresourceParams,
  GetVirtualCellarCollection200,
  GetVirtualCellarCollectionParams,
  VirtualCellarJsonldShopVirtualCellarRead,
  VirtualCellarJsonldShopVirtualCellarWrite,
  VirtualCellarShopVirtualCellarWrite,
  VirtualCellarVirtualCellarAnalysisDataDtoJsonldShopVirtualCellarRead,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of VirtualCellar resources.
 */
export const getVirtualCellarCollection = (
  params?: GetVirtualCellarCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetVirtualCellarCollection200>(
    { url: `/api/v2/shop/virtual-cellars`, method: "get", params, signal },
    options,
  );
};

export const getGetVirtualCellarCollectionQueryKey = (
  params?: GetVirtualCellarCollectionParams,
) => {
  return [`/api/v2/shop/virtual-cellars`, ...(params ? [params] : [])] as const;
};

export const getGetVirtualCellarCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getVirtualCellarCollection>>,
  TError = unknown,
>(
  params?: GetVirtualCellarCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getVirtualCellarCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVirtualCellarCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVirtualCellarCollection>>> = ({
    signal,
  }) => getVirtualCellarCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVirtualCellarCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetVirtualCellarCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVirtualCellarCollection>>
>;
export type GetVirtualCellarCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of VirtualCellar resources.
 */
export const useGetVirtualCellarCollection = <
  TData = Awaited<ReturnType<typeof getVirtualCellarCollection>>,
  TError = unknown,
>(
  params?: GetVirtualCellarCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getVirtualCellarCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetVirtualCellarCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a VirtualCellar resource.
 */
export const postVirtualCellarCollection = (
  virtualCellarJsonldShopVirtualCellarWrite: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<VirtualCellarJsonldShopVirtualCellarRead>(
    {
      url: `/api/v2/shop/virtual-cellars`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: virtualCellarJsonldShopVirtualCellarWrite,
    },
    options,
  );
};

export const getPostVirtualCellarCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postVirtualCellarCollection>>,
    TError,
    { data: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postVirtualCellarCollection>>,
  TError,
  { data: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postVirtualCellarCollection>>,
    { data: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite> }
  > = props => {
    const { data } = props ?? {};

    return postVirtualCellarCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostVirtualCellarCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postVirtualCellarCollection>>
>;
export type PostVirtualCellarCollectionMutationBody =
  NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite>;
export type PostVirtualCellarCollectionMutationError = void;

/**
 * @summary Creates a VirtualCellar resource.
 */
export const usePostVirtualCellarCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postVirtualCellarCollection>>,
    TError,
    { data: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostVirtualCellarCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a VirtualCellar resource.
 */
export const getVirtualCellarItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<VirtualCellarJsonldShopVirtualCellarRead>(
    { url: `/api/v2/shop/virtual-cellars/${id}`, method: "get", signal },
    options,
  );
};

export const getGetVirtualCellarItemQueryKey = (id: string) => {
  return [`/api/v2/shop/virtual-cellars/${id}`] as const;
};

export const getGetVirtualCellarItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getVirtualCellarItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getVirtualCellarItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVirtualCellarItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVirtualCellarItem>>> = ({ signal }) =>
    getVirtualCellarItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVirtualCellarItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetVirtualCellarItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVirtualCellarItem>>
>;
export type GetVirtualCellarItemQueryError = void;

/**
 * @summary Retrieves a VirtualCellar resource.
 */
export const useGetVirtualCellarItem = <
  TData = Awaited<ReturnType<typeof getVirtualCellarItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getVirtualCellarItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetVirtualCellarItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the VirtualCellar resource.
 */
export const putVirtualCellarItem = (
  id: string,
  virtualCellarJsonldShopVirtualCellarWrite: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<VirtualCellarJsonldShopVirtualCellarRead>(
    {
      url: `/api/v2/shop/virtual-cellars/${id}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: virtualCellarJsonldShopVirtualCellarWrite,
    },
    options,
  );
};

export const getPutVirtualCellarItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putVirtualCellarItem>>,
    TError,
    { id: string; data: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putVirtualCellarItem>>,
  TError,
  { id: string; data: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putVirtualCellarItem>>,
    { id: string; data: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite> }
  > = props => {
    const { id, data } = props ?? {};

    return putVirtualCellarItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutVirtualCellarItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof putVirtualCellarItem>>
>;
export type PutVirtualCellarItemMutationBody =
  NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite>;
export type PutVirtualCellarItemMutationError = void;

/**
 * @summary Replaces the VirtualCellar resource.
 */
export const usePutVirtualCellarItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putVirtualCellarItem>>,
    TError,
    { id: string; data: NonReadonly<VirtualCellarJsonldShopVirtualCellarWrite> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPutVirtualCellarItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Updates the VirtualCellar resource.
 */
export const patchVirtualCellarItem = (
  id: string,
  virtualCellarShopVirtualCellarWrite: NonReadonly<VirtualCellarShopVirtualCellarWrite>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<VirtualCellarJsonldShopVirtualCellarRead>(
    {
      url: `/api/v2/shop/virtual-cellars/${id}`,
      method: "patch",
      headers: { "Content-Type": "application/merge-patch+json" },
      data: virtualCellarShopVirtualCellarWrite,
    },
    options,
  );
};

export const getPatchVirtualCellarItemMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchVirtualCellarItem>>,
    TError,
    { id: string; data: NonReadonly<VirtualCellarShopVirtualCellarWrite> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchVirtualCellarItem>>,
  TError,
  { id: string; data: NonReadonly<VirtualCellarShopVirtualCellarWrite> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchVirtualCellarItem>>,
    { id: string; data: NonReadonly<VirtualCellarShopVirtualCellarWrite> }
  > = props => {
    const { id, data } = props ?? {};

    return patchVirtualCellarItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchVirtualCellarItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchVirtualCellarItem>>
>;
export type PatchVirtualCellarItemMutationBody = NonReadonly<VirtualCellarShopVirtualCellarWrite>;
export type PatchVirtualCellarItemMutationError = void;

/**
 * @summary Updates the VirtualCellar resource.
 */
export const usePatchVirtualCellarItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchVirtualCellarItem>>,
    TError,
    { id: string; data: NonReadonly<VirtualCellarShopVirtualCellarWrite> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPatchVirtualCellarItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Removes the VirtualCellar resource.
 */
export const deleteVirtualCellarItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v2/shop/virtual-cellars/${id}`, method: "delete" },
    options,
  );
};

export const getDeleteVirtualCellarItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteVirtualCellarItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteVirtualCellarItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteVirtualCellarItem>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return deleteVirtualCellarItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteVirtualCellarItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteVirtualCellarItem>>
>;

export type DeleteVirtualCellarItemMutationError = unknown;

/**
 * @summary Removes the VirtualCellar resource.
 */
export const useDeleteVirtualCellarItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteVirtualCellarItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getDeleteVirtualCellarItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a VirtualCellarAnalysisDataDto resource.
 */
export const getAnalysisDataVirtualCellarItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<VirtualCellarVirtualCellarAnalysisDataDtoJsonldShopVirtualCellarRead>(
    { url: `/api/v2/shop/virtual-cellars/${id}/analysis-data`, method: "get", signal },
    options,
  );
};

export const getGetAnalysisDataVirtualCellarItemQueryKey = (id: string) => {
  return [`/api/v2/shop/virtual-cellars/${id}/analysis-data`] as const;
};

export const getGetAnalysisDataVirtualCellarItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getAnalysisDataVirtualCellarItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAnalysisDataVirtualCellarItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAnalysisDataVirtualCellarItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnalysisDataVirtualCellarItem>>> = ({
    signal,
  }) => getAnalysisDataVirtualCellarItem(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAnalysisDataVirtualCellarItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAnalysisDataVirtualCellarItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAnalysisDataVirtualCellarItem>>
>;
export type GetAnalysisDataVirtualCellarItemQueryError = void;

/**
 * @summary Retrieves a VirtualCellarAnalysisDataDto resource.
 */
export const useGetAnalysisDataVirtualCellarItem = <
  TData = Awaited<ReturnType<typeof getAnalysisDataVirtualCellarItem>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAnalysisDataVirtualCellarItem>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAnalysisDataVirtualCellarItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the collection of VirtualCellarItem resources.
 */
export const apiVirtualCellarsVirtualCellarItemsGetSubresource = (
  id: string,
  params?: ApiVirtualCellarsVirtualCellarItemsGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiVirtualCellarsVirtualCellarItemsGetSubresource200>(
    {
      url: `/api/v2/shop/virtual-cellars/${id}/virtual-cellar-items`,
      method: "get",
      params,
      signal,
    },
    options,
  );
};

export const getApiVirtualCellarsVirtualCellarItemsGetSubresourceQueryKey = (
  id: string,
  params?: ApiVirtualCellarsVirtualCellarItemsGetSubresourceParams,
) => {
  return [
    `/api/v2/shop/virtual-cellars/${id}/virtual-cellar-items`,
    ...(params ? [params] : []),
  ] as const;
};

export const getApiVirtualCellarsVirtualCellarItemsGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiVirtualCellarsVirtualCellarItemsGetSubresource>>,
  TError = void,
>(
  id: string,
  params?: ApiVirtualCellarsVirtualCellarItemsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiVirtualCellarsVirtualCellarItemsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getApiVirtualCellarsVirtualCellarItemsGetSubresourceQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiVirtualCellarsVirtualCellarItemsGetSubresource>>
  > = ({ signal }) =>
    apiVirtualCellarsVirtualCellarItemsGetSubresource(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiVirtualCellarsVirtualCellarItemsGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiVirtualCellarsVirtualCellarItemsGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiVirtualCellarsVirtualCellarItemsGetSubresource>>
>;
export type ApiVirtualCellarsVirtualCellarItemsGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of VirtualCellarItem resources.
 */
export const useApiVirtualCellarsVirtualCellarItemsGetSubresource = <
  TData = Awaited<ReturnType<typeof apiVirtualCellarsVirtualCellarItemsGetSubresource>>,
  TError = void,
>(
  id: string,
  params?: ApiVirtualCellarsVirtualCellarItemsGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiVirtualCellarsVirtualCellarItemsGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiVirtualCellarsVirtualCellarItemsGetSubresourceQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
