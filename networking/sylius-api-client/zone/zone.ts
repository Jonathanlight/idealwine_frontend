/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AdminGetZoneCollection200,
  AdminGetZoneCollectionParams,
  ApiZonesMembersGetSubresource200,
  ApiZonesMembersGetSubresourceParams,
  ZoneJsonld,
  ZoneJsonldAdminZoneCreate,
  ZoneJsonldAdminZoneRead,
  ZoneJsonldAdminZoneUpdate,
} from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Retrieves the collection of Zone resources.
 */
export const adminGetZoneCollection = (
  params?: AdminGetZoneCollectionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminGetZoneCollection200>(
    { url: `/api/v2/admin/zones`, method: "get", params, signal },
    options,
  );
};

export const getAdminGetZoneCollectionQueryKey = (params?: AdminGetZoneCollectionParams) => {
  return [`/api/v2/admin/zones`, ...(params ? [params] : [])] as const;
};

export const getAdminGetZoneCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetZoneCollection>>,
  TError = unknown,
>(
  params?: AdminGetZoneCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetZoneCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetZoneCollectionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetZoneCollection>>> = ({ signal }) =>
    adminGetZoneCollection(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetZoneCollection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetZoneCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetZoneCollection>>
>;
export type AdminGetZoneCollectionQueryError = unknown;

/**
 * @summary Retrieves the collection of Zone resources.
 */
export const useAdminGetZoneCollection = <
  TData = Awaited<ReturnType<typeof adminGetZoneCollection>>,
  TError = unknown,
>(
  params?: AdminGetZoneCollectionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetZoneCollection>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetZoneCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Creates a Zone resource.
 */
export const adminPostZoneCollection = (
  zoneJsonldAdminZoneCreate: NonReadonly<ZoneJsonldAdminZoneCreate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ZoneJsonld>(
    {
      url: `/api/v2/admin/zones`,
      method: "post",
      headers: { "Content-Type": "application/ld+json" },
      data: zoneJsonldAdminZoneCreate,
    },
    options,
  );
};

export const getAdminPostZoneCollectionMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostZoneCollection>>,
    TError,
    { data: NonReadonly<ZoneJsonldAdminZoneCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPostZoneCollection>>,
  TError,
  { data: NonReadonly<ZoneJsonldAdminZoneCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPostZoneCollection>>,
    { data: NonReadonly<ZoneJsonldAdminZoneCreate> }
  > = props => {
    const { data } = props ?? {};

    return adminPostZoneCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPostZoneCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPostZoneCollection>>
>;
export type AdminPostZoneCollectionMutationBody = NonReadonly<ZoneJsonldAdminZoneCreate>;
export type AdminPostZoneCollectionMutationError = void;

/**
 * @summary Creates a Zone resource.
 */
export const useAdminPostZoneCollection = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPostZoneCollection>>,
    TError,
    { data: NonReadonly<ZoneJsonldAdminZoneCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPostZoneCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves a Zone resource.
 */
export const adminGetZoneItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ZoneJsonldAdminZoneRead>(
    { url: `/api/v2/admin/zones/${code}`, method: "get", signal },
    options,
  );
};

export const getAdminGetZoneItemQueryKey = (code: string) => {
  return [`/api/v2/admin/zones/${code}`] as const;
};

export const getAdminGetZoneItemQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetZoneItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetZoneItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetZoneItemQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetZoneItem>>> = ({ signal }) =>
    adminGetZoneItem(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetZoneItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AdminGetZoneItemQueryResult = NonNullable<Awaited<ReturnType<typeof adminGetZoneItem>>>;
export type AdminGetZoneItemQueryError = void;

/**
 * @summary Retrieves a Zone resource.
 */
export const useAdminGetZoneItem = <
  TData = Awaited<ReturnType<typeof adminGetZoneItem>>,
  TError = void,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminGetZoneItem>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminGetZoneItemQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Replaces the Zone resource.
 */
export const adminPutZoneItem = (
  code: string,
  zoneJsonldAdminZoneUpdate: NonReadonly<ZoneJsonldAdminZoneUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ZoneJsonld>(
    {
      url: `/api/v2/admin/zones/${code}`,
      method: "put",
      headers: { "Content-Type": "application/ld+json" },
      data: zoneJsonldAdminZoneUpdate,
    },
    options,
  );
};

export const getAdminPutZoneItemMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutZoneItem>>,
    TError,
    { code: string; data: NonReadonly<ZoneJsonldAdminZoneUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminPutZoneItem>>,
  TError,
  { code: string; data: NonReadonly<ZoneJsonldAdminZoneUpdate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPutZoneItem>>,
    { code: string; data: NonReadonly<ZoneJsonldAdminZoneUpdate> }
  > = props => {
    const { code, data } = props ?? {};

    return adminPutZoneItem(code, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminPutZoneItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminPutZoneItem>>
>;
export type AdminPutZoneItemMutationBody = NonReadonly<ZoneJsonldAdminZoneUpdate>;
export type AdminPutZoneItemMutationError = void;

/**
 * @summary Replaces the Zone resource.
 */
export const useAdminPutZoneItem = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPutZoneItem>>,
    TError,
    { code: string; data: NonReadonly<ZoneJsonldAdminZoneUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminPutZoneItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Removes the Zone resource.
 */
export const adminDeleteZoneItem = (
  code: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/v2/admin/zones/${code}`, method: "delete" }, options);
};

export const getAdminDeleteZoneItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteZoneItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeleteZoneItem>>,
  TError,
  { code: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeleteZoneItem>>,
    { code: string }
  > = props => {
    const { code } = props ?? {};

    return adminDeleteZoneItem(code, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminDeleteZoneItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeleteZoneItem>>
>;

export type AdminDeleteZoneItemMutationError = unknown;

/**
 * @summary Removes the Zone resource.
 */
export const useAdminDeleteZoneItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteZoneItem>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAdminDeleteZoneItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieves the collection of ZoneMember resources.
 */
export const apiZonesMembersGetSubresource = (
  code: string,
  params?: ApiZonesMembersGetSubresourceParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiZonesMembersGetSubresource200>(
    { url: `/api/v2/admin/zones/${code}/members`, method: "get", params, signal },
    options,
  );
};

export const getApiZonesMembersGetSubresourceQueryKey = (
  code: string,
  params?: ApiZonesMembersGetSubresourceParams,
) => {
  return [`/api/v2/admin/zones/${code}/members`, ...(params ? [params] : [])] as const;
};

export const getApiZonesMembersGetSubresourceQueryOptions = <
  TData = Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiZonesMembersGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiZonesMembersGetSubresourceQueryKey(code, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>> = ({
    signal,
  }) => apiZonesMembersGetSubresource(code, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiZonesMembersGetSubresourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>
>;
export type ApiZonesMembersGetSubresourceQueryError = void;

/**
 * @summary Retrieves the collection of ZoneMember resources.
 */
export const useApiZonesMembersGetSubresource = <
  TData = Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
  TError = void,
>(
  code: string,
  params?: ApiZonesMembersGetSubresourceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apiZonesMembersGetSubresource>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiZonesMembersGetSubresourceQueryOptions(code, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
