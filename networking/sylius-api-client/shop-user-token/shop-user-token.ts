/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions } from "@tanstack/react-query";
import type { ShopUserCredentials, ShopUserToken } from "../.ts.schemas";
import { customInstance } from "../../mutator/custom-client-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Get JWT token to login.
 */
export const postCredentialsItem = (
  shopUserCredentials: ShopUserCredentials,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ShopUserToken>(
    {
      url: `/api/v2/shop/authentication-token`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: shopUserCredentials,
    },
    options,
  );
};

export const getPostCredentialsItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCredentialsItem>>,
    TError,
    { data: ShopUserCredentials },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCredentialsItem>>,
  TError,
  { data: ShopUserCredentials },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCredentialsItem>>,
    { data: ShopUserCredentials }
  > = props => {
    const { data } = props ?? {};

    return postCredentialsItem(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCredentialsItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCredentialsItem>>
>;
export type PostCredentialsItemMutationBody = ShopUserCredentials;
export type PostCredentialsItemMutationError = unknown;

/**
 * @summary Get JWT token to login.
 */
export const usePostCredentialsItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCredentialsItem>>,
    TError,
    { data: ShopUserCredentials },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostCredentialsItemMutationOptions(options);

  return useMutation(mutationOptions);
};
